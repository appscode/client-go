// Code generated by protoc-gen-go.
// source: disk.proto
// DO NOT EDIT!

package v1beta2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/appscodeapis/appscode/api"
import appscode_dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DiskListRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
}

func (m *DiskListRequest) Reset()                    { *m = DiskListRequest{} }
func (m *DiskListRequest) String() string            { return proto.CompactTextString(m) }
func (*DiskListRequest) ProtoMessage()               {}
func (*DiskListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *DiskListRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

type DiskListResponse struct {
	Status *appscode_dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Disks  []*Disk                 `protobuf:"bytes,2,rep,name=disks" json:"disks,omitempty"`
}

func (m *DiskListResponse) Reset()                    { *m = DiskListResponse{} }
func (m *DiskListResponse) String() string            { return proto.CompactTextString(m) }
func (*DiskListResponse) ProtoMessage()               {}
func (*DiskListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *DiskListResponse) GetStatus() *appscode_dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DiskListResponse) GetDisks() []*Disk {
	if m != nil {
		return m.Disks
	}
	return nil
}

type DiskDescribeRequest struct {
	Cluster          string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Provider         string `protobuf:"bytes,3,opt,name=provider" json:"provider,omitempty"`
	VhdContainerName string `protobuf:"bytes,4,opt,name=vhd_container_name,json=vhdContainerName" json:"vhd_container_name,omitempty"`
}

func (m *DiskDescribeRequest) Reset()                    { *m = DiskDescribeRequest{} }
func (m *DiskDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*DiskDescribeRequest) ProtoMessage()               {}
func (*DiskDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *DiskDescribeRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *DiskDescribeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DiskDescribeRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *DiskDescribeRequest) GetVhdContainerName() string {
	if m != nil {
		return m.VhdContainerName
	}
	return ""
}

type DiskDescribeResponse struct {
	Status *appscode_dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Disk   *Disk                   `protobuf:"bytes,2,opt,name=disk" json:"disk,omitempty"`
}

func (m *DiskDescribeResponse) Reset()                    { *m = DiskDescribeResponse{} }
func (m *DiskDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*DiskDescribeResponse) ProtoMessage()               {}
func (*DiskDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *DiskDescribeResponse) GetStatus() *appscode_dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DiskDescribeResponse) GetDisk() *Disk {
	if m != nil {
		return m.Disk
	}
	return nil
}

type DiskCreateRequest struct {
	Cluster          string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Zone             string `protobuf:"bytes,3,opt,name=zone" json:"zone,omitempty"`
	DiskType         string `protobuf:"bytes,4,opt,name=disk_type,json=diskType" json:"disk_type,omitempty"`
	SizeGb           int64  `protobuf:"varint,5,opt,name=size_gb,json=sizeGb" json:"size_gb,omitempty"`
	VhdContainerName string `protobuf:"bytes,6,opt,name=vhd_container_name,json=vhdContainerName" json:"vhd_container_name,omitempty"`
}

func (m *DiskCreateRequest) Reset()                    { *m = DiskCreateRequest{} }
func (m *DiskCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*DiskCreateRequest) ProtoMessage()               {}
func (*DiskCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *DiskCreateRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *DiskCreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DiskCreateRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *DiskCreateRequest) GetDiskType() string {
	if m != nil {
		return m.DiskType
	}
	return ""
}

func (m *DiskCreateRequest) GetSizeGb() int64 {
	if m != nil {
		return m.SizeGb
	}
	return 0
}

func (m *DiskCreateRequest) GetVhdContainerName() string {
	if m != nil {
		return m.VhdContainerName
	}
	return ""
}

type DiskDeleteRequest struct {
	Cluster          string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Uid              string `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
	VhdContainerName string `protobuf:"bytes,3,opt,name=vhd_container_name,json=vhdContainerName" json:"vhd_container_name,omitempty"`
}

func (m *DiskDeleteRequest) Reset()                    { *m = DiskDeleteRequest{} }
func (m *DiskDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DiskDeleteRequest) ProtoMessage()               {}
func (*DiskDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *DiskDeleteRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *DiskDeleteRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *DiskDeleteRequest) GetVhdContainerName() string {
	if m != nil {
		return m.VhdContainerName
	}
	return ""
}

type Disk struct {
	Name                  string                 `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id                    string                 `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Provider              string                 `protobuf:"bytes,3,opt,name=provider" json:"provider,omitempty"`
	SizeGb                int64                  `protobuf:"varint,4,opt,name=size_gb,json=sizeGb" json:"size_gb,omitempty"`
	Type                  string                 `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	Zone                  string                 `protobuf:"bytes,6,opt,name=zone" json:"zone,omitempty"`
	Status                string                 `protobuf:"bytes,7,opt,name=status" json:"status,omitempty"`
	Users                 []string               `protobuf:"bytes,8,rep,name=users" json:"users,omitempty"`
	Kind                  string                 `protobuf:"bytes,9,opt,name=kind" json:"kind,omitempty"`
	Endpoint              string                 `protobuf:"bytes,10,opt,name=endpoint" json:"endpoint,omitempty"`
	Iops                  int64                  `protobuf:"varint,11,opt,name=iops" json:"iops,omitempty"`
	PersistentVolume      *PersistentVolume      `protobuf:"bytes,12,opt,name=persistent_volume,json=persistentVolume" json:"persistent_volume,omitempty"`
	PersistentVolumeClaim *PersistentVolumeClaim `protobuf:"bytes,13,opt,name=persistent_volume_claim,json=persistentVolumeClaim" json:"persistent_volume_claim,omitempty"`
}

func (m *Disk) Reset()                    { *m = Disk{} }
func (m *Disk) String() string            { return proto.CompactTextString(m) }
func (*Disk) ProtoMessage()               {}
func (*Disk) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *Disk) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Disk) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Disk) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *Disk) GetSizeGb() int64 {
	if m != nil {
		return m.SizeGb
	}
	return 0
}

func (m *Disk) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Disk) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *Disk) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Disk) GetUsers() []string {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Disk) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Disk) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Disk) GetIops() int64 {
	if m != nil {
		return m.Iops
	}
	return 0
}

func (m *Disk) GetPersistentVolume() *PersistentVolume {
	if m != nil {
		return m.PersistentVolume
	}
	return nil
}

func (m *Disk) GetPersistentVolumeClaim() *PersistentVolumeClaim {
	if m != nil {
		return m.PersistentVolumeClaim
	}
	return nil
}

func init() {
	proto.RegisterType((*DiskListRequest)(nil), "appscode.kubernetes.v1beta2.DiskListRequest")
	proto.RegisterType((*DiskListResponse)(nil), "appscode.kubernetes.v1beta2.DiskListResponse")
	proto.RegisterType((*DiskDescribeRequest)(nil), "appscode.kubernetes.v1beta2.DiskDescribeRequest")
	proto.RegisterType((*DiskDescribeResponse)(nil), "appscode.kubernetes.v1beta2.DiskDescribeResponse")
	proto.RegisterType((*DiskCreateRequest)(nil), "appscode.kubernetes.v1beta2.DiskCreateRequest")
	proto.RegisterType((*DiskDeleteRequest)(nil), "appscode.kubernetes.v1beta2.DiskDeleteRequest")
	proto.RegisterType((*Disk)(nil), "appscode.kubernetes.v1beta2.Disk")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Disks service

type DisksClient interface {
	List(ctx context.Context, in *DiskListRequest, opts ...grpc.CallOption) (*DiskListResponse, error)
	Describe(ctx context.Context, in *DiskDescribeRequest, opts ...grpc.CallOption) (*DiskDescribeResponse, error)
	Create(ctx context.Context, in *DiskCreateRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	Delete(ctx context.Context, in *DiskDeleteRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
}

type disksClient struct {
	cc *grpc.ClientConn
}

func NewDisksClient(cc *grpc.ClientConn) DisksClient {
	return &disksClient{cc}
}

func (c *disksClient) List(ctx context.Context, in *DiskListRequest, opts ...grpc.CallOption) (*DiskListResponse, error) {
	out := new(DiskListResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta2.Disks/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disksClient) Describe(ctx context.Context, in *DiskDescribeRequest, opts ...grpc.CallOption) (*DiskDescribeResponse, error) {
	out := new(DiskDescribeResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta2.Disks/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disksClient) Create(ctx context.Context, in *DiskCreateRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta2.Disks/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disksClient) Delete(ctx context.Context, in *DiskDeleteRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta2.Disks/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Disks service

type DisksServer interface {
	List(context.Context, *DiskListRequest) (*DiskListResponse, error)
	Describe(context.Context, *DiskDescribeRequest) (*DiskDescribeResponse, error)
	Create(context.Context, *DiskCreateRequest) (*appscode_dtypes.VoidResponse, error)
	Delete(context.Context, *DiskDeleteRequest) (*appscode_dtypes.VoidResponse, error)
}

func RegisterDisksServer(s *grpc.Server, srv DisksServer) {
	s.RegisterService(&_Disks_serviceDesc, srv)
}

func _Disks_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisksServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta2.Disks/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisksServer).List(ctx, req.(*DiskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disks_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisksServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta2.Disks/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisksServer).Describe(ctx, req.(*DiskDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disks_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisksServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta2.Disks/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisksServer).Create(ctx, req.(*DiskCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disks_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisksServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta2.Disks/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisksServer).Delete(ctx, req.(*DiskDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Disks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appscode.kubernetes.v1beta2.Disks",
	HandlerType: (*DisksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Disks_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Disks_Describe_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Disks_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Disks_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "disk.proto",
}

func init() { proto.RegisterFile("disk.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 748 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0x96, 0x13, 0xe7, 0xef, 0xb4, 0xf7, 0xde, 0x74, 0x6e, 0xef, 0xad, 0x95, 0xde, 0x0b, 0xc1,
	0x20, 0x11, 0xfa, 0x63, 0xb7, 0xa9, 0xa0, 0x12, 0xec, 0xda, 0x4a, 0x6c, 0x10, 0xaa, 0x0c, 0xea,
	0xa2, 0x9b, 0xc8, 0xb1, 0x8f, 0xda, 0x21, 0x89, 0xc7, 0x78, 0xc6, 0x91, 0x5a, 0x28, 0x8b, 0xae,
	0x41, 0x2c, 0x10, 0xef, 0xc0, 0x0b, 0xb0, 0x60, 0xc9, 0x33, 0xf0, 0x0a, 0xec, 0x78, 0x09, 0x34,
	0x63, 0xc7, 0x4d, 0xda, 0xa6, 0x49, 0xbb, 0x89, 0xce, 0x39, 0x73, 0x7e, 0xbe, 0xf9, 0x72, 0xfc,
	0x0d, 0x80, 0x4f, 0x79, 0xc7, 0x0a, 0x23, 0x26, 0x18, 0x59, 0x74, 0xc3, 0x90, 0x7b, 0xcc, 0x47,
	0xab, 0x13, 0xb7, 0x31, 0x0a, 0x50, 0x20, 0xb7, 0xfa, 0xeb, 0x6d, 0x14, 0x6e, 0xb3, 0xf6, 0xdf,
	0x01, 0x63, 0x07, 0x5d, 0xb4, 0xdd, 0x90, 0xda, 0x6e, 0x10, 0x30, 0xe1, 0x0a, 0xca, 0x02, 0x9e,
	0x94, 0xd6, 0x6e, 0x0d, 0x4a, 0xc7, 0x9c, 0xdf, 0x1e, 0x39, 0xf7, 0xc5, 0x51, 0x88, 0xdc, 0x56,
	0xbf, 0x69, 0xc2, 0xac, 0xd7, 0xa5, 0x18, 0x88, 0xc4, 0x33, 0x97, 0xe1, 0xaf, 0x1d, 0xca, 0x3b,
	0xcf, 0x28, 0x17, 0x0e, 0xbe, 0x8e, 0x91, 0x0b, 0x62, 0x40, 0xc9, 0xeb, 0xc6, 0x5c, 0x60, 0x64,
	0x68, 0x75, 0xad, 0x51, 0x71, 0x06, 0xae, 0xf9, 0x16, 0xaa, 0x67, 0xc9, 0x3c, 0x64, 0x01, 0x47,
	0x62, 0x43, 0x91, 0x0b, 0x57, 0xc4, 0x5c, 0x25, 0xcf, 0x34, 0x17, 0xac, 0xec, 0x6e, 0xc9, 0x70,
	0xeb, 0x85, 0x3a, 0x76, 0xd2, 0x34, 0xb2, 0x09, 0x05, 0xc9, 0x04, 0x37, 0x72, 0xf5, 0x7c, 0x63,
	0xa6, 0x79, 0xc7, 0xba, 0x82, 0x0b, 0x4b, 0x8e, 0x73, 0x92, 0x7c, 0xf3, 0x83, 0x06, 0x7f, 0x4b,
	0x7f, 0x07, 0xb9, 0x17, 0xd1, 0x36, 0x4e, 0xc4, 0x4b, 0x08, 0xe8, 0x81, 0xdb, 0x43, 0x23, 0xa7,
	0xc2, 0xca, 0x26, 0x35, 0x28, 0x87, 0x11, 0xeb, 0x53, 0x1f, 0x23, 0x23, 0xaf, 0xe2, 0x99, 0x4f,
	0x56, 0x80, 0xf4, 0x0f, 0xfd, 0x96, 0xc7, 0x02, 0xe1, 0xd2, 0x00, 0xa3, 0x96, 0xaa, 0xd6, 0x55,
	0x56, 0xb5, 0x7f, 0xe8, 0x6f, 0x0f, 0x0e, 0x9e, 0xbb, 0x3d, 0x34, 0xdf, 0xc1, 0xfc, 0x28, 0x9c,
	0x9b, 0x32, 0xf2, 0x10, 0x74, 0x79, 0x43, 0x05, 0x73, 0x2a, 0x42, 0x54, 0xba, 0xf9, 0x4d, 0x83,
	0x39, 0xe9, 0x6e, 0x47, 0xe8, 0x8a, 0x1b, 0xb2, 0x41, 0x40, 0x3f, 0x66, 0x01, 0xa6, 0x4c, 0x28,
	0x9b, 0x2c, 0x42, 0x45, 0xf6, 0x6f, 0x49, 0xac, 0xe9, 0xe5, 0xcb, 0x32, 0xf0, 0xf2, 0x28, 0x44,
	0xb2, 0x00, 0x25, 0x4e, 0x8f, 0xb1, 0x75, 0xd0, 0x36, 0x0a, 0x75, 0xad, 0x91, 0x77, 0x8a, 0xd2,
	0x7d, 0xda, 0x1e, 0xc3, 0x5d, 0x71, 0x0c, 0x77, 0xbd, 0x04, 0xfa, 0x0e, 0x76, 0x71, 0x1a, 0xe8,
	0x55, 0xc8, 0xc7, 0xd4, 0x4f, 0x91, 0x4b, 0x73, 0xcc, 0xb8, 0xfc, 0x98, 0x71, 0xdf, 0xf3, 0xa0,
	0xcb, 0x79, 0x19, 0x07, 0xda, 0x10, 0x07, 0x7f, 0x42, 0x2e, 0xeb, 0x9d, 0xa3, 0xfe, 0x95, 0x1b,
	0x32, 0x74, 0x7d, 0x7d, 0xe4, 0xfa, 0x04, 0x74, 0xc5, 0x57, 0x21, 0x69, 0x2c, 0xed, 0x8c, 0xdc,
	0xe2, 0x10, 0xb9, 0xff, 0x66, 0xcb, 0x51, 0x52, 0xd1, 0xc1, 0x0e, 0xcc, 0x43, 0x21, 0xe6, 0x18,
	0x71, 0xa3, 0x5c, 0xcf, 0x37, 0x2a, 0x4e, 0xe2, 0xc8, 0x0e, 0x1d, 0x1a, 0xf8, 0x46, 0x25, 0xe9,
	0x20, 0x6d, 0x09, 0x0f, 0x03, 0x3f, 0x64, 0x34, 0x10, 0x06, 0x24, 0xf0, 0x06, 0xbe, 0xcc, 0xa7,
	0x2c, 0xe4, 0xc6, 0x8c, 0xc2, 0xa6, 0x6c, 0xb2, 0x0f, 0x73, 0x21, 0x46, 0x9c, 0x72, 0x81, 0x81,
	0x68, 0xf5, 0x59, 0x37, 0xee, 0xa1, 0x31, 0xab, 0x56, 0x6d, 0xf5, 0xca, 0x55, 0xdb, 0xcd, 0xaa,
	0xf6, 0x54, 0x91, 0x53, 0x0d, 0xcf, 0x45, 0xc8, 0x2b, 0x58, 0xb8, 0xd0, 0xbb, 0xe5, 0x75, 0x5d,
	0xda, 0x33, 0xfe, 0x50, 0x13, 0x9a, 0xd7, 0x9a, 0xb0, 0x2d, 0x2b, 0x9d, 0x7f, 0xc2, 0xcb, 0xc2,
	0xcd, 0x5f, 0x3a, 0x14, 0xe4, 0x7f, 0xc8, 0xc9, 0x67, 0x0d, 0x74, 0xa9, 0x41, 0x64, 0x65, 0xe2,
	0xa7, 0x32, 0xa4, 0x6b, 0xb5, 0xd5, 0x29, 0xb3, 0x93, 0xcf, 0xd8, 0x5c, 0x3b, 0xfd, 0x6a, 0xe4,
	0xca, 0xda, 0xe9, 0x8f, 0x9f, 0x9f, 0x72, 0xf7, 0x88, 0x69, 0xb7, 0x46, 0x84, 0xd5, 0xeb, 0xb2,
	0xd8, 0xb7, 0xd3, 0x62, 0x5b, 0x09, 0x14, 0xf9, 0xa2, 0x41, 0x79, 0xa0, 0x06, 0x64, 0x6d, 0xe2,
	0xb4, 0x73, 0x3a, 0x56, 0x5b, 0xbf, 0x46, 0x45, 0x8a, 0x71, 0x73, 0x08, 0xe3, 0x32, 0x79, 0x30,
	0x19, 0xa3, 0xfd, 0x46, 0xae, 0xfc, 0x09, 0x79, 0xaf, 0x41, 0x31, 0xd1, 0x0d, 0x62, 0x4d, 0x1c,
	0x3b, 0x22, 0x30, 0xb5, 0xff, 0x2f, 0xc8, 0xd9, 0x1e, 0xa3, 0x7e, 0x06, 0x69, 0x63, 0x08, 0xd2,
	0x7d, 0x73, 0x0a, 0xda, 0x1e, 0x6b, 0x4b, 0xe4, 0xa3, 0x06, 0xc5, 0x44, 0x0b, 0xa6, 0x80, 0x33,
	0x22, 0x1a, 0x93, 0xe0, 0x3c, 0x1a, 0x82, 0xb3, 0xb4, 0xd4, 0x98, 0x86, 0xa1, 0x98, 0xfa, 0x27,
	0x5b, 0x4f, 0xe0, 0xae, 0xc7, 0x7a, 0x67, 0xbd, 0xdd, 0x90, 0x5e, 0x82, 0x67, 0xab, 0x22, 0x01,
	0xed, 0xca, 0x97, 0x74, 0x57, 0xdb, 0x2f, 0xa5, 0xd1, 0x76, 0x51, 0xbd, 0xad, 0x1b, 0xbf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xfb, 0x78, 0x4c, 0x25, 0xf3, 0x07, 0x00, 0x00,
}
