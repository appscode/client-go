// Code generated by protoc-gen-go.
// source: clusters.proto
// DO NOT EDIT!

package kubernetes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ClusterSettings struct {
	LogIndexPrefix string `protobuf:"bytes,1,opt,name=log_index_prefix,json=logIndexPrefix" json:"log_index_prefix,omitempty"`
	// Number of secs logs will be stored in ElasticSearch
	LogStorageLifetime int64 `protobuf:"varint,2,opt,name=log_storage_lifetime,json=logStorageLifetime" json:"log_storage_lifetime,omitempty"`
	// Number of secs logs will be stored in InfluxDB
	MonitoringStorageLifetime int64 `protobuf:"varint,3,opt,name=monitoring_storage_lifetime,json=monitoringStorageLifetime" json:"monitoring_storage_lifetime,omitempty"`
}

func (m *ClusterSettings) Reset()                    { *m = ClusterSettings{} }
func (m *ClusterSettings) String() string            { return proto.CompactTextString(m) }
func (*ClusterSettings) ProtoMessage()               {}
func (*ClusterSettings) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Cluster struct {
	Phid               string            `protobuf:"bytes,1,opt,name=phid" json:"phid,omitempty"`
	Name               string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Provider           string            `protobuf:"bytes,3,opt,name=provider" json:"provider,omitempty"`
	Os                 string            `protobuf:"bytes,4,opt,name=os" json:"os,omitempty"`
	Region             string            `protobuf:"bytes,5,opt,name=region" json:"region,omitempty"`
	Zone               string            `protobuf:"bytes,6,opt,name=zone" json:"zone,omitempty"`
	CreatedAt          string            `protobuf:"bytes,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Links              map[string]string `protobuf:"bytes,8,rep,name=links" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DoNotDelete        bool              `protobuf:"varint,9,opt,name=do_not_delete,json=doNotDelete" json:"do_not_delete,omitempty"`
	Status             string            `protobuf:"bytes,10,opt,name=status" json:"status,omitempty"`
	StatusCause        string            `protobuf:"bytes,11,opt,name=status_cause,json=statusCause" json:"status_cause,omitempty"`
	GceProject         string            `protobuf:"bytes,12,opt,name=gce_project,json=gceProject" json:"gce_project,omitempty"`
	KubeServerVersion  string            `protobuf:"bytes,13,opt,name=kube_server_version,json=kubeServerVersion" json:"kube_server_version,omitempty"`
	SaltbaseVersion    string            `protobuf:"bytes,14,opt,name=saltbase_version,json=saltbaseVersion" json:"saltbase_version,omitempty"`
	KubeStarterVersion string            `protobuf:"bytes,15,opt,name=kube_starter_version,json=kubeStarterVersion" json:"kube_starter_version,omitempty"`
	NodeCount          int32             `protobuf:"varint,16,opt,name=node_count,json=nodeCount" json:"node_count,omitempty"`
	ApiServerUrl       string            `protobuf:"bytes,17,opt,name=api_server_url,json=apiServerUrl" json:"api_server_url,omitempty"`
	KubeUser           string            `protobuf:"bytes,18,opt,name=kube_user,json=kubeUser" json:"kube_user,omitempty"`
	KubePassword       string            `protobuf:"bytes,19,opt,name=kube_password,json=kubePassword" json:"kube_password,omitempty"`
	CaCert             string            `protobuf:"bytes,20,opt,name=ca_cert,json=caCert" json:"ca_cert,omitempty"`
	KubeBearerToken    string            `protobuf:"bytes,21,opt,name=kube_bearer_token,json=kubeBearerToken" json:"kube_bearer_token,omitempty"`
	Settings           *ClusterSettings  `protobuf:"bytes,22,opt,name=settings" json:"settings,omitempty"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (m *Cluster) String() string            { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Cluster) GetLinks() map[string]string {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Cluster) GetSettings() *ClusterSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

type ClusterDescribeRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *ClusterDescribeRequest) Reset()                    { *m = ClusterDescribeRequest{} }
func (m *ClusterDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterDescribeRequest) ProtoMessage()               {}
func (*ClusterDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type ClusterDescribeResponse struct {
	Status  *dtypes.Status                `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Cluster *Cluster                      `protobuf:"bytes,2,opt,name=cluster" json:"cluster,omitempty"`
	Spec    *ClusterDescribeResponse_Spec `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
}

func (m *ClusterDescribeResponse) Reset()                    { *m = ClusterDescribeResponse{} }
func (m *ClusterDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterDescribeResponse) ProtoMessage()               {}
func (*ClusterDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ClusterDescribeResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ClusterDescribeResponse) GetCluster() *Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *ClusterDescribeResponse) GetSpec() *ClusterDescribeResponse_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type ClusterDescribeResponse_Spec struct {
	ContainerCount int32 `protobuf:"varint,1,opt,name=container_count,json=containerCount" json:"container_count,omitempty"`
	PodCount       int32 `protobuf:"varint,2,opt,name=pod_count,json=podCount" json:"pod_count,omitempty"`
	ServiceCount   int32 `protobuf:"varint,3,opt,name=service_count,json=serviceCount" json:"service_count,omitempty"`
	RcCount        int32 `protobuf:"varint,4,opt,name=rc_count,json=rcCount" json:"rc_count,omitempty"`
	TotalCpu       int64 `protobuf:"varint,5,opt,name=total_cpu,json=totalCpu" json:"total_cpu,omitempty"`
	TotalMemory    int64 `protobuf:"varint,6,opt,name=total_memory,json=totalMemory" json:"total_memory,omitempty"`
}

func (m *ClusterDescribeResponse_Spec) Reset()                    { *m = ClusterDescribeResponse_Spec{} }
func (m *ClusterDescribeResponse_Spec) String() string            { return proto.CompactTextString(m) }
func (*ClusterDescribeResponse_Spec) ProtoMessage()               {}
func (*ClusterDescribeResponse_Spec) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3, 0} }

type ClusterListRequest struct {
	Status []string `protobuf:"bytes,1,rep,name=status" json:"status,omitempty"`
}

func (m *ClusterListRequest) Reset()                    { *m = ClusterListRequest{} }
func (m *ClusterListRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterListRequest) ProtoMessage()               {}
func (*ClusterListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type ClusterListResponse struct {
	Status   *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Clusters []*Cluster     `protobuf:"bytes,2,rep,name=clusters" json:"clusters,omitempty"`
}

func (m *ClusterListResponse) Reset()                    { *m = ClusterListResponse{} }
func (m *ClusterListResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterListResponse) ProtoMessage()               {}
func (*ClusterListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ClusterListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ClusterListResponse) GetClusters() []*Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type ClusterCreateRequest struct {
	Name                string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Provider            string            `protobuf:"bytes,2,opt,name=provider" json:"provider,omitempty"`
	Zone                string            `protobuf:"bytes,3,opt,name=zone" json:"zone,omitempty"`
	CloudCredential     string            `protobuf:"bytes,4,opt,name=cloud_credential,json=cloudCredential" json:"cloud_credential,omitempty"`
	CloudCredentialData map[string]string `protobuf:"bytes,5,rep,name=cloud_credential_data,json=cloudCredentialData" json:"cloud_credential_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NodeSet             map[string]int64  `protobuf:"bytes,6,rep,name=node_set,json=nodeSet" json:"node_set,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	SaltbaseVersion     string            `protobuf:"bytes,7,opt,name=saltbase_version,json=saltbaseVersion" json:"saltbase_version,omitempty"`
	KubeStarterVersion  string            `protobuf:"bytes,8,opt,name=kube_starter_version,json=kubeStarterVersion" json:"kube_starter_version,omitempty"`
	KubeVersion         string            `protobuf:"bytes,9,opt,name=kube_version,json=kubeVersion" json:"kube_version,omitempty"`
	DoNotDelete         bool              `protobuf:"varint,10,opt,name=do_not_delete,json=doNotDelete" json:"do_not_delete,omitempty"`
}

func (m *ClusterCreateRequest) Reset()                    { *m = ClusterCreateRequest{} }
func (m *ClusterCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterCreateRequest) ProtoMessage()               {}
func (*ClusterCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ClusterCreateRequest) GetCloudCredentialData() map[string]string {
	if m != nil {
		return m.CloudCredentialData
	}
	return nil
}

func (m *ClusterCreateRequest) GetNodeSet() map[string]int64 {
	if m != nil {
		return m.NodeSet
	}
	return nil
}

type ClusterScaleRequest struct {
	Name        string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NodeChanges map[string]int64 `protobuf:"bytes,2,rep,name=node_changes,json=nodeChanges" json:"node_changes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *ClusterScaleRequest) Reset()                    { *m = ClusterScaleRequest{} }
func (m *ClusterScaleRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterScaleRequest) ProtoMessage()               {}
func (*ClusterScaleRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *ClusterScaleRequest) GetNodeChanges() map[string]int64 {
	if m != nil {
		return m.NodeChanges
	}
	return nil
}

type ClusterDeleteRequest struct {
	Name              string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ReleaseReservedIp bool   `protobuf:"varint,2,opt,name=release_reserved_ip,json=releaseReservedIp" json:"release_reserved_ip,omitempty"`
	Force             bool   `protobuf:"varint,3,opt,name=force" json:"force,omitempty"`
}

func (m *ClusterDeleteRequest) Reset()                    { *m = ClusterDeleteRequest{} }
func (m *ClusterDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterDeleteRequest) ProtoMessage()               {}
func (*ClusterDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

type ClusterStartupScriptRequest struct {
	Role string `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
}

func (m *ClusterStartupScriptRequest) Reset()                    { *m = ClusterStartupScriptRequest{} }
func (m *ClusterStartupScriptRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterStartupScriptRequest) ProtoMessage()               {}
func (*ClusterStartupScriptRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

type ClusterStartupScriptResponse struct {
	Status        *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Configuration string         `protobuf:"bytes,2,opt,name=configuration" json:"configuration,omitempty"`
}

func (m *ClusterStartupScriptResponse) Reset()                    { *m = ClusterStartupScriptResponse{} }
func (m *ClusterStartupScriptResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterStartupScriptResponse) ProtoMessage()               {}
func (*ClusterStartupScriptResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *ClusterStartupScriptResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type ClusterClientConfigRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ClusterClientConfigRequest) Reset()                    { *m = ClusterClientConfigRequest{} }
func (m *ClusterClientConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterClientConfigRequest) ProtoMessage()               {}
func (*ClusterClientConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

type ClusterClientConfigResponse struct {
	Status        *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Configuration string         `protobuf:"bytes,2,opt,name=configuration" json:"configuration,omitempty"`
}

func (m *ClusterClientConfigResponse) Reset()                    { *m = ClusterClientConfigResponse{} }
func (m *ClusterClientConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterClientConfigResponse) ProtoMessage()               {}
func (*ClusterClientConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *ClusterClientConfigResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type ClusterClientContainerRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DiskName string `protobuf:"bytes,2,opt,name=disk_name,json=diskName" json:"disk_name,omitempty"`
}

func (m *ClusterClientContainerRequest) Reset()                    { *m = ClusterClientContainerRequest{} }
func (m *ClusterClientContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterClientContainerRequest) ProtoMessage()               {}
func (*ClusterClientContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

type ClusterInstanceListRequest struct {
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
}

func (m *ClusterInstanceListRequest) Reset()                    { *m = ClusterInstanceListRequest{} }
func (m *ClusterInstanceListRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterInstanceListRequest) ProtoMessage()               {}
func (*ClusterInstanceListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

type ClusterInstance struct {
	Phid       string `protobuf:"bytes,1,opt,name=phid" json:"phid,omitempty"`
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	ExternalIp string `protobuf:"bytes,4,opt,name=external_ip,json=externalIp" json:"external_ip,omitempty"`
	InternalIp string `protobuf:"bytes,5,opt,name=internal_ip,json=internalIp" json:"internal_ip,omitempty"`
	Sku        string `protobuf:"bytes,6,opt,name=sku" json:"sku,omitempty"`
}

func (m *ClusterInstance) Reset()                    { *m = ClusterInstance{} }
func (m *ClusterInstance) String() string            { return proto.CompactTextString(m) }
func (*ClusterInstance) ProtoMessage()               {}
func (*ClusterInstance) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

type ClusterInstanceListResponse struct {
	Status    *dtypes.Status     `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Instances []*ClusterInstance `protobuf:"bytes,2,rep,name=instances" json:"instances,omitempty"`
}

func (m *ClusterInstanceListResponse) Reset()                    { *m = ClusterInstanceListResponse{} }
func (m *ClusterInstanceListResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterInstanceListResponse) ProtoMessage()               {}
func (*ClusterInstanceListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *ClusterInstanceListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ClusterInstanceListResponse) GetInstances() []*ClusterInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

type ClusterUpdateRequest struct {
	Name        string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DoNotDelete bool             `protobuf:"varint,2,opt,name=do_not_delete,json=doNotDelete" json:"do_not_delete,omitempty"`
	Settings    *ClusterSettings `protobuf:"bytes,3,opt,name=settings" json:"settings,omitempty"`
}

func (m *ClusterUpdateRequest) Reset()                    { *m = ClusterUpdateRequest{} }
func (m *ClusterUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterUpdateRequest) ProtoMessage()               {}
func (*ClusterUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *ClusterUpdateRequest) GetSettings() *ClusterSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

type ClusterUpgradeRequest struct {
	Name               string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SaltbaseVersion    string `protobuf:"bytes,2,opt,name=saltbase_version,json=saltbaseVersion" json:"saltbase_version,omitempty"`
	KubeStarterVersion string `protobuf:"bytes,3,opt,name=kube_starter_version,json=kubeStarterVersion" json:"kube_starter_version,omitempty"`
	KubeVersion        string `protobuf:"bytes,4,opt,name=kube_version,json=kubeVersion" json:"kube_version,omitempty"`
}

func (m *ClusterUpgradeRequest) Reset()                    { *m = ClusterUpgradeRequest{} }
func (m *ClusterUpgradeRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterUpgradeRequest) ProtoMessage()               {}
func (*ClusterUpgradeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func init() {
	proto.RegisterType((*ClusterSettings)(nil), "kubernetes.ClusterSettings")
	proto.RegisterType((*Cluster)(nil), "kubernetes.Cluster")
	proto.RegisterType((*ClusterDescribeRequest)(nil), "kubernetes.ClusterDescribeRequest")
	proto.RegisterType((*ClusterDescribeResponse)(nil), "kubernetes.ClusterDescribeResponse")
	proto.RegisterType((*ClusterDescribeResponse_Spec)(nil), "kubernetes.ClusterDescribeResponse.Spec")
	proto.RegisterType((*ClusterListRequest)(nil), "kubernetes.ClusterListRequest")
	proto.RegisterType((*ClusterListResponse)(nil), "kubernetes.ClusterListResponse")
	proto.RegisterType((*ClusterCreateRequest)(nil), "kubernetes.ClusterCreateRequest")
	proto.RegisterType((*ClusterScaleRequest)(nil), "kubernetes.ClusterScaleRequest")
	proto.RegisterType((*ClusterDeleteRequest)(nil), "kubernetes.ClusterDeleteRequest")
	proto.RegisterType((*ClusterStartupScriptRequest)(nil), "kubernetes.ClusterStartupScriptRequest")
	proto.RegisterType((*ClusterStartupScriptResponse)(nil), "kubernetes.ClusterStartupScriptResponse")
	proto.RegisterType((*ClusterClientConfigRequest)(nil), "kubernetes.ClusterClientConfigRequest")
	proto.RegisterType((*ClusterClientConfigResponse)(nil), "kubernetes.ClusterClientConfigResponse")
	proto.RegisterType((*ClusterClientContainerRequest)(nil), "kubernetes.ClusterClientContainerRequest")
	proto.RegisterType((*ClusterInstanceListRequest)(nil), "kubernetes.ClusterInstanceListRequest")
	proto.RegisterType((*ClusterInstance)(nil), "kubernetes.ClusterInstance")
	proto.RegisterType((*ClusterInstanceListResponse)(nil), "kubernetes.ClusterInstanceListResponse")
	proto.RegisterType((*ClusterUpdateRequest)(nil), "kubernetes.ClusterUpdateRequest")
	proto.RegisterType((*ClusterUpgradeRequest)(nil), "kubernetes.ClusterUpgradeRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Clusters service

type ClustersClient interface {
	List(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error)
	Describe(ctx context.Context, in *ClusterDescribeRequest, opts ...grpc.CallOption) (*ClusterDescribeResponse, error)
	Create(ctx context.Context, in *ClusterCreateRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error)
	Update(ctx context.Context, in *ClusterUpdateRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Scale(ctx context.Context, in *ClusterScaleRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error)
	Upgrade(ctx context.Context, in *ClusterUpgradeRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error)
	Delete(ctx context.Context, in *ClusterDeleteRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error)
	ClientConfig(ctx context.Context, in *ClusterClientConfigRequest, opts ...grpc.CallOption) (*ClusterClientConfigResponse, error)
	Instances(ctx context.Context, in *ClusterInstanceListRequest, opts ...grpc.CallOption) (*ClusterInstanceListResponse, error)
	StartupScript(ctx context.Context, in *ClusterStartupScriptRequest, opts ...grpc.CallOption) (*ClusterStartupScriptResponse, error)
}

type clustersClient struct {
	cc *grpc.ClientConn
}

func NewClustersClient(cc *grpc.ClientConn) ClustersClient {
	return &clustersClient{cc}
}

func (c *clustersClient) List(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error) {
	out := new(ClusterListResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clusters/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Describe(ctx context.Context, in *ClusterDescribeRequest, opts ...grpc.CallOption) (*ClusterDescribeResponse, error) {
	out := new(ClusterDescribeResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clusters/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Create(ctx context.Context, in *ClusterCreateRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error) {
	out := new(dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clusters/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Update(ctx context.Context, in *ClusterUpdateRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clusters/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Scale(ctx context.Context, in *ClusterScaleRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error) {
	out := new(dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clusters/Scale", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Upgrade(ctx context.Context, in *ClusterUpgradeRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error) {
	out := new(dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clusters/Upgrade", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Delete(ctx context.Context, in *ClusterDeleteRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error) {
	out := new(dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clusters/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) ClientConfig(ctx context.Context, in *ClusterClientConfigRequest, opts ...grpc.CallOption) (*ClusterClientConfigResponse, error) {
	out := new(ClusterClientConfigResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clusters/ClientConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Instances(ctx context.Context, in *ClusterInstanceListRequest, opts ...grpc.CallOption) (*ClusterInstanceListResponse, error) {
	out := new(ClusterInstanceListResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clusters/Instances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) StartupScript(ctx context.Context, in *ClusterStartupScriptRequest, opts ...grpc.CallOption) (*ClusterStartupScriptResponse, error) {
	out := new(ClusterStartupScriptResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clusters/StartupScript", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Clusters service

type ClustersServer interface {
	List(context.Context, *ClusterListRequest) (*ClusterListResponse, error)
	Describe(context.Context, *ClusterDescribeRequest) (*ClusterDescribeResponse, error)
	Create(context.Context, *ClusterCreateRequest) (*dtypes.LongRunningResponse, error)
	Update(context.Context, *ClusterUpdateRequest) (*dtypes.VoidResponse, error)
	Scale(context.Context, *ClusterScaleRequest) (*dtypes.LongRunningResponse, error)
	Upgrade(context.Context, *ClusterUpgradeRequest) (*dtypes.LongRunningResponse, error)
	Delete(context.Context, *ClusterDeleteRequest) (*dtypes.LongRunningResponse, error)
	ClientConfig(context.Context, *ClusterClientConfigRequest) (*ClusterClientConfigResponse, error)
	Instances(context.Context, *ClusterInstanceListRequest) (*ClusterInstanceListResponse, error)
	StartupScript(context.Context, *ClusterStartupScriptRequest) (*ClusterStartupScriptResponse, error)
}

func RegisterClustersServer(s *grpc.Server, srv ClustersServer) {
	s.RegisterService(&_Clusters_serviceDesc, srv)
}

func _Clusters_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clusters/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).List(ctx, req.(*ClusterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clusters/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Describe(ctx, req.(*ClusterDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clusters/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Create(ctx, req.(*ClusterCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clusters/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Update(ctx, req.(*ClusterUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Scale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Scale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clusters/Scale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Scale(ctx, req.(*ClusterScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Upgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Upgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clusters/Upgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Upgrade(ctx, req.(*ClusterUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clusters/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Delete(ctx, req.(*ClusterDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_ClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterClientConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).ClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clusters/ClientConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).ClientConfig(ctx, req.(*ClusterClientConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Instances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterInstanceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Instances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clusters/Instances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Instances(ctx, req.(*ClusterInstanceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_StartupScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterStartupScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).StartupScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clusters/StartupScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).StartupScript(ctx, req.(*ClusterStartupScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Clusters_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kubernetes.Clusters",
	HandlerType: (*ClustersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Clusters_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Clusters_Describe_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Clusters_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Clusters_Update_Handler,
		},
		{
			MethodName: "Scale",
			Handler:    _Clusters_Scale_Handler,
		},
		{
			MethodName: "Upgrade",
			Handler:    _Clusters_Upgrade_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Clusters_Delete_Handler,
		},
		{
			MethodName: "ClientConfig",
			Handler:    _Clusters_ClientConfig_Handler,
		},
		{
			MethodName: "Instances",
			Handler:    _Clusters_Instances_Handler,
		},
		{
			MethodName: "StartupScript",
			Handler:    _Clusters_StartupScript_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("clusters.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1702 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x58, 0xef, 0x6e, 0xdb, 0x46,
	0x12, 0x07, 0x25, 0xd9, 0x96, 0x46, 0xfe, 0x97, 0xb5, 0xe3, 0x30, 0x72, 0x72, 0x71, 0x98, 0x20,
	0xf1, 0xf9, 0x62, 0xc9, 0x71, 0x12, 0x9c, 0xe3, 0xbb, 0x4b, 0x2e, 0xa7, 0xdc, 0x5d, 0x0d, 0xb8,
	0x81, 0x41, 0x35, 0xf9, 0x4a, 0xd0, 0xe4, 0x5a, 0x61, 0x4d, 0x93, 0x2c, 0x97, 0x74, 0xe2, 0x04,
	0x2e, 0x8a, 0x02, 0x45, 0x51, 0xf4, 0x63, 0x81, 0x3e, 0x41, 0x8b, 0x02, 0x2d, 0xda, 0x47, 0xe8,
	0x13, 0xf4, 0x5b, 0x5f, 0xa1, 0xe8, 0x5b, 0x14, 0xe8, 0xec, 0x2e, 0x49, 0x51, 0x16, 0x2d, 0x5b,
	0x05, 0xfa, 0x21, 0x01, 0xf7, 0x37, 0xb3, 0x33, 0xbf, 0xdd, 0x99, 0x9d, 0x19, 0x19, 0xa6, 0x2d,
	0x37, 0x66, 0x11, 0x0d, 0x59, 0x33, 0x08, 0xfd, 0xc8, 0x27, 0xb0, 0x1f, 0xef, 0xd2, 0xd0, 0xa3,
	0x11, 0x65, 0x8d, 0x2b, 0x5d, 0xdf, 0xef, 0xba, 0xb4, 0x65, 0x06, 0x4e, 0xcb, 0xf4, 0x3c, 0x3f,
	0x32, 0x23, 0xc7, 0xf7, 0x12, 0xcd, 0xc6, 0x02, 0x87, 0xed, 0xe8, 0x28, 0xa0, 0xac, 0x25, 0xfe,
	0x97, 0xb8, 0xf6, 0xbd, 0x02, 0x33, 0x6d, 0x69, 0xb4, 0x43, 0xa3, 0xc8, 0xf1, 0xba, 0x8c, 0x2c,
	0xc3, 0xac, 0xeb, 0x77, 0x0d, 0xc7, 0xb3, 0xe9, 0x6b, 0x23, 0x08, 0xe9, 0x9e, 0xf3, 0x5a, 0x55,
	0x96, 0x94, 0xe5, 0x9a, 0x3e, 0x8d, 0xf8, 0x16, 0x87, 0x77, 0x04, 0x4a, 0xd6, 0x60, 0x9e, 0x6b,
	0xb2, 0xc8, 0x0f, 0xcd, 0x2e, 0x35, 0x5c, 0x67, 0x8f, 0x46, 0xce, 0x01, 0x55, 0x4b, 0xa8, 0x5d,
	0xd6, 0x09, 0xca, 0x3a, 0x52, 0xb4, 0x9d, 0x48, 0xc8, 0x23, 0x58, 0x3c, 0xf0, 0x3d, 0x07, 0x51,
	0x74, 0x35, 0xb8, 0xb1, 0x2c, 0x36, 0x5e, 0xee, 0xa9, 0x9c, 0xd8, 0xaf, 0x7d, 0x3b, 0x0e, 0x13,
	0x09, 0x5f, 0x42, 0xa0, 0x12, 0xbc, 0x74, 0xec, 0x84, 0x9b, 0xf8, 0xe6, 0x98, 0x67, 0x26, 0x0c,
	0x10, 0xe3, 0xdf, 0xa4, 0x01, 0x55, 0x3c, 0xec, 0xa1, 0x63, 0xd3, 0x50, 0x38, 0xa8, 0xe9, 0xd9,
	0x9a, 0x4c, 0x43, 0xc9, 0x67, 0x6a, 0x45, 0xa0, 0xf8, 0x45, 0x16, 0x60, 0x3c, 0xa4, 0x5d, 0xbc,
	0x38, 0x75, 0x4c, 0x60, 0xc9, 0x8a, 0xdb, 0x7d, 0xe3, 0x7b, 0x54, 0x1d, 0x97, 0x76, 0xf9, 0x37,
	0xb9, 0x0a, 0x60, 0x85, 0xd4, 0x8c, 0xa8, 0x6d, 0x98, 0x91, 0x3a, 0x21, 0x24, 0xb5, 0x04, 0x79,
	0x12, 0x91, 0xfb, 0x30, 0xe6, 0x3a, 0xde, 0x3e, 0x53, 0xab, 0x4b, 0xe5, 0xe5, 0xfa, 0xfa, 0x5f,
	0x9a, 0xbd, 0x60, 0x35, 0x93, 0x23, 0x34, 0xb7, 0xb9, 0xc2, 0x7f, 0xbd, 0x28, 0x3c, 0xd2, 0xa5,
	0x32, 0xd1, 0x60, 0xca, 0xf6, 0x0d, 0x0c, 0x9f, 0x61, 0x53, 0x17, 0x75, 0xd5, 0x1a, 0xda, 0xad,
	0xea, 0x75, 0xdb, 0x7f, 0xe6, 0x47, 0x4f, 0x05, 0xc4, 0x49, 0x32, 0x0c, 0x6f, 0xcc, 0x54, 0x90,
	0x24, 0xe5, 0x8a, 0x5c, 0x87, 0x49, 0xf9, 0x65, 0x58, 0x66, 0xcc, 0xa8, 0x5a, 0x17, 0xd2, 0xba,
	0xc4, 0xda, 0x1c, 0x22, 0xd7, 0xa0, 0xde, 0xb5, 0x28, 0x46, 0xd5, 0x7f, 0x9f, 0x5a, 0x91, 0x3a,
	0x29, 0x34, 0x00, 0xa1, 0x1d, 0x89, 0x90, 0x26, 0xcc, 0x71, 0x9e, 0x06, 0xa3, 0xe1, 0x21, 0x0d,
	0x0d, 0xfc, 0xc7, 0xf8, 0x6d, 0x4c, 0x09, 0xc5, 0x0b, 0x5c, 0xd4, 0x11, 0x92, 0x17, 0x52, 0x40,
	0xfe, 0x0a, 0xb3, 0xcc, 0x74, 0xa3, 0x5d, 0x93, 0xd1, 0x4c, 0x79, 0x5a, 0x28, 0xcf, 0xa4, 0x78,
	0xaa, 0x8a, 0xd9, 0x22, 0x4d, 0x47, 0x66, 0x18, 0xe5, 0x6c, 0xcf, 0x08, 0x75, 0x22, 0x6c, 0x4b,
	0x51, 0xba, 0x03, 0x6f, 0xd8, 0xf3, 0x6d, 0x6a, 0x58, 0x7e, 0xec, 0x45, 0xea, 0x2c, 0xea, 0x8d,
	0xe9, 0x35, 0x8e, 0xb4, 0x39, 0x40, 0x6e, 0xc2, 0x34, 0xa6, 0x75, 0x4a, 0x35, 0x0e, 0x5d, 0xf5,
	0x82, 0x30, 0x35, 0x89, 0xa8, 0x64, 0xf9, 0x3c, 0x74, 0xc9, 0x22, 0xd4, 0x84, 0x5b, 0x3c, 0x7e,
	0xa8, 0x12, 0x19, 0x7f, 0x0e, 0x3c, 0xc7, 0x35, 0xb9, 0x01, 0x53, 0x42, 0x18, 0x98, 0x8c, 0xbd,
	0xf2, 0x43, 0x5b, 0x9d, 0x93, 0x16, 0x38, 0xb8, 0x93, 0x60, 0xe4, 0x12, 0x4c, 0x58, 0xa6, 0x61,
	0xd1, 0x30, 0x52, 0xe7, 0xe5, 0x85, 0x5b, 0x66, 0x1b, 0x57, 0x64, 0x05, 0xc4, 0x8d, 0x18, 0xbb,
	0xd4, 0x0c, 0x91, 0x41, 0xe4, 0xef, 0x53, 0x4f, 0xbd, 0x28, 0x4f, 0xcf, 0x05, 0xff, 0x11, 0xf8,
	0x7b, 0x1c, 0x26, 0x7f, 0x87, 0x2a, 0x4b, 0x5e, 0x98, 0xba, 0x80, 0x2a, 0xf5, 0xf5, 0xc5, 0x82,
	0x8c, 0x48, 0x1f, 0xa1, 0x9e, 0x29, 0x37, 0x36, 0x00, 0x7a, 0x69, 0x42, 0x66, 0xa1, 0xbc, 0x4f,
	0x8f, 0x92, 0x9c, 0xe7, 0x9f, 0x64, 0x1e, 0xc6, 0x0e, 0x4d, 0x37, 0x4e, 0x73, 0x5e, 0x2e, 0x36,
	0x4b, 0x1b, 0x8a, 0xb6, 0x02, 0x0b, 0x89, 0xd9, 0xa7, 0x94, 0x59, 0xa1, 0xb3, 0x4b, 0x75, 0xfa,
	0x41, 0x4c, 0x59, 0xc4, 0xad, 0xc4, 0xd9, 0xcb, 0xe1, 0x9f, 0xda, 0x6f, 0x25, 0xb8, 0x34, 0xa0,
	0xcc, 0x02, 0xac, 0x20, 0x94, 0xdc, 0xca, 0xf2, 0x4d, 0x11, 0xc4, 0xa7, 0x9b, 0xb2, 0x92, 0x34,
	0x3b, 0x02, 0xcd, 0xf2, 0x6f, 0x15, 0xef, 0x49, 0x9a, 0x10, 0x5c, 0xea, 0xeb, 0x73, 0x05, 0x27,
	0xd4, 0x53, 0x1d, 0xf2, 0x4f, 0xa8, 0xb0, 0x80, 0x5a, 0xe2, 0x4d, 0xd6, 0xd7, 0x97, 0x0b, 0x74,
	0x4f, 0x32, 0x69, 0x76, 0x50, 0x5f, 0x17, 0xbb, 0x1a, 0x3f, 0x29, 0x50, 0xe1, 0x4b, 0x72, 0x1b,
	0x66, 0x2c, 0xdf, 0x8b, 0x4c, 0xc7, 0xc3, 0x10, 0xc8, 0x4c, 0x51, 0x44, 0xa6, 0x4c, 0x67, 0xb0,
	0x4c, 0x17, 0x4c, 0x84, 0xc0, 0xb7, 0x13, 0x95, 0x92, 0x50, 0xa9, 0x22, 0x20, 0x85, 0x98, 0x08,
	0x3c, 0x8f, 0x1c, 0x2b, 0xcd, 0xb6, 0xb2, 0x50, 0x98, 0x4c, 0x40, 0xa9, 0x74, 0x19, 0xaa, 0xa1,
	0x95, 0xc8, 0x2b, 0x42, 0x3e, 0x11, 0x5a, 0x99, 0xf1, 0x08, 0x6b, 0xae, 0x6b, 0x58, 0x41, 0x2c,
	0x6a, 0x47, 0x59, 0xaf, 0x0a, 0xa0, 0x1d, 0xc4, 0xfc, 0x61, 0x4a, 0xe1, 0x01, 0x3d, 0xf0, 0xc3,
	0x23, 0x51, 0x45, 0xca, 0x7a, 0x5d, 0x60, 0xef, 0x0a, 0x48, 0xbb, 0x03, 0x24, 0x39, 0xf4, 0xb6,
	0xc3, 0xa2, 0x34, 0x4e, 0x0b, 0xb9, 0x9b, 0x2f, 0xf7, 0x5e, 0xba, 0xe6, 0xc1, 0x5c, 0x9f, 0xf6,
	0x88, 0x81, 0x6a, 0x41, 0x35, 0xed, 0x24, 0x78, 0x11, 0xe5, 0xd3, 0x22, 0x95, 0x29, 0x69, 0xbf,
	0x56, 0x60, 0x3e, 0x41, 0xdb, 0xa2, 0xc0, 0xa5, 0x04, 0xd3, 0x7a, 0xab, 0x9c, 0x52, 0x6f, 0x4b,
	0x27, 0xea, 0x6d, 0x5a, 0x47, 0xcb, 0xb9, 0x3a, 0x8a, 0x25, 0xc4, 0x72, 0xfd, 0x18, 0x23, 0x13,
	0x52, 0x9b, 0x7a, 0x91, 0x63, 0xba, 0x49, 0x45, 0x9e, 0x11, 0x78, 0x3b, 0x83, 0xc9, 0x01, 0x5c,
	0x3c, 0xa9, 0x6a, 0xd8, 0x66, 0x64, 0xe2, 0x8d, 0xf3, 0x53, 0x3c, 0x2c, 0x38, 0x45, 0x1f, 0x5f,
	0x04, 0xfb, 0x0c, 0x3e, 0xc5, 0xbd, 0xb2, 0xfc, 0xce, 0x59, 0x83, 0x12, 0xf2, 0x0e, 0x54, 0x45,
	0xfd, 0xc1, 0xb7, 0x88, 0x31, 0xe3, 0x1e, 0x56, 0xcf, 0xf4, 0xf0, 0x0c, 0x37, 0xe0, 0x2b, 0x96,
	0x56, 0x27, 0x3c, 0xb9, 0x2a, 0x2c, 0x93, 0x13, 0xa3, 0x95, 0xc9, 0xea, 0xa9, 0x65, 0x12, 0xd3,
	0x4b, 0xec, 0x48, 0x35, 0x6b, 0xb2, 0xee, 0x73, 0x2c, 0x55, 0x19, 0x68, 0x2b, 0x30, 0xd0, 0x56,
	0x1a, 0xff, 0x03, 0xf5, 0xb4, 0xeb, 0x19, 0xa5, 0xec, 0x34, 0x36, 0x61, 0x32, 0x7f, 0x09, 0x67,
	0xed, 0x2d, 0xe7, 0x4b, 0xd6, 0x8f, 0x4a, 0x96, 0xd9, 0x1d, 0xcb, 0x74, 0x87, 0xe6, 0x59, 0x07,
	0x26, 0x65, 0x77, 0x78, 0x69, 0x7a, 0x5d, 0x9a, 0x66, 0xf2, 0x5a, 0x51, 0x55, 0xcd, 0x99, 0x12,
	0x01, 0x6a, 0xcb, 0x2d, 0x32, 0x48, 0x75, 0xaf, 0x87, 0x34, 0x1e, 0xc1, 0xec, 0x49, 0x85, 0x91,
	0x0e, 0x10, 0x64, 0x0f, 0x45, 0xde, 0xea, 0xb0, 0x03, 0x60, 0xaf, 0x0d, 0x51, 0x89, 0xe7, 0x44,
	0x48, 0x45, 0x17, 0xb3, 0x0d, 0x27, 0x10, 0x36, 0xab, 0xfa, 0x85, 0x44, 0xa4, 0x27, 0x92, 0xad,
	0x80, 0x7b, 0xdd, 0xf3, 0x43, 0x4b, 0xbe, 0x9e, 0xaa, 0x2e, 0x17, 0xda, 0x5d, 0x58, 0x4c, 0x8f,
	0xc9, 0xd3, 0x22, 0x0e, 0x3a, 0x58, 0x33, 0x83, 0x28, 0xe7, 0x38, 0xf4, 0xdd, 0xcc, 0x31, 0xff,
	0xd6, 0x5c, 0xb8, 0x52, 0xbc, 0x65, 0xc4, 0x3a, 0x72, 0x13, 0xa6, 0xb0, 0xc6, 0xee, 0x39, 0xdd,
	0x38, 0x14, 0xd3, 0x66, 0x92, 0x0b, 0xfd, 0xa0, 0xb6, 0x06, 0x8d, 0xf4, 0xa5, 0xb8, 0x0e, 0x26,
	0x56, 0x5b, 0x48, 0x87, 0x5c, 0x8c, 0xb6, 0x9f, 0x1d, 0xa9, 0x7f, 0xc7, 0x9f, 0x42, 0x6f, 0x07,
	0xae, 0x9e, 0x74, 0x26, 0xbb, 0xc6, 0xb0, 0xd0, 0x61, 0xb9, 0xb7, 0x1d, 0xb6, 0x6f, 0xe4, 0x86,
	0xcd, 0x2a, 0x07, 0x9e, 0x71, 0xfa, 0x8f, 0xb3, 0x03, 0x6f, 0x79, 0x48, 0xc5, 0xb3, 0x68, 0xbe,
	0xa6, 0xe3, 0x6b, 0x4d, 0xea, 0xaa, 0x91, 0x33, 0x5b, 0x4f, 0x30, 0x61, 0xe0, 0x87, 0xde, 0x54,
	0x9e, 0x5a, 0x28, 0x9c, 0x76, 0x71, 0x9a, 0xa3, 0xaf, 0x51, 0xc9, 0xc3, 0x32, 0x88, 0x22, 0xc9,
	0x03, 0x52, 0x68, 0xab, 0x37, 0x0e, 0x97, 0x73, 0xd4, 0xfb, 0x36, 0x05, 0x49, 0xa5, 0xed, 0x6d,
	0x0a, 0xb8, 0x82, 0xe3, 0xf5, 0x14, 0xe4, 0x20, 0x0c, 0x29, 0x84, 0x0a, 0xf8, 0x1e, 0xd8, 0x7e,
	0x9c, 0xcc, 0xc2, 0xfc, 0x53, 0xfb, 0x48, 0xc9, 0x22, 0xd6, 0x7f, 0xe4, 0x11, 0x23, 0xf6, 0x10,
	0x6a, 0x4e, 0xb2, 0x3f, 0x7d, 0xcf, 0x45, 0x53, 0x52, 0xea, 0x43, 0xef, 0x69, 0x6b, 0x9f, 0x2a,
	0xd9, 0xcb, 0x7b, 0x1e, 0xd8, 0x67, 0xb4, 0xa8, 0x81, 0x72, 0x58, 0x1a, 0x9c, 0xb2, 0xf3, 0x03,
	0x5b, 0x79, 0x84, 0x81, 0x4d, 0xfb, 0x4e, 0x81, 0x8b, 0x19, 0x93, 0x6e, 0x68, 0xda, 0x43, 0xa9,
	0x14, 0x75, 0x86, 0xd2, 0x68, 0x9d, 0xa1, 0x7c, 0xee, 0xce, 0x50, 0x19, 0xe8, 0x0c, 0xeb, 0x5f,
	0xd6, 0xa1, 0x9a, 0xb0, 0x65, 0xe4, 0x15, 0x54, 0x78, 0xdc, 0x48, 0xd1, 0x8f, 0x95, 0x5c, 0x0e,
	0x37, 0xae, 0x9d, 0x2a, 0x97, 0x01, 0xd7, 0x9a, 0x1f, 0xff, 0xfc, 0xcb, 0x17, 0xa5, 0x65, 0x72,
	0x0b, 0x7f, 0x8f, 0x06, 0xcc, 0xc2, 0x8a, 0x2a, 0x7e, 0x98, 0xf6, 0x76, 0xb5, 0x0e, 0xd7, 0x9a,
	0x77, 0x5b, 0xe9, 0x80, 0x41, 0x3e, 0x53, 0xa0, 0x9a, 0x4e, 0x7b, 0x44, 0x1b, 0x3a, 0x0a, 0x4a,
	0x06, 0x37, 0xce, 0x31, 0x2e, 0x6a, 0xf7, 0x05, 0x8b, 0x26, 0xb9, 0x73, 0x3e, 0x16, 0xad, 0xb7,
	0x38, 0x09, 0x1f, 0x93, 0x37, 0x30, 0x2e, 0x5b, 0x3a, 0x59, 0x3a, 0xab, 0xdb, 0x37, 0x16, 0xd3,
	0x44, 0xde, 0xf6, 0xbd, 0xae, 0x1e, 0x7b, 0x1e, 0x66, 0x40, 0xe6, 0xfe, 0xae, 0x70, 0xff, 0xb7,
	0xc6, 0x39, 0x2f, 0x61, 0x53, 0x59, 0xe1, 0xbe, 0x65, 0xf6, 0x16, 0xfa, 0xee, 0x4b, 0xec, 0xc6,
	0x7c, 0xea, 0xfb, 0x85, 0xef, 0xd8, 0x99, 0xd3, 0x0d, 0xe1, 0x74, 0x5d, 0x5b, 0x3d, 0xef, 0x99,
	0x79, 0x16, 0x1e, 0x73, 0xdf, 0x9f, 0x28, 0x30, 0x26, 0x3a, 0x25, 0xb9, 0x76, 0x46, 0x0f, 0x1d,
	0x7e, 0xec, 0x47, 0x82, 0xc1, 0x86, 0x76, 0x6f, 0x24, 0x06, 0x2d, 0xc6, 0x1d, 0x70, 0x1e, 0x9f,
	0x2b, 0x30, 0x91, 0x3c, 0x1c, 0x72, 0xbd, 0xf0, 0x16, 0xf2, 0x8f, 0x6a, 0x38, 0x97, 0x7f, 0x0b,
	0x2e, 0x9b, 0xda, 0x83, 0xd1, 0xb8, 0xc4, 0xd2, 0x05, 0x67, 0xf3, 0x21, 0x8c, 0x27, 0x05, 0x61,
	0xa9, 0x30, 0xe5, 0x72, 0x4d, 0x7e, 0x38, 0x95, 0x07, 0x82, 0x4a, 0x6b, 0x65, 0xb4, 0xc0, 0x90,
	0xaf, 0x14, 0x98, 0xcc, 0x77, 0x41, 0x72, 0xab, 0x28, 0x29, 0x07, 0x1b, 0x6b, 0xe3, 0xf6, 0x99,
	0x7a, 0x09, 0xb1, 0xb6, 0x20, 0xf6, 0x2f, 0xf2, 0x8f, 0xd1, 0xee, 0xc8, 0x12, 0xb6, 0x56, 0x65,
	0x33, 0x25, 0x5f, 0x2b, 0x50, 0x4b, 0xcb, 0x32, 0x2b, 0xe4, 0x58, 0xd0, 0x0b, 0x0b, 0x39, 0x16,
	0x35, 0x10, 0xed, 0xff, 0x82, 0xe3, 0x13, 0xf2, 0xf8, 0xbc, 0x1c, 0xf3, 0x2d, 0xf6, 0xb8, 0x95,
	0xb5, 0x09, 0xf2, 0x8d, 0x02, 0x53, 0x7d, 0x43, 0x0f, 0x29, 0xe2, 0x50, 0x34, 0x49, 0x35, 0x96,
	0xcf, 0x56, 0xfc, 0x43, 0x37, 0xba, 0xca, 0xa4, 0x91, 0x55, 0x26, 0xac, 0xb4, 0xde, 0xf2, 0x19,
	0xed, 0x78, 0x77, 0x5c, 0xfc, 0x85, 0xee, 0xde, 0xef, 0x01, 0x00, 0x00, 0xff, 0xff, 0x97, 0x5f,
	0xee, 0xb2, 0xf5, 0x13, 0x00, 0x00,
}
