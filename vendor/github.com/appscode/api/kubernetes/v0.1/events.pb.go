// Code generated by protoc-gen-go.
// source: events.proto
// DO NOT EDIT!

package kubernetes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EventRequest struct {
	ClusterName    string                   `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
	KubeNamespace  string                   `protobuf:"bytes,2,opt,name=kube_namespace,json=kubeNamespace" json:"kube_namespace,omitempty"`
	KubeObjectType string                   `protobuf:"bytes,3,opt,name=kube_object_type,json=kubeObjectType" json:"kube_object_type,omitempty"`
	KubeObjectName string                   `protobuf:"bytes,4,opt,name=kube_object_name,json=kubeObjectName" json:"kube_object_name,omitempty"`
	EventType      string                   `protobuf:"bytes,5,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	Metadata       *EventRequest_ObjectMeta `protobuf:"bytes,7,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *EventRequest) Reset()                    { *m = EventRequest{} }
func (m *EventRequest) String() string            { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()               {}
func (*EventRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *EventRequest) GetMetadata() *EventRequest_ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type EventRequest_ObjectMeta struct {
	Kind                  string            `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	Service               []string          `protobuf:"bytes,2,rep,name=service" json:"service,omitempty"`
	ReplicationController string            `protobuf:"bytes,3,opt,name=replication_controller,json=replicationController" json:"replication_controller,omitempty"`
	Namespace             string            `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
	PodIp                 string            `protobuf:"bytes,5,opt,name=pod_ip,json=podIp" json:"pod_ip,omitempty"`
	InstanceId            string            `protobuf:"bytes,6,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	InstanceIp            string            `protobuf:"bytes,7,opt,name=instance_ip,json=instanceIp" json:"instance_ip,omitempty"`
	Labels                map[string]string `protobuf:"bytes,8,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *EventRequest_ObjectMeta) Reset()                    { *m = EventRequest_ObjectMeta{} }
func (m *EventRequest_ObjectMeta) String() string            { return proto.CompactTextString(m) }
func (*EventRequest_ObjectMeta) ProtoMessage()               {}
func (*EventRequest_ObjectMeta) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

func (m *EventRequest_ObjectMeta) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type EventResponse struct {
	Status *dtypes.Status           `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Tasks  []*EventResponse_Handler `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *EventResponse) Reset()                    { *m = EventResponse{} }
func (m *EventResponse) String() string            { return proto.CompactTextString(m) }
func (*EventResponse) ProtoMessage()               {}
func (*EventResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *EventResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *EventResponse) GetTasks() []*EventResponse_Handler {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type EventResponse_Handler struct {
	Action   string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Receiver string `protobuf:"bytes,2,opt,name=receiver" json:"receiver,omitempty"`
	Base     string `protobuf:"bytes,3,opt,name=base" json:"base,omitempty"`
	Suffix   string `protobuf:"bytes,4,opt,name=suffix" json:"suffix,omitempty"`
	Verb     string `protobuf:"bytes,5,opt,name=verb" json:"verb,omitempty"`
	Data     []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *EventResponse_Handler) Reset()                    { *m = EventResponse_Handler{} }
func (m *EventResponse_Handler) String() string            { return proto.CompactTextString(m) }
func (*EventResponse_Handler) ProtoMessage()               {}
func (*EventResponse_Handler) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1, 0} }

func init() {
	proto.RegisterType((*EventRequest)(nil), "kubernetes.EventRequest")
	proto.RegisterType((*EventRequest_ObjectMeta)(nil), "kubernetes.EventRequest.ObjectMeta")
	proto.RegisterType((*EventResponse)(nil), "kubernetes.EventResponse")
	proto.RegisterType((*EventResponse_Handler)(nil), "kubernetes.EventResponse.Handler")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Events service

type EventsClient interface {
	Constructive(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	Destructive(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
}

type eventsClient struct {
	cc *grpc.ClientConn
}

func NewEventsClient(cc *grpc.ClientConn) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) Constructive(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Events/Constructive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) Destructive(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Events/Destructive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Events service

type EventsServer interface {
	Constructive(context.Context, *EventRequest) (*EventResponse, error)
	Destructive(context.Context, *EventRequest) (*EventResponse, error)
}

func RegisterEventsServer(s *grpc.Server, srv EventsServer) {
	s.RegisterService(&_Events_serviceDesc, srv)
}

func _Events_Constructive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).Constructive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Events/Constructive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).Constructive(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_Destructive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).Destructive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Events/Destructive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).Destructive(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Events_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kubernetes.Events",
	HandlerType: (*EventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Constructive",
			Handler:    _Events_Constructive_Handler,
		},
		{
			MethodName: "Destructive",
			Handler:    _Events_Destructive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor2,
}

func init() { proto.RegisterFile("events.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 629 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x54, 0xdd, 0x6a, 0xd4, 0x40,
	0x14, 0x26, 0xbb, 0xdd, 0x6d, 0xf7, 0x64, 0x5b, 0xca, 0x60, 0x4b, 0x0c, 0x15, 0xdb, 0x8a, 0xb2,
	0x78, 0x91, 0xe8, 0x8a, 0xa8, 0x45, 0x11, 0xad, 0xa5, 0x2d, 0x68, 0x85, 0xe8, 0xfd, 0x32, 0x9b,
	0x9c, 0x96, 0xb8, 0xe9, 0xcc, 0x98, 0x99, 0x04, 0x17, 0xf1, 0x46, 0xbc, 0x13, 0x2f, 0xc4, 0x77,
	0xf0, 0x85, 0x7c, 0x05, 0x2f, 0x7d, 0x03, 0x6f, 0x24, 0x27, 0xb3, 0x3f, 0xfe, 0x14, 0x44, 0x6f,
	0xc2, 0x39, 0xdf, 0xf9, 0xce, 0xff, 0xc9, 0x40, 0x17, 0x4b, 0x14, 0x46, 0x07, 0x2a, 0x97, 0x46,
	0x32, 0x18, 0x15, 0x43, 0xcc, 0x05, 0x1a, 0xd4, 0xfe, 0xc6, 0x89, 0x94, 0x27, 0x19, 0x86, 0x5c,
	0xa5, 0x21, 0x17, 0x42, 0x1a, 0x6e, 0x52, 0x29, 0x2c, 0xd3, 0x5f, 0xaf, 0xe0, 0xc4, 0x8c, 0x15,
	0xea, 0x90, 0xbe, 0x35, 0xbe, 0xfd, 0x7d, 0x01, 0xba, 0x7b, 0x55, 0xc8, 0x08, 0x5f, 0x16, 0xa8,
	0x0d, 0xdb, 0x82, 0x6e, 0x9c, 0x15, 0xda, 0x60, 0x3e, 0x10, 0xfc, 0x14, 0x3d, 0x67, 0xd3, 0xe9,
	0x75, 0x22, 0xd7, 0x62, 0x47, 0xfc, 0x14, 0xd9, 0x65, 0x58, 0xa9, 0xf2, 0x92, 0x5d, 0x2b, 0x1e,
	0xa3, 0xd7, 0x20, 0xd2, 0x72, 0x85, 0x1e, 0x4d, 0x40, 0xd6, 0x83, 0x55, 0xa2, 0xc9, 0xe1, 0x0b,
	0x8c, 0xcd, 0xa0, 0xca, 0xea, 0x35, 0x89, 0x48, 0xee, 0x4f, 0x09, 0x7e, 0x3e, 0x56, 0xbf, 0x31,
	0x29, 0xef, 0xc2, 0xaf, 0x4c, 0x4a, 0x7d, 0x01, 0x80, 0x06, 0x50, 0x47, 0x6b, 0x11, 0xa7, 0x43,
	0x08, 0x05, 0xba, 0x0f, 0x4b, 0xa7, 0x68, 0x78, 0xc2, 0x0d, 0xf7, 0x16, 0x37, 0x9d, 0x9e, 0xdb,
	0xbf, 0x14, 0xcc, 0x46, 0x14, 0xcc, 0x37, 0x1a, 0xd4, 0x51, 0x9f, 0xa0, 0xe1, 0xd1, 0xd4, 0xc9,
	0xff, 0xd6, 0x00, 0x98, 0x19, 0x18, 0x83, 0x85, 0x51, 0x2a, 0x12, 0x3b, 0x04, 0x92, 0x99, 0x07,
	0x8b, 0x1a, 0xf3, 0x32, 0xa5, 0xb6, 0x9b, 0xbd, 0x4e, 0x34, 0x51, 0xd9, 0x4d, 0x58, 0xcf, 0x51,
	0x65, 0x69, 0x4c, 0x93, 0x1f, 0xc4, 0x52, 0x98, 0x5c, 0x66, 0x19, 0xe6, 0xb6, 0xed, 0xb5, 0x39,
	0xeb, 0xee, 0xd4, 0xc8, 0x36, 0xa0, 0x33, 0x9b, 0x64, 0xdd, 0xf6, 0x0c, 0x60, 0x6b, 0xd0, 0x56,
	0x32, 0x19, 0xa4, 0xca, 0x76, 0xdb, 0x52, 0x32, 0x39, 0x54, 0xec, 0x22, 0xb8, 0xa9, 0xd0, 0x86,
	0x8b, 0x18, 0x07, 0x69, 0xe2, 0xb5, 0xc9, 0x06, 0x13, 0xe8, 0x30, 0xf9, 0x99, 0xa0, 0x68, 0x1a,
	0xf3, 0x04, 0xc5, 0xf6, 0xa1, 0x9d, 0xf1, 0x21, 0x66, 0xda, 0x5b, 0xda, 0x6c, 0xf6, 0xdc, 0x7e,
	0xf8, 0x17, 0x93, 0x0a, 0x1e, 0x93, 0xc7, 0x9e, 0x30, 0xf9, 0x38, 0xb2, 0xee, 0xfe, 0x1d, 0x70,
	0xe7, 0x60, 0xb6, 0x0a, 0xcd, 0x11, 0x8e, 0xed, 0xc8, 0x2a, 0x91, 0x9d, 0x83, 0x56, 0xc9, 0xb3,
	0x62, 0x72, 0x26, 0xb5, 0xb2, 0xd3, 0xb8, 0xed, 0x6c, 0xbf, 0x6b, 0xc0, 0xb2, 0x4d, 0xa5, 0x95,
	0x14, 0x1a, 0xd9, 0x15, 0x68, 0x6b, 0xc3, 0x4d, 0xa1, 0x29, 0x80, 0xdb, 0x5f, 0x09, 0xea, 0xa3,
	0x0d, 0x9e, 0x11, 0x1a, 0x59, 0x2b, 0xbb, 0x05, 0x2d, 0xc3, 0xf5, 0x48, 0xd3, 0x0e, 0xdc, 0xfe,
	0xd6, 0x1f, 0x8a, 0xaf, 0x23, 0x06, 0x07, 0x5c, 0x24, 0x19, 0xe6, 0x51, 0xcd, 0xf7, 0x3f, 0x3a,
	0xb0, 0x68, 0x21, 0xb6, 0x0e, 0x6d, 0x1e, 0x57, 0xdb, 0xb0, 0xd5, 0x5a, 0x8d, 0xf9, 0xb0, 0x94,
	0x63, 0x8c, 0x69, 0x89, 0xb9, 0xad, 0x79, 0xaa, 0x57, 0x27, 0x31, 0xe4, 0x7a, 0x72, 0xc9, 0x24,
	0x57, 0x71, 0x74, 0x71, 0x7c, 0x9c, 0xbe, 0xb2, 0xeb, 0xb3, 0x5a, 0xc5, 0x2d, 0x31, 0x1f, 0xda,
	0xcd, 0x91, 0x5c, 0x61, 0x74, 0x9e, 0xd5, 0xc6, 0xba, 0x11, 0xc9, 0xfd, 0xcf, 0x0d, 0x68, 0x53,
	0xd1, 0x9a, 0x7d, 0x70, 0xa0, 0xbb, 0x2b, 0x85, 0x36, 0x79, 0x11, 0x9b, 0xb4, 0x44, 0xe6, 0x9d,
	0xb5, 0x16, 0xff, 0xfc, 0x99, 0x3d, 0x6f, 0x1f, 0xbc, 0xfd, 0xf2, 0xf5, 0x53, 0xe3, 0xa1, 0x7f,
	0x2f, 0xe4, 0x4a, 0xe9, 0x58, 0x26, 0xf5, 0xb3, 0x30, 0xe3, 0x87, 0xe5, 0xb5, 0xe0, 0x7a, 0x58,
	0xbf, 0x25, 0xe1, 0xeb, 0xf9, 0x1f, 0xfe, 0x4d, 0x18, 0x4f, 0xd2, 0xef, 0x38, 0x57, 0xd9, 0x7b,
	0x07, 0xdc, 0x47, 0xf8, 0x9f, 0xe5, 0xec, 0x53, 0x39, 0x0f, 0xfc, 0xbb, 0xff, 0x52, 0x4e, 0x82,
	0xd3, 0x6a, 0x86, 0x6d, 0x7a, 0xb4, 0x6e, 0xfc, 0x08, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x0e, 0x07,
	0xf1, 0x06, 0x05, 0x00, 0x00,
}
