// Code generated by protoc-gen-go.
// source: metadata.proto
// DO NOT EDIT!

package v1beta1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/appscodeapis/appscode/api"
import appscode_dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ListRegionsRequest struct {
	Provider        string `protobuf:"bytes,1,opt,name=provider" json:"provider,omitempty"`
	CloudCredential string `protobuf:"bytes,2,opt,name=cloud_credential,json=cloudCredential" json:"cloud_credential,omitempty"`
}

func (m *ListRegionsRequest) Reset()                    { *m = ListRegionsRequest{} }
func (m *ListRegionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRegionsRequest) ProtoMessage()               {}
func (*ListRegionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type ListRegionsResponse struct {
	Status  *appscode_dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Regions []string                `protobuf:"bytes,2,rep,name=regions" json:"regions,omitempty"`
}

func (m *ListRegionsResponse) Reset()                    { *m = ListRegionsResponse{} }
func (m *ListRegionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListRegionsResponse) ProtoMessage()               {}
func (*ListRegionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *ListRegionsResponse) GetStatus() *appscode_dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type ListZonesRequest struct {
	Provider        string `protobuf:"bytes,1,opt,name=provider" json:"provider,omitempty"`
	Region          string `protobuf:"bytes,2,opt,name=region" json:"region,omitempty"`
	CloudCredential string `protobuf:"bytes,3,opt,name=cloud_credential,json=cloudCredential" json:"cloud_credential,omitempty"`
}

func (m *ListZonesRequest) Reset()                    { *m = ListZonesRequest{} }
func (m *ListZonesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListZonesRequest) ProtoMessage()               {}
func (*ListZonesRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

type ListZonesResponse struct {
	Status *appscode_dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Zones  []string                `protobuf:"bytes,2,rep,name=zones" json:"zones,omitempty"`
}

func (m *ListZonesResponse) Reset()                    { *m = ListZonesResponse{} }
func (m *ListZonesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListZonesResponse) ProtoMessage()               {}
func (*ListZonesResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *ListZonesResponse) GetStatus() *appscode_dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*ListRegionsRequest)(nil), "appscode.kubernetes.v1beta1.ListRegionsRequest")
	proto.RegisterType((*ListRegionsResponse)(nil), "appscode.kubernetes.v1beta1.ListRegionsResponse")
	proto.RegisterType((*ListZonesRequest)(nil), "appscode.kubernetes.v1beta1.ListZonesRequest")
	proto.RegisterType((*ListZonesResponse)(nil), "appscode.kubernetes.v1beta1.ListZonesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Metadata service

type MetadataClient interface {
	ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error)
	ListZones(ctx context.Context, in *ListZonesRequest, opts ...grpc.CallOption) (*ListZonesResponse, error)
}

type metadataClient struct {
	cc *grpc.ClientConn
}

func NewMetadataClient(cc *grpc.ClientConn) MetadataClient {
	return &metadataClient{cc}
}

func (c *metadataClient) ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error) {
	out := new(ListRegionsResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Metadata/ListRegions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) ListZones(ctx context.Context, in *ListZonesRequest, opts ...grpc.CallOption) (*ListZonesResponse, error) {
	out := new(ListZonesResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Metadata/ListZones", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Metadata service

type MetadataServer interface {
	ListRegions(context.Context, *ListRegionsRequest) (*ListRegionsResponse, error)
	ListZones(context.Context, *ListZonesRequest) (*ListZonesResponse, error)
}

func RegisterMetadataServer(s *grpc.Server, srv MetadataServer) {
	s.RegisterService(&_Metadata_serviceDesc, srv)
}

func _Metadata_ListRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).ListRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Metadata/ListRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).ListRegions(ctx, req.(*ListRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_ListZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListZonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).ListZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Metadata/ListZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).ListZones(ctx, req.(*ListZonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Metadata_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appscode.kubernetes.v1beta1.Metadata",
	HandlerType: (*MetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRegions",
			Handler:    _Metadata_ListRegions_Handler,
		},
		{
			MethodName: "ListZones",
			Handler:    _Metadata_ListZones_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor3,
}

func init() { proto.RegisterFile("metadata.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x53, 0x4d, 0xae, 0xd3, 0x30,
	0x10, 0x56, 0x52, 0xd1, 0x1f, 0x57, 0x40, 0x31, 0x08, 0xa2, 0x80, 0xa0, 0x0a, 0x9b, 0xb2, 0xc0,
	0xa6, 0x65, 0x81, 0x58, 0x21, 0x15, 0x81, 0x58, 0x80, 0x54, 0x05, 0x56, 0x65, 0x01, 0x6e, 0x32,
	0xaa, 0x22, 0xda, 0xd8, 0x8d, 0x9d, 0x4a, 0x50, 0x75, 0xd3, 0x0d, 0x07, 0xe0, 0x2c, 0x88, 0x2d,
	0x77, 0xe0, 0x0a, 0x1c, 0x04, 0xc5, 0x76, 0x42, 0xaa, 0xd7, 0xf7, 0x5e, 0xd5, 0x4d, 0x94, 0xf1,
	0xcc, 0x37, 0xfe, 0xe6, 0xfb, 0xc6, 0xe8, 0xda, 0x12, 0x14, 0x8b, 0x99, 0x62, 0x44, 0x64, 0x5c,
	0x71, 0x7c, 0x97, 0x09, 0x21, 0x23, 0x1e, 0x03, 0xf9, 0x92, 0xcf, 0x20, 0x4b, 0x41, 0x81, 0x24,
	0xeb, 0xe1, 0x0c, 0x14, 0x1b, 0xfa, 0xf7, 0xe6, 0x9c, 0xcf, 0x17, 0x40, 0x99, 0x48, 0x28, 0x4b,
	0x53, 0xae, 0x98, 0x4a, 0x78, 0x2a, 0x0d, 0xd4, 0xbf, 0x5f, 0x42, 0xcf, 0xc9, 0x3f, 0xd8, 0xcb,
	0xc7, 0xea, 0xab, 0x00, 0x49, 0xf5, 0xd7, 0x14, 0x04, 0x1f, 0x11, 0x7e, 0x9b, 0x48, 0x15, 0xc2,
	0xbc, 0x40, 0x85, 0xb0, 0xca, 0x41, 0x2a, 0xec, 0xa3, 0xb6, 0xc8, 0xf8, 0x3a, 0x89, 0x21, 0xf3,
	0x9c, 0xbe, 0x33, 0xe8, 0x84, 0x55, 0x8c, 0x1f, 0xa1, 0x5e, 0xb4, 0xe0, 0x79, 0xfc, 0x29, 0xca,
	0x20, 0x86, 0x54, 0x25, 0x6c, 0xe1, 0xb9, 0xba, 0xe6, 0xba, 0x3e, 0x7f, 0x59, 0x1d, 0x07, 0x9f,
	0xd1, 0xcd, 0xbd, 0xe6, 0x52, 0xf0, 0x54, 0x02, 0xa6, 0xa8, 0x29, 0x15, 0x53, 0xb9, 0xd4, 0xbd,
	0xbb, 0xa3, 0x3b, 0xa4, 0x12, 0xc0, 0x30, 0x24, 0xef, 0x75, 0x3a, 0xb4, 0x65, 0xd8, 0x43, 0xad,
	0xcc, 0xf4, 0xf0, 0xdc, 0x7e, 0x63, 0xd0, 0x09, 0xcb, 0x30, 0x58, 0xa1, 0x5e, 0x71, 0xc3, 0x94,
	0xa7, 0x70, 0x14, 0xf9, 0xdb, 0xa8, 0x69, 0xa0, 0x96, 0xb2, 0x8d, 0x0e, 0x0e, 0xd5, 0x38, 0x3c,
	0xd4, 0x14, 0xdd, 0xa8, 0x5d, 0x79, 0xea, 0x48, 0xb7, 0xd0, 0x95, 0x6f, 0x45, 0x07, 0x3b, 0x90,
	0x09, 0x46, 0xdf, 0x1b, 0xa8, 0xfd, 0xce, 0x2e, 0x07, 0xfe, 0xe5, 0xa0, 0x6e, 0x4d, 0x3e, 0x4c,
	0xc9, 0x05, 0x7b, 0x42, 0xce, 0xba, 0xe8, 0x3f, 0x39, 0x1e, 0x60, 0xc6, 0x08, 0x5e, 0xed, 0x7e,
	0x7a, 0x6e, 0xdb, 0xd9, 0xfd, 0xf9, 0xfb, 0xc3, 0x7d, 0x8e, 0x9f, 0xd1, 0xbd, 0xed, 0xd1, 0x42,
	0x50, 0x0b, 0xa7, 0xe5, 0x0e, 0xd3, 0x4d, 0x29, 0xee, 0x96, 0x5a, 0x57, 0xf0, 0x6f, 0x07, 0x75,
	0x2a, 0x8d, 0xf0, 0xe3, 0x4b, 0x69, 0xd4, 0xed, 0xf3, 0xc9, 0xb1, 0xe5, 0x96, 0xf3, 0x87, 0x1a,
	0xe7, 0x37, 0xf8, 0xf5, 0x89, 0x9c, 0xe9, 0xc6, 0xfc, 0x6c, 0xa9, 0x76, 0x62, 0xfc, 0x02, 0x3d,
	0x8c, 0xf8, 0xf2, 0x3f, 0x15, 0x26, 0x92, 0x03, 0x74, 0xc6, 0x57, 0x4b, 0xb7, 0x26, 0xc5, 0x6b,
	0x9a, 0x38, 0xd3, 0x96, 0xcd, 0xcc, 0x9a, 0xfa, 0x7d, 0x3d, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff,
	0x70, 0x28, 0xfd, 0x85, 0xed, 0x03, 0x00, 0x00,
}
