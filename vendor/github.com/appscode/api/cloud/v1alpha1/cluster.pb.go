// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cluster.proto

/*
Package v1alpha1 is a generated protocol buffer package.

It is generated from these files:
	cluster.proto
	metadata.proto

It has these top-level messages:
	CredentialListResponse
	CredentialDescribeRequest
	CredentialDescribeResponse
	CredentialCreateRequest
	CredentialCreateResponse
	CredentialUpdateRequest
	CredentialUpdateResponse
	CredentialDeleteRequest
	CredentialDeleteResponse
	ClusterListRequest
	ClusterListResponse
	ClusterDescribeRequest
	ClusterDescribeResponse
	ClusterCreateRequest
	ClusterCreateResponse
	ClusterUpdateRequest
	ClusterUpdateResponse
	ClusterDeleteRequest
	ClusterDeleteResponse
	ClusterApplyRequest
	ClusterMetadataRequest
	ClusterMetadataResponse
	NodeGroupListRequest
	NodeGroupListResponse
	NodeGroupDescribeRequest
	NodeGroupDescribeResponse
	NodeGroupCreateRequest
	NodeGroupCreateResponse
	NodeGroupUpdateRequest
	NodeGroupUpdateResponse
	NodeGroupDeleteRequest
	NodeGroupDeleteResponse
	SSHConfigGetRequest
	SSHConfigGetResponse
	RegionListRequest
	RegionListResponse
	ZoneListRequest
	ZoneListResponse
	BucketListRequest
	BucketListResponse
*/
package v1alpha1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/appscodeapis/appscode/api"
import appscode_dtypes "github.com/appscode/api/dtypes"
import appscode_version "github.com/appscode/api/version"
import github_com_appscode_pharmer_apis_v1alpha1 "github.com/appscode/pharmer/apis/v1alpha1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CredentialListResponse struct {
	Credentials []*github_com_appscode_pharmer_apis_v1alpha1.Credential `protobuf:"bytes,1,rep,name=credentials" json:"credentials,omitempty"`
}

func (m *CredentialListResponse) Reset()                    { *m = CredentialListResponse{} }
func (m *CredentialListResponse) String() string            { return proto.CompactTextString(m) }
func (*CredentialListResponse) ProtoMessage()               {}
func (*CredentialListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CredentialListResponse) GetCredentials() []*github_com_appscode_pharmer_apis_v1alpha1.Credential {
	if m != nil {
		return m.Credentials
	}
	return nil
}

type CredentialDescribeRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CredentialDescribeRequest) Reset()                    { *m = CredentialDescribeRequest{} }
func (m *CredentialDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*CredentialDescribeRequest) ProtoMessage()               {}
func (*CredentialDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CredentialDescribeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CredentialDescribeResponse struct {
	Credential *github_com_appscode_pharmer_apis_v1alpha1.Credential `protobuf:"bytes,1,opt,name=credential" json:"credential,omitempty"`
}

func (m *CredentialDescribeResponse) Reset()                    { *m = CredentialDescribeResponse{} }
func (m *CredentialDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*CredentialDescribeResponse) ProtoMessage()               {}
func (*CredentialDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CredentialDescribeResponse) GetCredential() *github_com_appscode_pharmer_apis_v1alpha1.Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

type CredentialCreateRequest struct {
	Credential *github_com_appscode_pharmer_apis_v1alpha1.Credential `protobuf:"bytes,1,opt,name=credential" json:"credential,omitempty"`
}

func (m *CredentialCreateRequest) Reset()                    { *m = CredentialCreateRequest{} }
func (m *CredentialCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CredentialCreateRequest) ProtoMessage()               {}
func (*CredentialCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CredentialCreateRequest) GetCredential() *github_com_appscode_pharmer_apis_v1alpha1.Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

type CredentialCreateResponse struct {
	Credential *github_com_appscode_pharmer_apis_v1alpha1.Credential `protobuf:"bytes,1,opt,name=credential" json:"credential,omitempty"`
}

func (m *CredentialCreateResponse) Reset()                    { *m = CredentialCreateResponse{} }
func (m *CredentialCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CredentialCreateResponse) ProtoMessage()               {}
func (*CredentialCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CredentialCreateResponse) GetCredential() *github_com_appscode_pharmer_apis_v1alpha1.Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

type CredentialUpdateRequest struct {
	Credential *github_com_appscode_pharmer_apis_v1alpha1.Credential `protobuf:"bytes,1,opt,name=credential" json:"credential,omitempty"`
}

func (m *CredentialUpdateRequest) Reset()                    { *m = CredentialUpdateRequest{} }
func (m *CredentialUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*CredentialUpdateRequest) ProtoMessage()               {}
func (*CredentialUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CredentialUpdateRequest) GetCredential() *github_com_appscode_pharmer_apis_v1alpha1.Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

type CredentialUpdateResponse struct {
	Credential *github_com_appscode_pharmer_apis_v1alpha1.Credential `protobuf:"bytes,1,opt,name=credential" json:"credential,omitempty"`
}

func (m *CredentialUpdateResponse) Reset()                    { *m = CredentialUpdateResponse{} }
func (m *CredentialUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*CredentialUpdateResponse) ProtoMessage()               {}
func (*CredentialUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CredentialUpdateResponse) GetCredential() *github_com_appscode_pharmer_apis_v1alpha1.Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

type CredentialDeleteRequest struct {
	Name                 string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ReleaseReservedIp    bool   `protobuf:"varint,2,opt,name=release_reserved_ip,json=releaseReservedIp" json:"release_reserved_ip,omitempty"`
	Force                bool   `protobuf:"varint,3,opt,name=force" json:"force,omitempty"`
	KeepLodabalancers    bool   `protobuf:"varint,4,opt,name=keep_lodabalancers,json=keepLodabalancers" json:"keep_lodabalancers,omitempty"`
	DeleteDynamicVolumes bool   `protobuf:"varint,5,opt,name=delete_dynamic_volumes,json=deleteDynamicVolumes" json:"delete_dynamic_volumes,omitempty"`
}

func (m *CredentialDeleteRequest) Reset()                    { *m = CredentialDeleteRequest{} }
func (m *CredentialDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*CredentialDeleteRequest) ProtoMessage()               {}
func (*CredentialDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CredentialDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CredentialDeleteRequest) GetReleaseReservedIp() bool {
	if m != nil {
		return m.ReleaseReservedIp
	}
	return false
}

func (m *CredentialDeleteRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *CredentialDeleteRequest) GetKeepLodabalancers() bool {
	if m != nil {
		return m.KeepLodabalancers
	}
	return false
}

func (m *CredentialDeleteRequest) GetDeleteDynamicVolumes() bool {
	if m != nil {
		return m.DeleteDynamicVolumes
	}
	return false
}

type CredentialDeleteResponse struct {
	Credential *github_com_appscode_pharmer_apis_v1alpha1.Credential `protobuf:"bytes,1,opt,name=credential" json:"credential,omitempty"`
}

func (m *CredentialDeleteResponse) Reset()                    { *m = CredentialDeleteResponse{} }
func (m *CredentialDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*CredentialDeleteResponse) ProtoMessage()               {}
func (*CredentialDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CredentialDeleteResponse) GetCredential() *github_com_appscode_pharmer_apis_v1alpha1.Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

type ClusterListRequest struct {
	Status []string `protobuf:"bytes,1,rep,name=status" json:"status,omitempty"`
}

func (m *ClusterListRequest) Reset()                    { *m = ClusterListRequest{} }
func (m *ClusterListRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterListRequest) ProtoMessage()               {}
func (*ClusterListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ClusterListRequest) GetStatus() []string {
	if m != nil {
		return m.Status
	}
	return nil
}

type ClusterListResponse struct {
	Clusters []*github_com_appscode_pharmer_apis_v1alpha1.Cluster `protobuf:"bytes,1,rep,name=clusters" json:"clusters,omitempty"`
}

func (m *ClusterListResponse) Reset()                    { *m = ClusterListResponse{} }
func (m *ClusterListResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterListResponse) ProtoMessage()               {}
func (*ClusterListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ClusterListResponse) GetClusters() []*github_com_appscode_pharmer_apis_v1alpha1.Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type ClusterDescribeRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ClusterDescribeRequest) Reset()                    { *m = ClusterDescribeRequest{} }
func (m *ClusterDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterDescribeRequest) ProtoMessage()               {}
func (*ClusterDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ClusterDescribeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ClusterDescribeResponse struct {
	Cluster *github_com_appscode_pharmer_apis_v1alpha1.Cluster `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
}

func (m *ClusterDescribeResponse) Reset()                    { *m = ClusterDescribeResponse{} }
func (m *ClusterDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterDescribeResponse) ProtoMessage()               {}
func (*ClusterDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ClusterDescribeResponse) GetCluster() *github_com_appscode_pharmer_apis_v1alpha1.Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

type ClusterCreateRequest struct {
	Cluster *github_com_appscode_pharmer_apis_v1alpha1.Cluster `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
}

func (m *ClusterCreateRequest) Reset()                    { *m = ClusterCreateRequest{} }
func (m *ClusterCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterCreateRequest) ProtoMessage()               {}
func (*ClusterCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ClusterCreateRequest) GetCluster() *github_com_appscode_pharmer_apis_v1alpha1.Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

type ClusterCreateResponse struct {
	Cluster *github_com_appscode_pharmer_apis_v1alpha1.Cluster `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
}

func (m *ClusterCreateResponse) Reset()                    { *m = ClusterCreateResponse{} }
func (m *ClusterCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterCreateResponse) ProtoMessage()               {}
func (*ClusterCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ClusterCreateResponse) GetCluster() *github_com_appscode_pharmer_apis_v1alpha1.Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

type ClusterUpdateRequest struct {
	Cluster *github_com_appscode_pharmer_apis_v1alpha1.Cluster `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
}

func (m *ClusterUpdateRequest) Reset()                    { *m = ClusterUpdateRequest{} }
func (m *ClusterUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterUpdateRequest) ProtoMessage()               {}
func (*ClusterUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ClusterUpdateRequest) GetCluster() *github_com_appscode_pharmer_apis_v1alpha1.Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

type ClusterUpdateResponse struct {
	Cluster *github_com_appscode_pharmer_apis_v1alpha1.Cluster `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
}

func (m *ClusterUpdateResponse) Reset()                    { *m = ClusterUpdateResponse{} }
func (m *ClusterUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterUpdateResponse) ProtoMessage()               {}
func (*ClusterUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ClusterUpdateResponse) GetCluster() *github_com_appscode_pharmer_apis_v1alpha1.Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

type ClusterDeleteRequest struct {
	Name                 string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ReleaseReservedIp    bool   `protobuf:"varint,2,opt,name=release_reserved_ip,json=releaseReservedIp" json:"release_reserved_ip,omitempty"`
	Force                bool   `protobuf:"varint,3,opt,name=force" json:"force,omitempty"`
	KeepLodabalancers    bool   `protobuf:"varint,4,opt,name=keep_lodabalancers,json=keepLodabalancers" json:"keep_lodabalancers,omitempty"`
	DeleteDynamicVolumes bool   `protobuf:"varint,5,opt,name=delete_dynamic_volumes,json=deleteDynamicVolumes" json:"delete_dynamic_volumes,omitempty"`
}

func (m *ClusterDeleteRequest) Reset()                    { *m = ClusterDeleteRequest{} }
func (m *ClusterDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterDeleteRequest) ProtoMessage()               {}
func (*ClusterDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ClusterDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterDeleteRequest) GetReleaseReservedIp() bool {
	if m != nil {
		return m.ReleaseReservedIp
	}
	return false
}

func (m *ClusterDeleteRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *ClusterDeleteRequest) GetKeepLodabalancers() bool {
	if m != nil {
		return m.KeepLodabalancers
	}
	return false
}

func (m *ClusterDeleteRequest) GetDeleteDynamicVolumes() bool {
	if m != nil {
		return m.DeleteDynamicVolumes
	}
	return false
}

type ClusterDeleteResponse struct {
	Cluster *github_com_appscode_pharmer_apis_v1alpha1.Cluster `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
}

func (m *ClusterDeleteResponse) Reset()                    { *m = ClusterDeleteResponse{} }
func (m *ClusterDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterDeleteResponse) ProtoMessage()               {}
func (*ClusterDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ClusterDeleteResponse) GetCluster() *github_com_appscode_pharmer_apis_v1alpha1.Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

type ClusterApplyRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ClusterApplyRequest) Reset()                    { *m = ClusterApplyRequest{} }
func (m *ClusterApplyRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterApplyRequest) ProtoMessage()               {}
func (*ClusterApplyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ClusterApplyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ClusterMetadataRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *ClusterMetadataRequest) Reset()                    { *m = ClusterMetadataRequest{} }
func (m *ClusterMetadataRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterMetadataRequest) ProtoMessage()               {}
func (*ClusterMetadataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ClusterMetadataRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type ClusterMetadataResponse struct {
	KubedConfig     *ClusterMetadataResponse_KubedConfig `protobuf:"bytes,1,opt,name=kubed_config,json=kubedConfig" json:"kubed_config,omitempty"`
	CustomResources []string                             `protobuf:"bytes,2,rep,name=custom_resources,json=customResources" json:"custom_resources,omitempty"`
}

func (m *ClusterMetadataResponse) Reset()                    { *m = ClusterMetadataResponse{} }
func (m *ClusterMetadataResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterMetadataResponse) ProtoMessage()               {}
func (*ClusterMetadataResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ClusterMetadataResponse) GetKubedConfig() *ClusterMetadataResponse_KubedConfig {
	if m != nil {
		return m.KubedConfig
	}
	return nil
}

func (m *ClusterMetadataResponse) GetCustomResources() []string {
	if m != nil {
		return m.CustomResources
	}
	return nil
}

type ClusterMetadataResponse_KubedConfig struct {
	Version             *appscode_version.Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	OperatorNamespace   string                    `protobuf:"bytes,2,opt,name=operator_namespace,json=operatorNamespace" json:"operator_namespace,omitempty"`
	SearchEnabled       bool                      `protobuf:"varint,3,opt,name=search_enabled,json=searchEnabled" json:"search_enabled,omitempty"`
	ReverseIndexEnabled bool                      `protobuf:"varint,4,opt,name=reverse_index_enabled,json=reverseIndexEnabled" json:"reverse_index_enabled,omitempty"`
	AnalyticsEnabled    bool                      `protobuf:"varint,5,opt,name=analytics_enabled,json=analyticsEnabled" json:"analytics_enabled,omitempty"`
}

func (m *ClusterMetadataResponse_KubedConfig) Reset()         { *m = ClusterMetadataResponse_KubedConfig{} }
func (m *ClusterMetadataResponse_KubedConfig) String() string { return proto.CompactTextString(m) }
func (*ClusterMetadataResponse_KubedConfig) ProtoMessage()    {}
func (*ClusterMetadataResponse_KubedConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21, 0}
}

func (m *ClusterMetadataResponse_KubedConfig) GetVersion() *appscode_version.Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *ClusterMetadataResponse_KubedConfig) GetOperatorNamespace() string {
	if m != nil {
		return m.OperatorNamespace
	}
	return ""
}

func (m *ClusterMetadataResponse_KubedConfig) GetSearchEnabled() bool {
	if m != nil {
		return m.SearchEnabled
	}
	return false
}

func (m *ClusterMetadataResponse_KubedConfig) GetReverseIndexEnabled() bool {
	if m != nil {
		return m.ReverseIndexEnabled
	}
	return false
}

func (m *ClusterMetadataResponse_KubedConfig) GetAnalyticsEnabled() bool {
	if m != nil {
		return m.AnalyticsEnabled
	}
	return false
}

type NodeGroupListRequest struct {
	ClusterName string   `protobuf:"bytes,1,opt,name=clusterName" json:"clusterName,omitempty"`
	Status      []string `protobuf:"bytes,2,rep,name=status" json:"status,omitempty"`
}

func (m *NodeGroupListRequest) Reset()                    { *m = NodeGroupListRequest{} }
func (m *NodeGroupListRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeGroupListRequest) ProtoMessage()               {}
func (*NodeGroupListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *NodeGroupListRequest) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *NodeGroupListRequest) GetStatus() []string {
	if m != nil {
		return m.Status
	}
	return nil
}

type NodeGroupListResponse struct {
	NodeGroups []*github_com_appscode_pharmer_apis_v1alpha1.NodeGroup `protobuf:"bytes,1,rep,name=nodeGroups" json:"nodeGroups,omitempty"`
}

func (m *NodeGroupListResponse) Reset()                    { *m = NodeGroupListResponse{} }
func (m *NodeGroupListResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeGroupListResponse) ProtoMessage()               {}
func (*NodeGroupListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *NodeGroupListResponse) GetNodeGroups() []*github_com_appscode_pharmer_apis_v1alpha1.NodeGroup {
	if m != nil {
		return m.NodeGroups
	}
	return nil
}

type NodeGroupDescribeRequest struct {
	ClusterName string `protobuf:"bytes,1,opt,name=clusterName" json:"clusterName,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *NodeGroupDescribeRequest) Reset()                    { *m = NodeGroupDescribeRequest{} }
func (m *NodeGroupDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeGroupDescribeRequest) ProtoMessage()               {}
func (*NodeGroupDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *NodeGroupDescribeRequest) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *NodeGroupDescribeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type NodeGroupDescribeResponse struct {
	NodeGroup *github_com_appscode_pharmer_apis_v1alpha1.NodeGroup `protobuf:"bytes,1,opt,name=nodeGroup" json:"nodeGroup,omitempty"`
}

func (m *NodeGroupDescribeResponse) Reset()                    { *m = NodeGroupDescribeResponse{} }
func (m *NodeGroupDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeGroupDescribeResponse) ProtoMessage()               {}
func (*NodeGroupDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *NodeGroupDescribeResponse) GetNodeGroup() *github_com_appscode_pharmer_apis_v1alpha1.NodeGroup {
	if m != nil {
		return m.NodeGroup
	}
	return nil
}

type NodeGroupCreateRequest struct {
	NodeGroup *github_com_appscode_pharmer_apis_v1alpha1.NodeGroup `protobuf:"bytes,1,opt,name=nodeGroup" json:"nodeGroup,omitempty"`
}

func (m *NodeGroupCreateRequest) Reset()                    { *m = NodeGroupCreateRequest{} }
func (m *NodeGroupCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeGroupCreateRequest) ProtoMessage()               {}
func (*NodeGroupCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *NodeGroupCreateRequest) GetNodeGroup() *github_com_appscode_pharmer_apis_v1alpha1.NodeGroup {
	if m != nil {
		return m.NodeGroup
	}
	return nil
}

type NodeGroupCreateResponse struct {
	NodeGroup *github_com_appscode_pharmer_apis_v1alpha1.NodeGroup `protobuf:"bytes,1,opt,name=nodeGroup" json:"nodeGroup,omitempty"`
}

func (m *NodeGroupCreateResponse) Reset()                    { *m = NodeGroupCreateResponse{} }
func (m *NodeGroupCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeGroupCreateResponse) ProtoMessage()               {}
func (*NodeGroupCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *NodeGroupCreateResponse) GetNodeGroup() *github_com_appscode_pharmer_apis_v1alpha1.NodeGroup {
	if m != nil {
		return m.NodeGroup
	}
	return nil
}

type NodeGroupUpdateRequest struct {
	NodeGroup *github_com_appscode_pharmer_apis_v1alpha1.NodeGroup `protobuf:"bytes,1,opt,name=nodeGroup" json:"nodeGroup,omitempty"`
}

func (m *NodeGroupUpdateRequest) Reset()                    { *m = NodeGroupUpdateRequest{} }
func (m *NodeGroupUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeGroupUpdateRequest) ProtoMessage()               {}
func (*NodeGroupUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *NodeGroupUpdateRequest) GetNodeGroup() *github_com_appscode_pharmer_apis_v1alpha1.NodeGroup {
	if m != nil {
		return m.NodeGroup
	}
	return nil
}

type NodeGroupUpdateResponse struct {
	NodeGroup *github_com_appscode_pharmer_apis_v1alpha1.NodeGroup `protobuf:"bytes,1,opt,name=nodeGroup" json:"nodeGroup,omitempty"`
}

func (m *NodeGroupUpdateResponse) Reset()                    { *m = NodeGroupUpdateResponse{} }
func (m *NodeGroupUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeGroupUpdateResponse) ProtoMessage()               {}
func (*NodeGroupUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *NodeGroupUpdateResponse) GetNodeGroup() *github_com_appscode_pharmer_apis_v1alpha1.NodeGroup {
	if m != nil {
		return m.NodeGroup
	}
	return nil
}

type NodeGroupDeleteRequest struct {
	ClusterName          string `protobuf:"bytes,1,opt,name=clusterName" json:"clusterName,omitempty"`
	Name                 string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ReleaseReservedIP    bool   `protobuf:"varint,3,opt,name=releaseReservedIP" json:"releaseReservedIP,omitempty"`
	Force                bool   `protobuf:"varint,4,opt,name=force" json:"force,omitempty"`
	KeepLodabalancers    bool   `protobuf:"varint,5,opt,name=keepLodabalancers" json:"keepLodabalancers,omitempty"`
	DeleteDynamicVolumes bool   `protobuf:"varint,6,opt,name=deleteDynamicVolumes" json:"deleteDynamicVolumes,omitempty"`
}

func (m *NodeGroupDeleteRequest) Reset()                    { *m = NodeGroupDeleteRequest{} }
func (m *NodeGroupDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeGroupDeleteRequest) ProtoMessage()               {}
func (*NodeGroupDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *NodeGroupDeleteRequest) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *NodeGroupDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeGroupDeleteRequest) GetReleaseReservedIP() bool {
	if m != nil {
		return m.ReleaseReservedIP
	}
	return false
}

func (m *NodeGroupDeleteRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *NodeGroupDeleteRequest) GetKeepLodabalancers() bool {
	if m != nil {
		return m.KeepLodabalancers
	}
	return false
}

func (m *NodeGroupDeleteRequest) GetDeleteDynamicVolumes() bool {
	if m != nil {
		return m.DeleteDynamicVolumes
	}
	return false
}

type NodeGroupDeleteResponse struct {
	NodeGroup *github_com_appscode_pharmer_apis_v1alpha1.NodeGroup `protobuf:"bytes,1,opt,name=nodeGroup" json:"nodeGroup,omitempty"`
}

func (m *NodeGroupDeleteResponse) Reset()                    { *m = NodeGroupDeleteResponse{} }
func (m *NodeGroupDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeGroupDeleteResponse) ProtoMessage()               {}
func (*NodeGroupDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *NodeGroupDeleteResponse) GetNodeGroup() *github_com_appscode_pharmer_apis_v1alpha1.NodeGroup {
	if m != nil {
		return m.NodeGroup
	}
	return nil
}

type SSHConfigGetRequest struct {
	ClusterName string `protobuf:"bytes,1,opt,name=clusterName" json:"clusterName,omitempty"`
	NodeName    string `protobuf:"bytes,2,opt,name=nodeName" json:"nodeName,omitempty"`
}

func (m *SSHConfigGetRequest) Reset()                    { *m = SSHConfigGetRequest{} }
func (m *SSHConfigGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SSHConfigGetRequest) ProtoMessage()               {}
func (*SSHConfigGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *SSHConfigGetRequest) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *SSHConfigGetRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type SSHConfigGetResponse struct {
	Config *github_com_appscode_pharmer_apis_v1alpha1.SSHConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *SSHConfigGetResponse) Reset()                    { *m = SSHConfigGetResponse{} }
func (m *SSHConfigGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SSHConfigGetResponse) ProtoMessage()               {}
func (*SSHConfigGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *SSHConfigGetResponse) GetConfig() *github_com_appscode_pharmer_apis_v1alpha1.SSHConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*CredentialListResponse)(nil), "appscode.cloud.v1alpha1.CredentialListResponse")
	proto.RegisterType((*CredentialDescribeRequest)(nil), "appscode.cloud.v1alpha1.CredentialDescribeRequest")
	proto.RegisterType((*CredentialDescribeResponse)(nil), "appscode.cloud.v1alpha1.CredentialDescribeResponse")
	proto.RegisterType((*CredentialCreateRequest)(nil), "appscode.cloud.v1alpha1.CredentialCreateRequest")
	proto.RegisterType((*CredentialCreateResponse)(nil), "appscode.cloud.v1alpha1.CredentialCreateResponse")
	proto.RegisterType((*CredentialUpdateRequest)(nil), "appscode.cloud.v1alpha1.CredentialUpdateRequest")
	proto.RegisterType((*CredentialUpdateResponse)(nil), "appscode.cloud.v1alpha1.CredentialUpdateResponse")
	proto.RegisterType((*CredentialDeleteRequest)(nil), "appscode.cloud.v1alpha1.CredentialDeleteRequest")
	proto.RegisterType((*CredentialDeleteResponse)(nil), "appscode.cloud.v1alpha1.CredentialDeleteResponse")
	proto.RegisterType((*ClusterListRequest)(nil), "appscode.cloud.v1alpha1.ClusterListRequest")
	proto.RegisterType((*ClusterListResponse)(nil), "appscode.cloud.v1alpha1.ClusterListResponse")
	proto.RegisterType((*ClusterDescribeRequest)(nil), "appscode.cloud.v1alpha1.ClusterDescribeRequest")
	proto.RegisterType((*ClusterDescribeResponse)(nil), "appscode.cloud.v1alpha1.ClusterDescribeResponse")
	proto.RegisterType((*ClusterCreateRequest)(nil), "appscode.cloud.v1alpha1.ClusterCreateRequest")
	proto.RegisterType((*ClusterCreateResponse)(nil), "appscode.cloud.v1alpha1.ClusterCreateResponse")
	proto.RegisterType((*ClusterUpdateRequest)(nil), "appscode.cloud.v1alpha1.ClusterUpdateRequest")
	proto.RegisterType((*ClusterUpdateResponse)(nil), "appscode.cloud.v1alpha1.ClusterUpdateResponse")
	proto.RegisterType((*ClusterDeleteRequest)(nil), "appscode.cloud.v1alpha1.ClusterDeleteRequest")
	proto.RegisterType((*ClusterDeleteResponse)(nil), "appscode.cloud.v1alpha1.ClusterDeleteResponse")
	proto.RegisterType((*ClusterApplyRequest)(nil), "appscode.cloud.v1alpha1.ClusterApplyRequest")
	proto.RegisterType((*ClusterMetadataRequest)(nil), "appscode.cloud.v1alpha1.ClusterMetadataRequest")
	proto.RegisterType((*ClusterMetadataResponse)(nil), "appscode.cloud.v1alpha1.ClusterMetadataResponse")
	proto.RegisterType((*ClusterMetadataResponse_KubedConfig)(nil), "appscode.cloud.v1alpha1.ClusterMetadataResponse.KubedConfig")
	proto.RegisterType((*NodeGroupListRequest)(nil), "appscode.cloud.v1alpha1.NodeGroupListRequest")
	proto.RegisterType((*NodeGroupListResponse)(nil), "appscode.cloud.v1alpha1.NodeGroupListResponse")
	proto.RegisterType((*NodeGroupDescribeRequest)(nil), "appscode.cloud.v1alpha1.NodeGroupDescribeRequest")
	proto.RegisterType((*NodeGroupDescribeResponse)(nil), "appscode.cloud.v1alpha1.NodeGroupDescribeResponse")
	proto.RegisterType((*NodeGroupCreateRequest)(nil), "appscode.cloud.v1alpha1.NodeGroupCreateRequest")
	proto.RegisterType((*NodeGroupCreateResponse)(nil), "appscode.cloud.v1alpha1.NodeGroupCreateResponse")
	proto.RegisterType((*NodeGroupUpdateRequest)(nil), "appscode.cloud.v1alpha1.NodeGroupUpdateRequest")
	proto.RegisterType((*NodeGroupUpdateResponse)(nil), "appscode.cloud.v1alpha1.NodeGroupUpdateResponse")
	proto.RegisterType((*NodeGroupDeleteRequest)(nil), "appscode.cloud.v1alpha1.NodeGroupDeleteRequest")
	proto.RegisterType((*NodeGroupDeleteResponse)(nil), "appscode.cloud.v1alpha1.NodeGroupDeleteResponse")
	proto.RegisterType((*SSHConfigGetRequest)(nil), "appscode.cloud.v1alpha1.SSHConfigGetRequest")
	proto.RegisterType((*SSHConfigGetResponse)(nil), "appscode.cloud.v1alpha1.SSHConfigGetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Credentials service

type CredentialsClient interface {
	List(ctx context.Context, in *appscode_dtypes.VoidRequest, opts ...grpc.CallOption) (*CredentialListResponse, error)
	Describe(ctx context.Context, in *CredentialDescribeRequest, opts ...grpc.CallOption) (*CredentialDescribeResponse, error)
	Create(ctx context.Context, in *CredentialCreateRequest, opts ...grpc.CallOption) (*CredentialCreateResponse, error)
	Update(ctx context.Context, in *CredentialUpdateRequest, opts ...grpc.CallOption) (*CredentialUpdateResponse, error)
	Delete(ctx context.Context, in *CredentialDeleteRequest, opts ...grpc.CallOption) (*CredentialDeleteResponse, error)
}

type credentialsClient struct {
	cc *grpc.ClientConn
}

func NewCredentialsClient(cc *grpc.ClientConn) CredentialsClient {
	return &credentialsClient{cc}
}

func (c *credentialsClient) List(ctx context.Context, in *appscode_dtypes.VoidRequest, opts ...grpc.CallOption) (*CredentialListResponse, error) {
	out := new(CredentialListResponse)
	err := grpc.Invoke(ctx, "/appscode.cloud.v1alpha1.Credentials/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialsClient) Describe(ctx context.Context, in *CredentialDescribeRequest, opts ...grpc.CallOption) (*CredentialDescribeResponse, error) {
	out := new(CredentialDescribeResponse)
	err := grpc.Invoke(ctx, "/appscode.cloud.v1alpha1.Credentials/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialsClient) Create(ctx context.Context, in *CredentialCreateRequest, opts ...grpc.CallOption) (*CredentialCreateResponse, error) {
	out := new(CredentialCreateResponse)
	err := grpc.Invoke(ctx, "/appscode.cloud.v1alpha1.Credentials/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialsClient) Update(ctx context.Context, in *CredentialUpdateRequest, opts ...grpc.CallOption) (*CredentialUpdateResponse, error) {
	out := new(CredentialUpdateResponse)
	err := grpc.Invoke(ctx, "/appscode.cloud.v1alpha1.Credentials/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialsClient) Delete(ctx context.Context, in *CredentialDeleteRequest, opts ...grpc.CallOption) (*CredentialDeleteResponse, error) {
	out := new(CredentialDeleteResponse)
	err := grpc.Invoke(ctx, "/appscode.cloud.v1alpha1.Credentials/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Credentials service

type CredentialsServer interface {
	List(context.Context, *appscode_dtypes.VoidRequest) (*CredentialListResponse, error)
	Describe(context.Context, *CredentialDescribeRequest) (*CredentialDescribeResponse, error)
	Create(context.Context, *CredentialCreateRequest) (*CredentialCreateResponse, error)
	Update(context.Context, *CredentialUpdateRequest) (*CredentialUpdateResponse, error)
	Delete(context.Context, *CredentialDeleteRequest) (*CredentialDeleteResponse, error)
}

func RegisterCredentialsServer(s *grpc.Server, srv CredentialsServer) {
	s.RegisterService(&_Credentials_serviceDesc, srv)
}

func _Credentials_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appscode_dtypes.VoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.Credentials/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsServer).List(ctx, req.(*appscode_dtypes.VoidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credentials_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.Credentials/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsServer).Describe(ctx, req.(*CredentialDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credentials_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.Credentials/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsServer).Create(ctx, req.(*CredentialCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credentials_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.Credentials/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsServer).Update(ctx, req.(*CredentialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credentials_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.Credentials/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsServer).Delete(ctx, req.(*CredentialDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Credentials_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appscode.cloud.v1alpha1.Credentials",
	HandlerType: (*CredentialsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Credentials_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Credentials_Describe_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Credentials_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Credentials_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Credentials_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}

// Client API for Clusters service

type ClustersClient interface {
	List(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error)
	Describe(ctx context.Context, in *ClusterDescribeRequest, opts ...grpc.CallOption) (*ClusterDescribeResponse, error)
	Create(ctx context.Context, in *ClusterCreateRequest, opts ...grpc.CallOption) (*ClusterCreateResponse, error)
	Update(ctx context.Context, in *ClusterUpdateRequest, opts ...grpc.CallOption) (*ClusterUpdateResponse, error)
	Delete(ctx context.Context, in *ClusterDeleteRequest, opts ...grpc.CallOption) (*ClusterDeleteResponse, error)
	Apply(ctx context.Context, in *ClusterApplyRequest, opts ...grpc.CallOption) (*appscode_dtypes.LongRunningResponse, error)
	Metadata(ctx context.Context, in *ClusterMetadataRequest, opts ...grpc.CallOption) (*ClusterMetadataResponse, error)
}

type clustersClient struct {
	cc *grpc.ClientConn
}

func NewClustersClient(cc *grpc.ClientConn) ClustersClient {
	return &clustersClient{cc}
}

func (c *clustersClient) List(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error) {
	out := new(ClusterListResponse)
	err := grpc.Invoke(ctx, "/appscode.cloud.v1alpha1.Clusters/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Describe(ctx context.Context, in *ClusterDescribeRequest, opts ...grpc.CallOption) (*ClusterDescribeResponse, error) {
	out := new(ClusterDescribeResponse)
	err := grpc.Invoke(ctx, "/appscode.cloud.v1alpha1.Clusters/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Create(ctx context.Context, in *ClusterCreateRequest, opts ...grpc.CallOption) (*ClusterCreateResponse, error) {
	out := new(ClusterCreateResponse)
	err := grpc.Invoke(ctx, "/appscode.cloud.v1alpha1.Clusters/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Update(ctx context.Context, in *ClusterUpdateRequest, opts ...grpc.CallOption) (*ClusterUpdateResponse, error) {
	out := new(ClusterUpdateResponse)
	err := grpc.Invoke(ctx, "/appscode.cloud.v1alpha1.Clusters/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Delete(ctx context.Context, in *ClusterDeleteRequest, opts ...grpc.CallOption) (*ClusterDeleteResponse, error) {
	out := new(ClusterDeleteResponse)
	err := grpc.Invoke(ctx, "/appscode.cloud.v1alpha1.Clusters/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Apply(ctx context.Context, in *ClusterApplyRequest, opts ...grpc.CallOption) (*appscode_dtypes.LongRunningResponse, error) {
	out := new(appscode_dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/appscode.cloud.v1alpha1.Clusters/Apply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Metadata(ctx context.Context, in *ClusterMetadataRequest, opts ...grpc.CallOption) (*ClusterMetadataResponse, error) {
	out := new(ClusterMetadataResponse)
	err := grpc.Invoke(ctx, "/appscode.cloud.v1alpha1.Clusters/Metadata", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Clusters service

type ClustersServer interface {
	List(context.Context, *ClusterListRequest) (*ClusterListResponse, error)
	Describe(context.Context, *ClusterDescribeRequest) (*ClusterDescribeResponse, error)
	Create(context.Context, *ClusterCreateRequest) (*ClusterCreateResponse, error)
	Update(context.Context, *ClusterUpdateRequest) (*ClusterUpdateResponse, error)
	Delete(context.Context, *ClusterDeleteRequest) (*ClusterDeleteResponse, error)
	Apply(context.Context, *ClusterApplyRequest) (*appscode_dtypes.LongRunningResponse, error)
	Metadata(context.Context, *ClusterMetadataRequest) (*ClusterMetadataResponse, error)
}

func RegisterClustersServer(s *grpc.Server, srv ClustersServer) {
	s.RegisterService(&_Clusters_serviceDesc, srv)
}

func _Clusters_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.Clusters/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).List(ctx, req.(*ClusterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.Clusters/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Describe(ctx, req.(*ClusterDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.Clusters/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Create(ctx, req.(*ClusterCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.Clusters/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Update(ctx, req.(*ClusterUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.Clusters/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Delete(ctx, req.(*ClusterDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.Clusters/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Apply(ctx, req.(*ClusterApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Metadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Metadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.Clusters/Metadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Metadata(ctx, req.(*ClusterMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Clusters_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appscode.cloud.v1alpha1.Clusters",
	HandlerType: (*ClustersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Clusters_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Clusters_Describe_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Clusters_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Clusters_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Clusters_Delete_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _Clusters_Apply_Handler,
		},
		{
			MethodName: "Metadata",
			Handler:    _Clusters_Metadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}

// Client API for NodeGroups service

type NodeGroupsClient interface {
	List(ctx context.Context, in *NodeGroupListRequest, opts ...grpc.CallOption) (*NodeGroupListResponse, error)
	Describe(ctx context.Context, in *NodeGroupDescribeRequest, opts ...grpc.CallOption) (*NodeGroupDescribeResponse, error)
	Create(ctx context.Context, in *NodeGroupCreateRequest, opts ...grpc.CallOption) (*NodeGroupCreateResponse, error)
	Update(ctx context.Context, in *NodeGroupUpdateRequest, opts ...grpc.CallOption) (*NodeGroupUpdateResponse, error)
	Delete(ctx context.Context, in *NodeGroupDeleteRequest, opts ...grpc.CallOption) (*NodeGroupDeleteResponse, error)
}

type nodeGroupsClient struct {
	cc *grpc.ClientConn
}

func NewNodeGroupsClient(cc *grpc.ClientConn) NodeGroupsClient {
	return &nodeGroupsClient{cc}
}

func (c *nodeGroupsClient) List(ctx context.Context, in *NodeGroupListRequest, opts ...grpc.CallOption) (*NodeGroupListResponse, error) {
	out := new(NodeGroupListResponse)
	err := grpc.Invoke(ctx, "/appscode.cloud.v1alpha1.NodeGroups/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGroupsClient) Describe(ctx context.Context, in *NodeGroupDescribeRequest, opts ...grpc.CallOption) (*NodeGroupDescribeResponse, error) {
	out := new(NodeGroupDescribeResponse)
	err := grpc.Invoke(ctx, "/appscode.cloud.v1alpha1.NodeGroups/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGroupsClient) Create(ctx context.Context, in *NodeGroupCreateRequest, opts ...grpc.CallOption) (*NodeGroupCreateResponse, error) {
	out := new(NodeGroupCreateResponse)
	err := grpc.Invoke(ctx, "/appscode.cloud.v1alpha1.NodeGroups/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGroupsClient) Update(ctx context.Context, in *NodeGroupUpdateRequest, opts ...grpc.CallOption) (*NodeGroupUpdateResponse, error) {
	out := new(NodeGroupUpdateResponse)
	err := grpc.Invoke(ctx, "/appscode.cloud.v1alpha1.NodeGroups/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGroupsClient) Delete(ctx context.Context, in *NodeGroupDeleteRequest, opts ...grpc.CallOption) (*NodeGroupDeleteResponse, error) {
	out := new(NodeGroupDeleteResponse)
	err := grpc.Invoke(ctx, "/appscode.cloud.v1alpha1.NodeGroups/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeGroups service

type NodeGroupsServer interface {
	List(context.Context, *NodeGroupListRequest) (*NodeGroupListResponse, error)
	Describe(context.Context, *NodeGroupDescribeRequest) (*NodeGroupDescribeResponse, error)
	Create(context.Context, *NodeGroupCreateRequest) (*NodeGroupCreateResponse, error)
	Update(context.Context, *NodeGroupUpdateRequest) (*NodeGroupUpdateResponse, error)
	Delete(context.Context, *NodeGroupDeleteRequest) (*NodeGroupDeleteResponse, error)
}

func RegisterNodeGroupsServer(s *grpc.Server, srv NodeGroupsServer) {
	s.RegisterService(&_NodeGroups_serviceDesc, srv)
}

func _NodeGroups_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGroupsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.NodeGroups/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGroupsServer).List(ctx, req.(*NodeGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGroups_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeGroupDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGroupsServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.NodeGroups/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGroupsServer).Describe(ctx, req.(*NodeGroupDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGroups_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeGroupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGroupsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.NodeGroups/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGroupsServer).Create(ctx, req.(*NodeGroupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGroups_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeGroupUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGroupsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.NodeGroups/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGroupsServer).Update(ctx, req.(*NodeGroupUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGroups_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeGroupDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGroupsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.NodeGroups/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGroupsServer).Delete(ctx, req.(*NodeGroupDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeGroups_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appscode.cloud.v1alpha1.NodeGroups",
	HandlerType: (*NodeGroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _NodeGroups_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _NodeGroups_Describe_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _NodeGroups_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NodeGroups_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NodeGroups_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}

// Client API for SSHConfig service

type SSHConfigClient interface {
	Get(ctx context.Context, in *SSHConfigGetRequest, opts ...grpc.CallOption) (*SSHConfigGetResponse, error)
}

type sSHConfigClient struct {
	cc *grpc.ClientConn
}

func NewSSHConfigClient(cc *grpc.ClientConn) SSHConfigClient {
	return &sSHConfigClient{cc}
}

func (c *sSHConfigClient) Get(ctx context.Context, in *SSHConfigGetRequest, opts ...grpc.CallOption) (*SSHConfigGetResponse, error) {
	out := new(SSHConfigGetResponse)
	err := grpc.Invoke(ctx, "/appscode.cloud.v1alpha1.SSHConfig/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SSHConfig service

type SSHConfigServer interface {
	Get(context.Context, *SSHConfigGetRequest) (*SSHConfigGetResponse, error)
}

func RegisterSSHConfigServer(s *grpc.Server, srv SSHConfigServer) {
	s.RegisterService(&_SSHConfig_serviceDesc, srv)
}

func _SSHConfig_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHConfigGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSHConfigServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.SSHConfig/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSHConfigServer).Get(ctx, req.(*SSHConfigGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SSHConfig_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appscode.cloud.v1alpha1.SSHConfig",
	HandlerType: (*SSHConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _SSHConfig_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}

func init() { proto.RegisterFile("cluster.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x59, 0xcf, 0x6f, 0xd4, 0xc6,
	0x17, 0x97, 0x93, 0x10, 0x36, 0x2f, 0xf0, 0xfd, 0xc2, 0x24, 0x24, 0x8b, 0x85, 0x4a, 0x64, 0xb5,
	0x12, 0x84, 0xc4, 0x4e, 0x36, 0xa0, 0x0a, 0x4a, 0x05, 0x25, 0xa1, 0x80, 0x08, 0xab, 0xd4, 0xfc,
	0x52, 0x51, 0xa5, 0xd5, 0xc4, 0x1e, 0x36, 0x2e, 0x5e, 0x8f, 0xe3, 0xf1, 0x46, 0x8d, 0x2a, 0x2e,
	0xfc, 0x05, 0x95, 0xb8, 0xf6, 0xd2, 0x43, 0x0f, 0x55, 0x25, 0x2a, 0x55, 0xaa, 0x68, 0x0f, 0xbd,
	0x56, 0xaa, 0xd4, 0x5b, 0x85, 0x54, 0xf5, 0xdc, 0x3f, 0xa0, 0x87, 0x5e, 0x7a, 0xab, 0xec, 0x19,
	0xdb, 0x63, 0xef, 0x26, 0xeb, 0xdd, 0x66, 0x39, 0xf4, 0x42, 0xd6, 0xf3, 0xde, 0xbc, 0xf7, 0x79,
	0xcf, 0xef, 0x7d, 0xde, 0x8c, 0x81, 0xa3, 0x96, 0xdb, 0x66, 0x21, 0x09, 0x74, 0x3f, 0xa0, 0x21,
	0x45, 0xb3, 0xd8, 0xf7, 0x99, 0x45, 0x6d, 0xa2, 0x5b, 0x2e, 0x6d, 0xdb, 0xfa, 0xce, 0x32, 0x76,
	0xfd, 0x2d, 0xbc, 0xac, 0x9e, 0x6a, 0x52, 0xda, 0x74, 0x89, 0x81, 0x7d, 0xc7, 0xc0, 0x9e, 0x47,
	0x43, 0x1c, 0x3a, 0xd4, 0x63, 0x7c, 0x9b, 0xfa, 0x46, 0xb2, 0x6d, 0x0f, 0xf9, 0xe9, 0x9c, 0xdc,
	0x0e, 0x77, 0x7d, 0xc2, 0x8c, 0xf8, 0x5f, 0xa1, 0xa0, 0xe5, 0x14, 0x76, 0x48, 0xc0, 0x1c, 0xea,
	0x25, 0x7f, 0x85, 0xce, 0xc5, 0xa6, 0x13, 0x6e, 0xb5, 0x37, 0x75, 0x8b, 0xb6, 0x8c, 0x54, 0xdd,
	0xdf, 0xc2, 0x41, 0x8b, 0x04, 0xd1, 0x36, 0x66, 0x24, 0x68, 0x8d, 0x26, 0xf1, 0x48, 0x80, 0x43,
	0x62, 0xf3, 0xad, 0xda, 0x36, 0xcc, 0xac, 0x06, 0xc4, 0x26, 0x5e, 0xe8, 0x60, 0x77, 0xdd, 0x61,
	0xa1, 0x49, 0x98, 0x4f, 0x3d, 0x46, 0xd0, 0x43, 0x98, 0xb4, 0x52, 0x09, 0xab, 0x2a, 0x73, 0xa3,
	0x67, 0x26, 0x6b, 0x17, 0xf4, 0xcc, 0x95, 0x9e, 0x66, 0x44, 0xb8, 0xd2, 0x23, 0x57, 0x69, 0x62,
	0xf4, 0xcc, 0xae, 0x29, 0x5b, 0xd2, 0x0c, 0x38, 0x99, 0x89, 0xd6, 0x08, 0xb3, 0x02, 0x67, 0x93,
	0x98, 0x64, 0xbb, 0x4d, 0x58, 0x88, 0x10, 0x8c, 0x79, 0xb8, 0x45, 0xaa, 0xca, 0x9c, 0x72, 0x66,
	0xc2, 0x8c, 0x7f, 0x6b, 0x0c, 0xd4, 0x6e, 0x1b, 0x04, 0xce, 0xfb, 0x00, 0x99, 0xf5, 0x78, 0xdf,
	0xc0, 0x30, 0x25, 0x43, 0x9a, 0x0f, 0xb3, 0x99, 0x64, 0x35, 0x20, 0x38, 0x4c, 0x31, 0x0e, 0xc9,
	0xe3, 0x36, 0x54, 0x3b, 0x3d, 0xbe, 0xc6, 0x20, 0xef, 0xfb, 0xf6, 0x6b, 0x0e, 0x32, 0xf1, 0x38,
	0xdc, 0x20, 0x7f, 0x53, 0xe4, 0x28, 0xd7, 0x88, 0x4b, 0xc2, 0xfd, 0xca, 0x0d, 0xe9, 0x30, 0x15,
	0x10, 0x97, 0x60, 0x46, 0x1a, 0x01, 0x61, 0x24, 0xd8, 0x21, 0x76, 0xc3, 0xf1, 0xab, 0x23, 0x73,
	0xca, 0x99, 0x8a, 0x79, 0x5c, 0x88, 0x4c, 0x21, 0xb9, 0xe5, 0xa3, 0x69, 0x38, 0xf4, 0x98, 0x06,
	0x16, 0xa9, 0x8e, 0xc6, 0x1a, 0xfc, 0x01, 0x2d, 0x02, 0x7a, 0x42, 0x88, 0xdf, 0x70, 0xa9, 0x8d,
	0x37, 0xb1, 0x8b, 0x3d, 0x8b, 0x04, 0xac, 0x3a, 0xc6, 0x8d, 0x44, 0x92, 0x75, 0x59, 0x80, 0xce,
	0xc3, 0x8c, 0x1d, 0x23, 0x6b, 0xd8, 0xbb, 0x1e, 0x6e, 0x39, 0x56, 0x63, 0x87, 0xba, 0xed, 0x16,
	0x61, 0xd5, 0x43, 0xf1, 0x96, 0x69, 0x2e, 0x5d, 0xe3, 0xc2, 0x07, 0x5c, 0x96, 0xcf, 0x66, 0x12,
	0xd9, 0x70, 0xb3, 0xb9, 0x00, 0x68, 0x95, 0x13, 0x23, 0x67, 0x0b, 0x9e, 0xc7, 0x19, 0x18, 0x67,
	0x21, 0x0e, 0xdb, 0x9c, 0x27, 0x26, 0x4c, 0xf1, 0xa4, 0x11, 0x98, 0xca, 0x69, 0x0b, 0x6c, 0x75,
	0xa8, 0x08, 0x76, 0x4d, 0x88, 0xa5, 0xd6, 0x0f, 0x32, 0xbe, 0xd5, 0x4c, 0x6d, 0x68, 0x0b, 0x30,
	0x23, 0x16, 0xcb, 0xf0, 0x49, 0x13, 0x66, 0x3b, 0xb4, 0x05, 0xb0, 0x75, 0x38, 0x2c, 0x8c, 0x8a,
	0x8c, 0x0d, 0x82, 0x2b, 0x31, 0xa1, 0xd9, 0x30, 0x2d, 0xd6, 0xf2, 0x04, 0x72, 0xb0, 0x5e, 0x08,
	0x9c, 0x28, 0x78, 0x19, 0x72, 0x30, 0x79, 0xa2, 0x18, 0x56, 0x30, 0x05, 0x72, 0x38, 0x58, 0x37,
	0xaf, 0x94, 0x34, 0x9a, 0xff, 0x14, 0x21, 0x64, 0xe9, 0x2b, 0xb0, 0xc1, 0xc1, 0xa6, 0xef, 0x6c,
	0xda, 0xd6, 0xef, 0xf9, 0xbe, 0xbb, 0xbb, 0x5f, 0xb3, 0xcd, 0xa7, 0xad, 0x79, 0x87, 0x84, 0xd8,
	0xc6, 0x21, 0x4e, 0xb4, 0x8f, 0xc1, 0x68, 0xdb, 0xb1, 0x85, 0x72, 0xf4, 0x53, 0xfb, 0x62, 0x34,
	0xed, 0xcc, 0x4c, 0x59, 0x04, 0xd0, 0x80, 0x23, 0x4f, 0xda, 0x9b, 0xc4, 0x6e, 0x58, 0xd4, 0x7b,
	0xec, 0x34, 0x45, 0x14, 0x97, 0xf5, 0x3d, 0x8e, 0x65, 0xfa, 0x1e, 0x76, 0xf4, 0xdb, 0x91, 0x91,
	0xd5, 0xd8, 0x86, 0x39, 0xf9, 0x24, 0x7b, 0x40, 0x67, 0xe1, 0x98, 0xd5, 0x66, 0x21, 0x6d, 0x45,
	0x2f, 0x99, 0xb6, 0x03, 0x8b, 0xb0, 0xea, 0x48, 0x4c, 0x66, 0xff, 0xe7, 0xeb, 0x66, 0xb2, 0xac,
	0xfe, 0xad, 0xc0, 0xa4, 0x64, 0x07, 0xad, 0xc0, 0x61, 0x71, 0x20, 0x13, 0xb0, 0x4e, 0x66, 0xb0,
	0x92, 0x93, 0xda, 0x03, 0xfe, 0xd7, 0x4c, 0x34, 0xa3, 0x7a, 0xa0, 0x7e, 0x74, 0x16, 0xa3, 0x41,
	0x23, 0xca, 0x14, 0xf3, 0xb1, 0x45, 0xe2, 0xa2, 0x9a, 0x30, 0x8f, 0x27, 0x92, 0x7a, 0x22, 0x40,
	0x6f, 0xc1, 0xff, 0x18, 0xc1, 0x81, 0xb5, 0xd5, 0x20, 0x1e, 0xde, 0x74, 0x89, 0x2d, 0xaa, 0xeb,
	0x28, 0x5f, 0xbd, 0xce, 0x17, 0x51, 0x0d, 0x4e, 0x04, 0x24, 0x72, 0x41, 0x1a, 0x8e, 0x67, 0x93,
	0x4f, 0x52, 0x6d, 0x5e, 0x68, 0x53, 0x42, 0x78, 0x2b, 0x92, 0x25, 0x7b, 0xce, 0xc1, 0x71, 0xec,
	0x61, 0x77, 0x37, 0x74, 0x2c, 0x96, 0xea, 0xf3, 0x2a, 0x3b, 0x96, 0x0a, 0x84, 0xb2, 0xb6, 0x01,
	0xd3, 0x75, 0x6a, 0x93, 0x1b, 0x01, 0x6d, 0xfb, 0xf2, 0x04, 0x98, 0x83, 0x49, 0x51, 0x1d, 0xf5,
	0xac, 0x04, 0xe4, 0x25, 0x69, 0x46, 0x8c, 0xe4, 0x66, 0x44, 0x0b, 0x4e, 0x14, 0x2c, 0x8a, 0x57,
	0x7e, 0x0f, 0xc0, 0x4b, 0x04, 0xc9, 0x9c, 0x38, 0xdf, 0x47, 0xd9, 0xa6, 0x56, 0x4d, 0xc9, 0x8e,
	0xb6, 0x01, 0xd5, 0x54, 0x50, 0x9c, 0x16, 0xbd, 0x83, 0x48, 0x4a, 0x7c, 0x44, 0x2a, 0x71, 0x0a,
	0x27, 0xbb, 0x58, 0x14, 0x41, 0x98, 0x30, 0x91, 0x3a, 0x17, 0xd5, 0x31, 0x58, 0x0c, 0x99, 0x19,
	0xcd, 0x85, 0x99, 0x74, 0x3d, 0x3f, 0x59, 0x86, 0xe1, 0xad, 0x05, 0xb3, 0x1d, 0xde, 0x5e, 0x53,
	0x70, 0xf9, 0x49, 0x33, 0xec, 0xe0, 0x0a, 0x13, 0x67, 0x18, 0xee, 0xfe, 0x52, 0xa4, 0xe8, 0xf2,
	0x93, 0x67, 0xa0, 0xda, 0x43, 0x0b, 0xd0, 0x31, 0x80, 0x36, 0x04, 0x33, 0x74, 0x0a, 0xb2, 0xc9,
	0x34, 0x26, 0x4f, 0xa6, 0x05, 0xe8, 0x9c, 0x3f, 0xa2, 0xff, 0xbb, 0x0c, 0xa6, 0x1a, 0x74, 0x1d,
	0x3d, 0xd5, 0xf1, 0x7d, 0xc6, 0x92, 0x9c, 0xe5, 0xc2, 0x60, 0x1a, 0x46, 0x96, 0xef, 0xc2, 0xd4,
	0xdd, 0xbb, 0x37, 0x39, 0x39, 0xdf, 0x20, 0x7d, 0x50, 0x94, 0x0a, 0x95, 0xc8, 0x4a, 0x3d, 0xcb,
	0x72, 0xfa, 0x1c, 0x9d, 0x7f, 0xf2, 0x46, 0xd3, 0xc9, 0x3a, 0x9e, 0x1b, 0x49, 0xfd, 0xa0, 0x4f,
	0x0d, 0x9a, 0xc2, 0x46, 0xed, 0xb3, 0xc3, 0x30, 0x99, 0x9d, 0xbc, 0x19, 0x7a, 0xae, 0xc0, 0x58,
	0x44, 0x8a, 0xe8, 0x54, 0x66, 0x8b, 0x7f, 0x25, 0xd0, 0x1f, 0x50, 0xc7, 0x16, 0xa1, 0xa9, 0xc6,
	0xde, 0x73, 0xb0, 0xeb, 0xed, 0x5e, 0xbb, 0xfc, 0xec, 0xbb, 0xea, 0x48, 0x45, 0x79, 0xf6, 0xeb,
	0x1f, 0xcf, 0x47, 0x96, 0x90, 0x6e, 0x34, 0x72, 0x9f, 0x19, 0x62, 0x1b, 0xd9, 0x47, 0x03, 0xe9,
	0xf6, 0x6e, 0x7c, 0xcc, 0xa8, 0x87, 0xbe, 0x57, 0xa0, 0x92, 0x30, 0x1d, 0xaa, 0x95, 0xf0, 0x5d,
	0x20, 0x5a, 0x75, 0xa5, 0xaf, 0x3d, 0x02, 0xf3, 0xaa, 0x84, 0xf9, 0x6d, 0x74, 0xa1, 0x3c, 0xe6,
	0x4f, 0xa3, 0x56, 0x79, 0xca, 0xa1, 0xbf, 0x50, 0x60, 0x9c, 0xb3, 0x18, 0x5a, 0x2a, 0x01, 0x22,
	0x47, 0xaf, 0xea, 0x72, 0x1f, 0x3b, 0x04, 0xe8, 0x2b, 0x12, 0xe8, 0x15, 0xad, 0xcf, 0x44, 0x5f,
	0x52, 0xe6, 0xd1, 0xcf, 0x0a, 0x8c, 0x73, 0x66, 0x2a, 0x05, 0x38, 0x47, 0x99, 0xa5, 0x00, 0xe7,
	0x69, 0x4f, 0x7b, 0x24, 0x01, 0xae, 0xab, 0xb7, 0xfa, 0xc8, 0x72, 0xf6, 0xa0, 0xb7, 0xc4, 0xb1,
	0x4b, 0xcf, 0x32, 0x1f, 0xc5, 0xf2, 0xad, 0x02, 0xe3, 0xbc, 0xff, 0x4b, 0xc5, 0x92, 0x23, 0xc8,
	0x52, 0xb1, 0xe4, 0xc9, 0x25, 0x5f, 0x31, 0xf3, 0x83, 0x55, 0x4c, 0xed, 0xf7, 0x09, 0xa8, 0x88,
	0xd3, 0x24, 0x43, 0x9f, 0x27, 0xfd, 0x78, 0xae, 0xd7, 0xc9, 0x53, 0x3a, 0x1c, 0xa9, 0x0b, 0xe5,
	0x94, 0x05, 0xea, 0x8b, 0x12, 0xea, 0x45, 0x74, 0xae, 0x07, 0x6a, 0x81, 0x8c, 0x57, 0xf7, 0x37,
	0x72, 0x63, 0x1a, 0xbd, 0xbc, 0x16, 0xbb, 0x72, 0xa9, 0xfc, 0x06, 0x01, 0xf5, 0xaa, 0x04, 0xf5,
	0x3c, 0xaa, 0x95, 0x84, 0x2a, 0xf7, 0xe3, 0x97, 0x59, 0x3f, 0x2e, 0xf6, 0x72, 0x9f, 0x6f, 0x46,
	0xbd, 0xac, 0x7a, 0x37, 0xca, 0xd3, 0xfa, 0x49, 0x6b, 0x54, 0xba, 0x3f, 0x66, 0x6d, 0xd8, 0x13,
	0x67, 0xbe, 0x07, 0xf5, 0xb2, 0xea, 0x02, 0xe7, 0x3d, 0x09, 0xe7, 0x4d, 0x75, 0xb5, 0x6c, 0x4e,
	0x93, 0xcf, 0xd5, 0x7b, 0xb4, 0xde, 0x57, 0x59, 0xeb, 0x2d, 0xf6, 0x7e, 0xcd, 0x72, 0xdf, 0xe9,
	0x65, 0xd5, 0xbb, 0xd5, 0xc4, 0xfc, 0x20, 0x35, 0xf1, 0x42, 0x81, 0x43, 0xf1, 0xc5, 0x12, 0xf5,
	0x6c, 0x1c, 0xf9, 0xfe, 0xa9, 0xbe, 0xd9, 0x31, 0x23, 0xd7, 0xa9, 0xd7, 0x34, 0xdb, 0x9e, 0xe7,
	0x78, 0xcd, 0x14, 0xdf, 0x07, 0x12, 0xbe, 0xeb, 0xea, 0xd5, 0xfe, 0xf0, 0x61, 0x2b, 0xfe, 0x7a,
	0x6f, 0xe0, 0xc8, 0x6f, 0x9a, 0xdc, 0x97, 0x0a, 0x54, 0x92, 0x9b, 0x66, 0xef, 0xb6, 0x2b, 0x5c,
	0x84, 0x7b, 0xb7, 0x5d, 0xf1, 0x12, 0xab, 0xdd, 0x94, 0x42, 0xb8, 0x8c, 0x2e, 0x95, 0x0d, 0xa1,
	0xed, 0xd8, 0x4f, 0x8d, 0xa4, 0x3e, 0x38, 0xb9, 0x7d, 0x5d, 0x01, 0x48, 0xcf, 0x50, 0x0c, 0xfd,
	0x90, 0xd0, 0xdb, 0xde, 0x35, 0xd2, 0xed, 0xf6, 0xb7, 0x4f, 0x8d, 0x74, 0xbd, 0xda, 0x69, 0xa6,
	0x14, 0xc0, 0xfb, 0x68, 0xad, 0xcf, 0x1a, 0xaf, 0xc7, 0xaf, 0x22, 0x3a, 0x99, 0x35, 0x63, 0xd8,
	0xbc, 0x6a, 0x7e, 0x91, 0xb9, 0x6f, 0xb9, 0x37, 0xa0, 0x22, 0xfb, 0xd5, 0xfa, 0xd9, 0x22, 0xe2,
	0xf8, 0x50, 0x8a, 0xe3, 0x0e, 0xba, 0xfd, 0x6f, 0xe3, 0x90, 0x9b, 0xe0, 0x55, 0x46, 0x8c, 0x46,
	0x6f, 0x64, 0x79, 0x6a, 0x5c, 0x2a, 0xbf, 0x41, 0x04, 0xb2, 0x25, 0x05, 0xf2, 0x91, 0xf6, 0xb0,
	0x74, 0x53, 0x24, 0xe6, 0x32, 0xda, 0xd9, 0xef, 0x1d, 0x45, 0xbd, 0xf2, 0x67, 0x46, 0xa4, 0x25,
	0xe2, 0xca, 0x53, 0xe9, 0x52, 0xf9, 0x0d, 0x22, 0xae, 0x67, 0x8a, 0x14, 0xd8, 0x8e, 0xba, 0x3d,
	0x84, 0xc0, 0xba, 0xe9, 0xe6, 0xb9, 0xf7, 0xa7, 0x8c, 0x7b, 0x8d, 0x32, 0x45, 0x26, 0xb3, 0xef,
	0x52, 0xf9, 0x0d, 0xdd, 0x6a, 0x72, 0xfe, 0x20, 0x6b, 0xb2, 0xf6, 0x52, 0x81, 0x89, 0xf4, 0xce,
	0x12, 0x8d, 0x94, 0xd1, 0x1b, 0x24, 0xdc, 0x87, 0xa4, 0xbb, 0xdc, 0xc2, 0xd4, 0xc5, 0x92, 0xda,
	0x22, 0x9a, 0xeb, 0x71, 0x1c, 0x57, 0xd0, 0xbb, 0x03, 0xc5, 0xc1, 0xd8, 0x56, 0x8c, 0xfc, 0xda,
	0x3b, 0x70, 0x3a, 0x77, 0x1f, 0xc3, 0xbe, 0x53, 0x70, 0x7f, 0xed, 0x88, 0x60, 0xdb, 0x8d, 0x80,
	0x86, 0x74, 0x43, 0x79, 0x54, 0x49, 0x24, 0x9b, 0xe3, 0xf1, 0xff, 0x95, 0xae, 0xfc, 0x13, 0x00,
	0x00, 0xff, 0xff, 0x2e, 0x04, 0x90, 0xe4, 0x13, 0x1e, 0x00, 0x00,
}
