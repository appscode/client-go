// Code generated by protoc-gen-go.
// source: authentication.proto
// DO NOT EDIT!

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	authentication.proto
	conduit.proto

It has these top-level messages:
	TokenRequest
	TokenResponse
	LoginRequest
	LoginResponse
	LogoutRequest
	LogoutResponse
	ConduitRequest
	ConduitWhoAmIResponse
	ConduitUsersResponse
	ConduitUser
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Next Id 4
type TokenRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *TokenRequest) Reset()                    { *m = TokenRequest{} }
func (m *TokenRequest) String() string            { return proto.CompactTextString(m) }
func (*TokenRequest) ProtoMessage()               {}
func (*TokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TokenResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *TokenResponse) Reset()                    { *m = TokenResponse{} }
func (m *TokenResponse) String() string            { return proto.CompactTextString(m) }
func (*TokenResponse) ProtoMessage()               {}
func (*TokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TokenResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type LoginRequest struct {
	Namespace  string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Username   string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Secret     string `protobuf:"bytes,3,opt,name=secret" json:"secret,omitempty"`
	IssueToken bool   `protobuf:"varint,4,opt,name=issue_token,json=issueToken" json:"issue_token,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type LoginResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Token  string         `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LoginResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type LogoutRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *LogoutRequest) Reset()                    { *m = LogoutRequest{} }
func (m *LogoutRequest) String() string            { return proto.CompactTextString(m) }
func (*LogoutRequest) ProtoMessage()               {}
func (*LogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type LogoutResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *LogoutResponse) Reset()                    { *m = LogoutResponse{} }
func (m *LogoutResponse) String() string            { return proto.CompactTextString(m) }
func (*LogoutResponse) ProtoMessage()               {}
func (*LogoutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LogoutResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*TokenRequest)(nil), "auth.TokenRequest")
	proto.RegisterType((*TokenResponse)(nil), "auth.TokenResponse")
	proto.RegisterType((*LoginRequest)(nil), "auth.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "auth.LoginResponse")
	proto.RegisterType((*LogoutRequest)(nil), "auth.LogoutRequest")
	proto.RegisterType((*LogoutResponse)(nil), "auth.LogoutResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Authentication service

type AuthenticationClient interface {
	// This rpc is used to check a valid user from other applications.
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	// appctl used this to validates the user token with phabricator.
	Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
}

type authenticationClient struct {
	cc *grpc.ClientConn
}

func NewAuthenticationClient(cc *grpc.ClientConn) AuthenticationClient {
	return &authenticationClient{cc}
}

func (c *authenticationClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/auth.Authentication/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := grpc.Invoke(ctx, "/auth.Authentication/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := grpc.Invoke(ctx, "/auth.Authentication/Token", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Authentication service

type AuthenticationServer interface {
	// This rpc is used to check a valid user from other applications.
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	// appctl used this to validates the user token with phabricator.
	Token(context.Context, *TokenRequest) (*TokenResponse, error)
}

func RegisterAuthenticationServer(s *grpc.Server, srv AuthenticationServer) {
	s.RegisterService(&_Authentication_serviceDesc, srv)
}

func _Authentication_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authentication/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authentication/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authentication/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).Token(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authentication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Authentication",
	HandlerType: (*AuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Authentication_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Authentication_Logout_Handler,
		},
		{
			MethodName: "Token",
			Handler:    _Authentication_Token_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("authentication.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x93, 0xcf, 0x4e, 0xfa, 0x40,
	0x10, 0xc7, 0x53, 0x7e, 0xd0, 0xc0, 0xf0, 0xe7, 0xb0, 0x3f, 0x42, 0x48, 0x83, 0x4a, 0xd6, 0xc4,
	0x20, 0x87, 0x56, 0xf1, 0xa0, 0xe1, 0xa6, 0x5e, 0xf5, 0x52, 0x3d, 0x71, 0xd0, 0xac, 0x65, 0x03,
	0x8d, 0xd8, 0xad, 0xec, 0xac, 0x89, 0x47, 0x7d, 0x05, 0x5f, 0xc2, 0xf7, 0xf1, 0x15, 0x7c, 0x10,
	0xd3, 0x69, 0x11, 0x7a, 0xf0, 0x0f, 0xf1, 0x42, 0x32, 0xdf, 0x99, 0x7c, 0xe7, 0xb3, 0xc3, 0xb7,
	0xd0, 0x14, 0x06, 0xa7, 0x32, 0xc2, 0x30, 0x10, 0x18, 0xaa, 0xc8, 0x8d, 0xe7, 0x0a, 0x15, 0x2b,
	0x26, 0xaa, 0xd3, 0x99, 0x28, 0x35, 0x99, 0x49, 0x4f, 0xc4, 0xa1, 0x27, 0xa2, 0x48, 0x21, 0x8d,
	0xe8, 0x74, 0xc6, 0x69, 0x25, 0xf2, 0x18, 0x1f, 0x63, 0xa9, 0x3d, 0xfa, 0x4d, 0x75, 0x7e, 0x02,
	0xb5, 0x4b, 0x75, 0x2b, 0x23, 0x5f, 0xde, 0x1b, 0xa9, 0x91, 0x75, 0xa0, 0x12, 0x89, 0x3b, 0xa9,
	0x63, 0x11, 0xc8, 0xb6, 0xd5, 0xb5, 0x7a, 0x15, 0x7f, 0x29, 0xb0, 0x26, 0x94, 0x30, 0x99, 0x6e,
	0x17, 0xa8, 0x93, 0x16, 0xfc, 0x10, 0xea, 0x99, 0x87, 0x8e, 0x55, 0xa4, 0x25, 0xdb, 0x01, 0x5b,
	0xa3, 0x40, 0xa3, 0xc9, 0xa1, 0x3a, 0x68, 0xb8, 0xe9, 0x66, 0xf7, 0x82, 0x54, 0x3f, 0xeb, 0xf2,
	0x27, 0x0b, 0x6a, 0x67, 0x6a, 0x12, 0xfe, 0x72, 0xbb, 0x03, 0x65, 0xa3, 0xe5, 0x3c, 0x11, 0x32,
	0x80, 0xcf, 0x9a, 0xb5, 0xc0, 0xd6, 0x32, 0x98, 0x4b, 0x6c, 0xff, 0xa3, 0x4e, 0x56, 0xb1, 0x2d,
	0xa8, 0x86, 0x5a, 0x1b, 0x79, 0x9d, 0x72, 0x17, 0xbb, 0x56, 0xaf, 0xec, 0x03, 0x49, 0xc4, 0xcc,
	0xcf, 0xa1, 0x9e, 0x21, 0xac, 0x07, 0xff, 0xc5, 0x2d, 0x4e, 0xc9, 0x4e, 0x19, 0xfc, 0xcb, 0x41,
	0x8f, 0xa0, 0xb1, 0x30, 0x59, 0x0f, 0x6a, 0xf0, 0x5a, 0x80, 0xc6, 0x71, 0x2e, 0x23, 0x6c, 0x04,
	0x25, 0x7a, 0x20, 0x63, 0x6e, 0x92, 0x13, 0x77, 0xf5, 0xe0, 0xce, 0xff, 0x9c, 0x96, 0x2e, 0xe3,
	0xbd, 0xe7, 0xb7, 0xf7, 0x97, 0x02, 0xe7, 0x1b, 0x9e, 0x88, 0x63, 0x1d, 0xa8, 0x71, 0x16, 0x2a,
	0x83, 0x53, 0xef, 0x61, 0xcf, 0xdd, 0xf7, 0x66, 0xc9, 0xf8, 0xd0, 0xea, 0xb3, 0x2b, 0xb0, 0x53,
	0x50, 0xb6, 0x34, 0x5a, 0xbe, 0xdd, 0x69, 0xe6, 0xc5, 0xcc, 0x7e, 0x97, 0xec, 0xb7, 0xf9, 0xe6,
	0x37, 0xf6, 0xca, 0x60, 0xe2, 0x3f, 0x82, 0x12, 0xfd, 0x4b, 0x0b, 0xf6, 0xd5, 0xa8, 0x2e, 0xd8,
	0x73, 0xd1, 0xfb, 0x99, 0x9d, 0x2e, 0x3c, 0xb4, 0xfa, 0x37, 0x36, 0x7d, 0x00, 0x07, 0x1f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x53, 0xe1, 0xde, 0x15, 0x54, 0x03, 0x00, 0x00,
}
