// Code generated by protoc-gen-go.
// source: ssh.proto
// DO NOT EDIT!

/*
Package v1beta1 is a generated protocol buffer package.

It is generated from these files:
	ssh.proto

It has these top-level messages:
	SSHGetRequest
	SSHGetResponse
	SSHKey
*/
package v1beta1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Use specific requests for protos
type SSHGetRequest struct {
	Namespace    string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	ClusterName  string `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
	InstanceName string `protobuf:"bytes,3,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
}

func (m *SSHGetRequest) Reset()                    { *m = SSHGetRequest{} }
func (m *SSHGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SSHGetRequest) ProtoMessage()               {}
func (*SSHGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// return phid ?
type SSHGetResponse struct {
	Status       *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	SshKey       *SSHKey        `protobuf:"bytes,2,opt,name=ssh_key,json=sshKey" json:"ssh_key,omitempty"`
	InstanceAddr string         `protobuf:"bytes,3,opt,name=instance_addr,json=instanceAddr" json:"instance_addr,omitempty"`
	InstancePort int32          `protobuf:"varint,4,opt,name=instance_port,json=instancePort" json:"instance_port,omitempty"`
	User         string         `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
	Command      string         `protobuf:"bytes,6,opt,name=command" json:"command,omitempty"`
}

func (m *SSHGetResponse) Reset()                    { *m = SSHGetResponse{} }
func (m *SSHGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SSHGetResponse) ProtoMessage()               {}
func (*SSHGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SSHGetResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SSHGetResponse) GetSshKey() *SSHKey {
	if m != nil {
		return m.SshKey
	}
	return nil
}

type SSHKey struct {
	PublicKey          []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey         []byte `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	AwsFingerprint     string `protobuf:"bytes,3,opt,name=aws_fingerprint,json=awsFingerprint" json:"aws_fingerprint,omitempty"`
	OpensshFingerprint string `protobuf:"bytes,4,opt,name=openssh_fingerprint,json=opensshFingerprint" json:"openssh_fingerprint,omitempty"`
}

func (m *SSHKey) Reset()                    { *m = SSHKey{} }
func (m *SSHKey) String() string            { return proto.CompactTextString(m) }
func (*SSHKey) ProtoMessage()               {}
func (*SSHKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*SSHGetRequest)(nil), "ssh.v1beta1.SSHGetRequest")
	proto.RegisterType((*SSHGetResponse)(nil), "ssh.v1beta1.SSHGetResponse")
	proto.RegisterType((*SSHKey)(nil), "ssh.v1beta1.SSHKey")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for SSH service

type SSHClient interface {
	Get(ctx context.Context, in *SSHGetRequest, opts ...grpc.CallOption) (*SSHGetResponse, error)
}

type sSHClient struct {
	cc *grpc.ClientConn
}

func NewSSHClient(cc *grpc.ClientConn) SSHClient {
	return &sSHClient{cc}
}

func (c *sSHClient) Get(ctx context.Context, in *SSHGetRequest, opts ...grpc.CallOption) (*SSHGetResponse, error) {
	out := new(SSHGetResponse)
	err := grpc.Invoke(ctx, "/ssh.v1beta1.SSH/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SSH service

type SSHServer interface {
	Get(context.Context, *SSHGetRequest) (*SSHGetResponse, error)
}

func RegisterSSHServer(s *grpc.Server, srv SSHServer) {
	s.RegisterService(&_SSH_serviceDesc, srv)
}

func _SSH_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSHServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssh.v1beta1.SSH/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSHServer).Get(ctx, req.(*SSHGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SSH_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ssh.v1beta1.SSH",
	HandlerType: (*SSHServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _SSH_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("ssh.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xe5, 0x26, 0x75, 0xe4, 0x71, 0x1a, 0xa4, 0xad, 0x84, 0xac, 0xd0, 0xaa, 0x25, 0x08,
	0xe8, 0x01, 0xd9, 0x6a, 0x78, 0x02, 0x38, 0xd0, 0x48, 0x95, 0x10, 0xb2, 0x6f, 0x5c, 0xa2, 0x8d,
	0x3d, 0x24, 0x16, 0xc9, 0xee, 0xb2, 0x33, 0x6e, 0x95, 0x2b, 0xaf, 0xc0, 0x1b, 0xf0, 0x4a, 0xdc,
	0x39, 0xf1, 0x20, 0x68, 0xd7, 0x0e, 0x49, 0x2b, 0x2e, 0xd6, 0xec, 0x37, 0xff, 0x7a, 0xfe, 0x99,
	0x1d, 0x88, 0x88, 0x56, 0xa9, 0xb1, 0x9a, 0xb5, 0x88, 0x5d, 0x78, 0x77, 0xbd, 0x40, 0x96, 0xd7,
	0xe3, 0xb3, 0xa5, 0xd6, 0xcb, 0x35, 0x66, 0xd2, 0xd4, 0x99, 0x54, 0x4a, 0xb3, 0xe4, 0x5a, 0x2b,
	0x6a, 0xa5, 0xe3, 0xa7, 0x0e, 0x57, 0xbc, 0x35, 0x48, 0x99, 0xff, 0xb6, 0x7c, 0xd2, 0xc0, 0x49,
	0x51, 0xcc, 0x6e, 0x90, 0x73, 0xfc, 0xd6, 0x20, 0xb1, 0x38, 0x83, 0x48, 0xc9, 0x0d, 0x92, 0x91,
	0x25, 0x26, 0xc1, 0x65, 0x70, 0x15, 0xe5, 0x7b, 0x20, 0x9e, 0xc3, 0xb0, 0x5c, 0x37, 0xc4, 0x68,
	0xe7, 0x0e, 0x26, 0x47, 0x5e, 0x10, 0x77, 0xec, 0xa3, 0xdc, 0xa0, 0x78, 0x01, 0x27, 0xb5, 0x22,
	0x96, 0xaa, 0xc4, 0x56, 0xd3, 0xf3, 0x9a, 0xe1, 0x0e, 0x3a, 0xd1, 0xe4, 0x77, 0x00, 0xa3, 0x5d,
	0x5d, 0x32, 0x5a, 0x11, 0x8a, 0x57, 0x10, 0x12, 0x4b, 0x6e, 0xc8, 0x57, 0x8d, 0xa7, 0xa3, 0xb4,
	0xb5, 0x9b, 0x16, 0x9e, 0xe6, 0x5d, 0x56, 0xbc, 0x81, 0x01, 0xd1, 0x6a, 0xfe, 0x15, 0xb7, 0xbe,
	0x7a, 0x3c, 0x3d, 0x4d, 0x0f, 0xc6, 0x90, 0x16, 0xc5, 0xec, 0x16, 0xb7, 0x79, 0x48, 0xb4, 0xba,
	0xc5, 0xed, 0x03, 0x37, 0xb2, 0xaa, 0xec, 0x63, 0x37, 0xef, 0xaa, 0xca, 0x3e, 0x10, 0x19, 0x6d,
	0x39, 0xe9, 0x5f, 0x06, 0x57, 0xc7, 0x7b, 0xd1, 0x27, 0x6d, 0x59, 0x08, 0xe8, 0x37, 0x84, 0x36,
	0x39, 0xf6, 0x3f, 0xf0, 0xb1, 0x48, 0x60, 0x50, 0xea, 0xcd, 0x46, 0xaa, 0x2a, 0x09, 0x3d, 0xde,
	0x1d, 0x27, 0x3f, 0x03, 0x08, 0x5b, 0x2b, 0xe2, 0x1c, 0xc0, 0x34, 0x8b, 0x75, 0x5d, 0x7a, 0xcf,
	0xae, 0xb9, 0x61, 0x1e, 0xb5, 0xc4, 0xa5, 0x2f, 0x20, 0x36, 0xb6, 0xbe, 0x93, 0x8c, 0xff, 0x7a,
	0x1a, 0xe6, 0xd0, 0x21, 0x27, 0x78, 0x0d, 0x4f, 0xe4, 0x3d, 0xcd, 0xbf, 0xd4, 0x6a, 0x89, 0xd6,
	0xd8, 0x5a, 0x71, 0xd7, 0xc4, 0x48, 0xde, 0xd3, 0x87, 0x3d, 0x15, 0x19, 0x9c, 0x6a, 0x83, 0xca,
	0x4d, 0xe7, 0x50, 0xdc, 0xf7, 0x62, 0xd1, 0xa5, 0x0e, 0x2e, 0x4c, 0xd7, 0xd0, 0x2b, 0x8a, 0x99,
	0x40, 0xe8, 0xdd, 0x20, 0x8b, 0xf1, 0xe3, 0x39, 0xee, 0xb7, 0x62, 0xfc, 0xec, 0xbf, 0xb9, 0xf6,
	0xe5, 0x26, 0x2f, 0xbf, 0xff, 0xfa, 0xf3, 0xe3, 0xe8, 0x42, 0x9c, 0x67, 0xd2, 0x18, 0x2a, 0x75,
	0xd5, 0x2e, 0x21, 0xd1, 0x2a, 0xeb, 0x6e, 0xb8, 0xf8, 0x7d, 0xf4, 0x79, 0xd0, 0x1d, 0x17, 0xa1,
	0x5f, 0xbe, 0xb7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x2c, 0xf5, 0x15, 0xcc, 0x02, 0x00,
	0x00,
}
