syntax = "proto3";

package certificate.v1beta1;

option go_package = "v1beta1";

import "google/api/annotations.proto";
import "appscode/api/annotations.proto";
import "api/dtypes/types.proto";

service Certificates {
  rpc List(CertificateListRequest) returns (CertificateListResponse) {
    option (google.api.http) = {
      get: "/appscode/api/certificate/v1beta1/certificates"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Describe(CertificateDescribeRequest) returns (CertificateDescribeResponse) {
    option (google.api.http) = {
      get: "/appscode/api/certificate/v1beta1/certificates/{uid}"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Create(CertificateCreateRequest) returns (CertificateCreateResponse) {
    option (google.api.http) = {
      post: "/appscode/api/certificate/v1beta1/certificates"
      body: "*"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Import(CertificateImportRequest) returns (dtypes.VoidResponse) {
    option (google.api.http) = {
      put: "/appscode/api/certificate/v1beta1/certificates/{name}/actions/import"
      body: "*"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Delete(CertificateDeleteRequest) returns (dtypes.VoidResponse) {
    option (google.api.http) = {
      delete: "/appscode/api/certificate/v1beta1/certificates/{uid}"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Renew(CertificateRenewRequest) returns (CertificateRenewResponse) {
    option (google.api.http) = {
      post: "/appscode/api/certificate/v1beta1/certificates/{uid}/actions/renew"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Revoke(CertificateRevokeRequest) returns (dtypes.VoidResponse) {
    option (google.api.http) = {
      put: "/appscode/api/certificate/v1beta1/certificates/{uid}/actions/revoke"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Deploy(CertificateDeployRequest) returns (dtypes.VoidResponse) {
    option (google.api.http) = {
      put: "/appscode/api/certificate/v1beta1/certificates/{uid}/actions/deploy"
      body: "*"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }
}

message CertificateListRequest {
}

message CertificateListResponse {
  dtypes.Status status = 1;
  repeated Certificate certificates = 2;
}

message CertificateDescribeRequest {
  string uid = 1;
}

message CertificateDescribeResponse {
  dtypes.Status status = 1;
  Certificate certificate = 2;
}

message CertificateCreateRequest {
  string account_phid = 1;
  string name = 2;
  string common_name = 3;
  repeated string san = 4;
  bool bundle = 5;
  string key_data = 6;
  SubjectInfo subject_info = 7;
  bool issue_private_cert = 8;
}

// A Name contains the SubjectInfo fields.
message SubjectInfo {
  string C  = 1; // Country
  string ST = 2; // State
  string L  = 3; // Locality
  string O  = 4; // OrganisationName
  string OU = 5; // OrganisationalUnitName
}

message CertificateCreateResponse {
  dtypes.Status status = 1;
  Certificate certificate = 2;
  string phid = 3;
  bytes cert = 4;
  bytes key = 5;
  bytes root = 6;
}

message Certificate {
  string phid = 1;
  string name = 2;
  string common_name = 3;
  string issued_by = 4;
  int64 valid_from = 5;
  int64 expire_date = 6;

  // those feilds will not included into list response.
  // only describe response will include the underlying
  // feilds.
  repeated string sans = 7;
  string cert = 8;
  string key = 9;
  int32 version = 10;
  string serial_number = 11;
}

message CertificateImportRequest {
  string name = 1;
  string cert_data = 2;
  string key_data = 3;
}

message CertificateDeleteRequest {
  string uid = 1;
}

message CertificateRenewRequest {
  string account_phid = 1;
  string name = 2;
  string uid = 3;
}

message CertificateRenewResponse {
  dtypes.Status status = 1;
  string cert = 2;
}

message CertificateRevokeRequest {
  string account_phid = 1;
  string uid = 2;
}

message CertificateDeployRequest {
  string uid = 1;
  string secret_name = 2;
  string cluster_name = 3;
  string namespace = 4;
}

message DNSCheckRequest {
  string domain =1;
  string key_auth = 2;
}
