syntax = "proto3";

package db.v1beta1;

option go_package = "v1beta1";

import "google/api/annotations.proto";
import "appscode/api/annotations.proto";
import "api/dtypes/types.proto";

service Databases {
  rpc List(DatabaseListRequest) returns (DatabaseListResponse) {
    option (google.api.http) = {
      get: "/appscode/api/kubernetes/v1beta1/clusters/{cluster}/databases"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Create(DatabaseCreateRequest) returns (dtypes.VoidResponse) {
    option (google.api.http) = {
      post : "/appscode/api/kubernetes/v1beta1/clusters/{cluster}/databases"
      body : "*"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Scale(DatabaseScaleRequest) returns (dtypes.VoidResponse) {
    option (google.api.http) = {
      put: "/appscode/api/kubernetes/v1beta1/clusters/{cluster}/databases/{uid}/actions/scale"
      body: "*"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Update(DatabaseUpdateRequest) returns (dtypes.VoidResponse) {
    option (google.api.http) = {
      put: "/appscode/api/kubernetes/v1beta1/clusters/{cluster}/databases/{uid}"
      body: "*"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Describe(DatabaseDescribeRequest) returns (DatabaseDescribeResponse) {
    option (google.api.http) = {
      get: "/appscode/api/kubernetes/v1beta1/clusters/{cluster}/databases/{uid}"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Delete(DatabaseDeleteRequest) returns (dtypes.VoidResponse) {
    option (google.api.http) = {
      delete: "/appscode/api/kubernetes/v1beta1/clusters/{cluster}/databases/{uid}"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }
}

// Next Id: 19
message Database {
  string phid = 1;
  string cluster = 2;
  string name = 3;
  string type = 5;
  string sku = 6;
  string version = 8;
  string auth_secret = 9;
  string schedule_cron_expr = 10;
  int32 pv_size_gb = 11;
  int64 last_backup_at = 12;
  string status = 13;
  int64 created_at = 14;
  int64 deleted_at = 15;
  string service_name = 16;
  bool do_not_delete = 17;
  string provider = 18;
}

// Next Id: 3
message DatabaseListRequest {
  string cluster = 1;
  string type = 2;

  // List of status to get the agent filterd on the status
  // values in
  //   PENDING
  //   FAILED
  //   READY
  //   DELETING
  //   DELETED
  //   DESTROYED
  repeated string status = 3;
}

// Next Id: 3
message DatabaseListResponse {
  dtypes.Status status = 1;
  repeated Database databases = 2;
}

// Next Id: 16
message DatabaseCreateRequest {
  string cluster = 1;
  string service_name = 2;
  string type = 3;
  string sku = 4;
  string version = 5;
  int32 pv_size_gb = 7;
  string auth_secret_name = 8;
  int32 size = 9;
  string snapshot_phid = 14;
  string hostname = 15;
  string storage_class = 16;
}

// Next Id: 4
message DatabaseScaleRequest {
  string cluster = 1;
  string uid = 2;
  int32 size = 3;
}

// Next Id: 4
message DatabaseUpdateRequest {
  string cluster = 1;
  string uid = 2;
  bool do_not_delete = 3;
}

// Next Id: 3
message DatabaseDescribeRequest {
  string cluster = 1;
  string uid = 2;
}

// Next Id: 7
message SnapshotSummary {
  int32 backup_attempt = 3;
  int32 backup_success = 4;
  int32 restore_attempt = 5;
  int32 restore_success = 6;
}

// Next Id: 17
message DatabaseDescribeResponse {
  dtypes.Status status = 1;
  SnapshotSummary snapshot_summary = 9;
  Database database = 16;
}

// Next Id: 4
message DatabaseDeleteRequest {
  string cluster = 1;
  string uid = 2;
  bool destroy = 3;
}

// Next Id: 4
message DatabaseCheckRequest {
  string cluster = 1;
  string uid = 2;
  string purchase_phid = 3;
}
