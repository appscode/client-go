// Code generated by protoc-gen-go.
// source: snapshot.proto
// DO NOT EDIT!

package v1beta1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Next Id: 4
type DatabaseInfo struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
}

func (m *DatabaseInfo) Reset()                    { *m = DatabaseInfo{} }
func (m *DatabaseInfo) String() string            { return proto.CompactTextString(m) }
func (*DatabaseInfo) ProtoMessage()               {}
func (*DatabaseInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// Next Id: 15
type Snapshot struct {
	Name              string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Phid              string `protobuf:"bytes,2,opt,name=phid" json:"phid,omitempty"`
	Provider          string `protobuf:"bytes,3,opt,name=provider" json:"provider,omitempty"`
	CloudCredential   string `protobuf:"bytes,4,opt,name=cloud_credential,json=cloudCredential" json:"cloud_credential,omitempty"`
	Bucket            string `protobuf:"bytes,5,opt,name=bucket" json:"bucket,omitempty"`
	Status            string `protobuf:"bytes,8,opt,name=status" json:"status,omitempty"`
	Process           string `protobuf:"bytes,9,opt,name=process" json:"process,omitempty"`
	Type              string `protobuf:"bytes,10,opt,name=type" json:"type,omitempty"`
	IsScheduledBackup int32  `protobuf:"varint,11,opt,name=is_scheduled_backup,json=isScheduledBackup" json:"is_scheduled_backup,omitempty"`
	SourceDatabase    string `protobuf:"bytes,12,opt,name=source_database,json=sourceDatabase" json:"source_database,omitempty"`
	SourceSnapshot    string `protobuf:"bytes,13,opt,name=source_snapshot,json=sourceSnapshot" json:"source_snapshot,omitempty"`
	CreatedAt         int64  `protobuf:"varint,14,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *Snapshot) Reset()                    { *m = Snapshot{} }
func (m *Snapshot) String() string            { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()               {}
func (*Snapshot) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// Next Id: 3
type SnapshotListRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Uid     string `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
}

func (m *SnapshotListRequest) Reset()                    { *m = SnapshotListRequest{} }
func (m *SnapshotListRequest) String() string            { return proto.CompactTextString(m) }
func (*SnapshotListRequest) ProtoMessage()               {}
func (*SnapshotListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

// Next Id: 4
type SnapshotListResponse struct {
	Status       *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	DatabaseInfo *DatabaseInfo  `protobuf:"bytes,2,opt,name=database_info,json=databaseInfo" json:"database_info,omitempty"`
	List         []*Snapshot    `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
}

func (m *SnapshotListResponse) Reset()                    { *m = SnapshotListResponse{} }
func (m *SnapshotListResponse) String() string            { return proto.CompactTextString(m) }
func (*SnapshotListResponse) ProtoMessage()               {}
func (*SnapshotListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *SnapshotListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SnapshotListResponse) GetDatabaseInfo() *DatabaseInfo {
	if m != nil {
		return m.DatabaseInfo
	}
	return nil
}

func (m *SnapshotListResponse) GetList() []*Snapshot {
	if m != nil {
		return m.List
	}
	return nil
}

// Next Id: 13
type BackupScheduleRequest struct {
	Cluster          string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Uid              string `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
	CredentialUid    string `protobuf:"bytes,4,opt,name=credential_uid,json=credentialUid" json:"credential_uid,omitempty"`
	BucketName       string `protobuf:"bytes,5,opt,name=bucket_name,json=bucketName" json:"bucket_name,omitempty"`
	SnapshotName     string `protobuf:"bytes,6,opt,name=snapshot_name,json=snapshotName" json:"snapshot_name,omitempty"`
	AuthSecretName   string `protobuf:"bytes,8,opt,name=auth_secret_name,json=authSecretName" json:"auth_secret_name,omitempty"`
	ScheduleCronExpr string `protobuf:"bytes,9,opt,name=schedule_cron_expr,json=scheduleCronExpr" json:"schedule_cron_expr,omitempty"`
}

func (m *BackupScheduleRequest) Reset()                    { *m = BackupScheduleRequest{} }
func (m *BackupScheduleRequest) String() string            { return proto.CompactTextString(m) }
func (*BackupScheduleRequest) ProtoMessage()               {}
func (*BackupScheduleRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

// Next Id: 3
type BackupUnscheduleRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Uid     string `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
}

func (m *BackupUnscheduleRequest) Reset()                    { *m = BackupUnscheduleRequest{} }
func (m *BackupUnscheduleRequest) String() string            { return proto.CompactTextString(m) }
func (*BackupUnscheduleRequest) ProtoMessage()               {}
func (*BackupUnscheduleRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

// Next Id: 19
type SnapshotRestoreRequest struct {
	Cluster        string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Uid            string `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
	SnapshotPhid   string `protobuf:"bytes,8,opt,name=snapshot_phid,json=snapshotPhid" json:"snapshot_phid,omitempty"`
	AuthSecretName string `protobuf:"bytes,13,opt,name=auth_secret_name,json=authSecretName" json:"auth_secret_name,omitempty"`
}

func (m *SnapshotRestoreRequest) Reset()                    { *m = SnapshotRestoreRequest{} }
func (m *SnapshotRestoreRequest) String() string            { return proto.CompactTextString(m) }
func (*SnapshotRestoreRequest) ProtoMessage()               {}
func (*SnapshotRestoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

// Next Id: 4
type SnapshotCheckRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Phid    string `protobuf:"bytes,2,opt,name=phid" json:"phid,omitempty"`
}

func (m *SnapshotCheckRequest) Reset()                    { *m = SnapshotCheckRequest{} }
func (m *SnapshotCheckRequest) String() string            { return proto.CompactTextString(m) }
func (*SnapshotCheckRequest) ProtoMessage()               {}
func (*SnapshotCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func init() {
	proto.RegisterType((*DatabaseInfo)(nil), "db.v1beta1.DatabaseInfo")
	proto.RegisterType((*Snapshot)(nil), "db.v1beta1.Snapshot")
	proto.RegisterType((*SnapshotListRequest)(nil), "db.v1beta1.SnapshotListRequest")
	proto.RegisterType((*SnapshotListResponse)(nil), "db.v1beta1.SnapshotListResponse")
	proto.RegisterType((*BackupScheduleRequest)(nil), "db.v1beta1.BackupScheduleRequest")
	proto.RegisterType((*BackupUnscheduleRequest)(nil), "db.v1beta1.BackupUnscheduleRequest")
	proto.RegisterType((*SnapshotRestoreRequest)(nil), "db.v1beta1.SnapshotRestoreRequest")
	proto.RegisterType((*SnapshotCheckRequest)(nil), "db.v1beta1.SnapshotCheckRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Snapshots service

type SnapshotsClient interface {
	List(ctx context.Context, in *SnapshotListRequest, opts ...grpc.CallOption) (*SnapshotListResponse, error)
	BackupSchedule(ctx context.Context, in *BackupScheduleRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	BackupUnschedule(ctx context.Context, in *BackupUnscheduleRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Restore(ctx context.Context, in *SnapshotRestoreRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
}

type snapshotsClient struct {
	cc *grpc.ClientConn
}

func NewSnapshotsClient(cc *grpc.ClientConn) SnapshotsClient {
	return &snapshotsClient{cc}
}

func (c *snapshotsClient) List(ctx context.Context, in *SnapshotListRequest, opts ...grpc.CallOption) (*SnapshotListResponse, error) {
	out := new(SnapshotListResponse)
	err := grpc.Invoke(ctx, "/db.v1beta1.Snapshots/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotsClient) BackupSchedule(ctx context.Context, in *BackupScheduleRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/db.v1beta1.Snapshots/BackupSchedule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotsClient) BackupUnschedule(ctx context.Context, in *BackupUnscheduleRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/db.v1beta1.Snapshots/BackupUnschedule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotsClient) Restore(ctx context.Context, in *SnapshotRestoreRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/db.v1beta1.Snapshots/Restore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Snapshots service

type SnapshotsServer interface {
	List(context.Context, *SnapshotListRequest) (*SnapshotListResponse, error)
	BackupSchedule(context.Context, *BackupScheduleRequest) (*dtypes.VoidResponse, error)
	BackupUnschedule(context.Context, *BackupUnscheduleRequest) (*dtypes.VoidResponse, error)
	Restore(context.Context, *SnapshotRestoreRequest) (*dtypes.VoidResponse, error)
}

func RegisterSnapshotsServer(s *grpc.Server, srv SnapshotsServer) {
	s.RegisterService(&_Snapshots_serviceDesc, srv)
}

func _Snapshots_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.v1beta1.Snapshots/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotsServer).List(ctx, req.(*SnapshotListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snapshots_BackupSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotsServer).BackupSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.v1beta1.Snapshots/BackupSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotsServer).BackupSchedule(ctx, req.(*BackupScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snapshots_BackupUnschedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupUnscheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotsServer).BackupUnschedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.v1beta1.Snapshots/BackupUnschedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotsServer).BackupUnschedule(ctx, req.(*BackupUnscheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snapshots_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotsServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.v1beta1.Snapshots/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotsServer).Restore(ctx, req.(*SnapshotRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Snapshots_serviceDesc = grpc.ServiceDesc{
	ServiceName: "db.v1beta1.Snapshots",
	HandlerType: (*SnapshotsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Snapshots_List_Handler,
		},
		{
			MethodName: "BackupSchedule",
			Handler:    _Snapshots_BackupSchedule_Handler,
		},
		{
			MethodName: "BackupUnschedule",
			Handler:    _Snapshots_BackupUnschedule_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _Snapshots_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("snapshot.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 794 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0xcb, 0x6e, 0x13, 0x3d,
	0x18, 0xd5, 0x24, 0x69, 0x9b, 0x7c, 0xb9, 0x34, 0xbf, 0xdb, 0xbf, 0x8c, 0x22, 0x50, 0xc3, 0x54,
	0x40, 0xa8, 0x20, 0xa3, 0x86, 0x5d, 0x25, 0x16, 0xbd, 0x2d, 0x90, 0xb8, 0x54, 0x89, 0x8a, 0x10,
	0x08, 0x06, 0x67, 0xc6, 0x6d, 0x46, 0x09, 0xe3, 0xc1, 0xf6, 0x54, 0x45, 0x55, 0x37, 0xac, 0xd8,
	0xf7, 0x05, 0x90, 0x58, 0xb0, 0x46, 0x62, 0xcf, 0x43, 0xf0, 0x0a, 0x3c, 0x04, 0x4b, 0x34, 0xf6,
	0x78, 0x32, 0x69, 0x53, 0x90, 0xaa, 0x6e, 0x22, 0xfb, 0xf8, 0xf8, 0xcb, 0xf1, 0xf1, 0xf9, 0x3c,
	0x50, 0xe3, 0x01, 0x0e, 0xf9, 0x80, 0x8a, 0x76, 0xc8, 0xa8, 0xa0, 0x08, 0xbc, 0x7e, 0xfb, 0x70,
	0xad, 0x4f, 0x04, 0x5e, 0x6b, 0x5c, 0x3f, 0xa0, 0xf4, 0x60, 0x44, 0x6c, 0x1c, 0xfa, 0x36, 0x0e,
	0x02, 0x2a, 0xb0, 0xf0, 0x69, 0xc0, 0x15, 0xb3, 0xb1, 0x14, 0xc3, 0x9e, 0xf8, 0x10, 0x12, 0x6e,
	0xcb, 0x5f, 0x85, 0x5b, 0xbb, 0x50, 0xd9, 0xc6, 0x02, 0xf7, 0x31, 0x27, 0x8f, 0x82, 0x7d, 0x8a,
	0x4c, 0x98, 0x73, 0x47, 0x11, 0x17, 0x84, 0x99, 0x46, 0xd3, 0x68, 0x95, 0xba, 0x7a, 0x8a, 0x10,
	0x14, 0x02, 0xfc, 0x8e, 0x98, 0x39, 0x09, 0xcb, 0x71, 0x8c, 0xc5, 0xc5, 0xcc, 0xbc, 0xc2, 0xe2,
	0xb1, 0xf5, 0x3b, 0x07, 0xc5, 0x5e, 0x22, 0x33, 0xdd, 0x64, 0x4c, 0x6e, 0x0a, 0x07, 0xbe, 0xa7,
	0x0b, 0xc5, 0x63, 0xd4, 0x80, 0x62, 0xc8, 0xe8, 0xa1, 0xef, 0x11, 0x96, 0x14, 0x4b, 0xe7, 0xe8,
	0x2e, 0xd4, 0xdd, 0x11, 0x8d, 0x3c, 0xc7, 0x65, 0xc4, 0x23, 0x81, 0xf0, 0xf1, 0xc8, 0x2c, 0x48,
	0xce, 0xbc, 0xc4, 0xb7, 0x52, 0x18, 0x2d, 0xc1, 0x6c, 0x3f, 0x72, 0x87, 0x44, 0x98, 0x33, 0x92,
	0x90, 0xcc, 0x62, 0x9c, 0x0b, 0x2c, 0x22, 0x6e, 0x16, 0x15, 0xae, 0x66, 0xf1, 0x69, 0x43, 0x46,
	0x5d, 0xc2, 0xb9, 0x59, 0x52, 0xa7, 0x4d, 0xa6, 0xe9, 0xc9, 0x60, 0x7c, 0x32, 0xd4, 0x86, 0x05,
	0x9f, 0x3b, 0xdc, 0x1d, 0x10, 0x2f, 0x1a, 0x11, 0xcf, 0xe9, 0x63, 0x77, 0x18, 0x85, 0x66, 0xb9,
	0x69, 0xb4, 0x66, 0xba, 0xff, 0xf9, 0xbc, 0xa7, 0x57, 0x36, 0xe5, 0x02, 0xba, 0x03, 0xf3, 0x9c,
	0x46, 0xcc, 0x25, 0x8e, 0x97, 0x58, 0x6c, 0x56, 0x64, 0xb9, 0x9a, 0x82, 0xb5, 0xf1, 0x19, 0xa2,
	0xbe, 0x5f, 0xb3, 0x9a, 0x25, 0xa6, 0x76, 0xde, 0x00, 0x70, 0x19, 0xc1, 0x82, 0x78, 0x0e, 0x16,
	0x66, 0xad, 0x69, 0xb4, 0xf2, 0xdd, 0x52, 0x82, 0x6c, 0x08, 0x6b, 0x03, 0x16, 0x34, 0xf5, 0xb1,
	0xcf, 0x45, 0x97, 0xbc, 0x8f, 0x08, 0x17, 0x7f, 0xb9, 0xd3, 0x3a, 0xe4, 0xa3, 0xf4, 0x26, 0xe2,
	0xa1, 0xf5, 0xd5, 0x80, 0xc5, 0xc9, 0x1a, 0x3c, 0xa4, 0x01, 0x27, 0xe8, 0x76, 0x6a, 0x61, 0x5c,
	0xa3, 0xdc, 0xa9, 0xb5, 0x55, 0x9a, 0xda, 0x3d, 0x89, 0xa6, 0x96, 0x3e, 0x84, 0xaa, 0x3e, 0xad,
	0xe3, 0x07, 0xfb, 0x54, 0x16, 0x2f, 0x77, 0xcc, 0xf6, 0x38, 0xaa, 0xed, 0x6c, 0xe2, 0xba, 0x15,
	0x2f, 0x9b, 0xbf, 0x16, 0x14, 0x46, 0x3e, 0x17, 0x66, 0xbe, 0x99, 0x6f, 0x95, 0x3b, 0x8b, 0xd9,
	0x5d, 0x5a, 0x56, 0x57, 0x32, 0xac, 0x4f, 0x39, 0xf8, 0x5f, 0x19, 0xad, 0x7d, 0xbf, 0xc4, 0x79,
	0xd1, 0x2d, 0xa8, 0x8d, 0x63, 0xe5, 0xc4, 0x8b, 0x2a, 0x5a, 0xd5, 0x31, 0xba, 0xe7, 0x7b, 0x68,
	0x19, 0xca, 0x2a, 0x4a, 0x8e, 0x8c, 0xb3, 0x4a, 0x17, 0x28, 0xe8, 0x69, 0x1c, 0xea, 0x15, 0xa8,
	0xea, 0xbb, 0x53, 0x94, 0x59, 0x49, 0xa9, 0x68, 0x50, 0x92, 0x5a, 0x50, 0xc7, 0x91, 0x18, 0x38,
	0x9c, 0xb8, 0x4c, 0x97, 0x52, 0x81, 0xac, 0xc5, 0x78, 0x4f, 0xc2, 0x92, 0x79, 0x0f, 0x90, 0xce,
	0x99, 0xe3, 0x32, 0x1a, 0x38, 0xe4, 0x28, 0x64, 0x49, 0x46, 0xeb, 0x7a, 0x65, 0x8b, 0xd1, 0x60,
	0xe7, 0x28, 0x64, 0xd6, 0x0e, 0x5c, 0x53, 0x4e, 0xec, 0x05, 0xfc, 0xf2, 0x5e, 0x58, 0xa7, 0x06,
	0x2c, 0xa5, 0x26, 0x13, 0x2e, 0x28, 0xbb, 0x94, 0xa5, 0x59, 0x2b, 0x64, 0xa3, 0x17, 0x27, 0xad,
	0xd8, 0x8d, 0x1b, 0x7e, 0x9a, 0x15, 0xd5, 0x69, 0x56, 0x58, 0xdb, 0xe3, 0x40, 0x6e, 0x0d, 0x88,
	0x3b, 0xfc, 0xb7, 0xa4, 0x29, 0x0f, 0x4c, 0xe7, 0xc7, 0x0c, 0x94, 0x74, 0x19, 0x8e, 0x3e, 0x1b,
	0x50, 0x88, 0xd3, 0x8d, 0x96, 0xa7, 0x05, 0x2c, 0xd3, 0x3b, 0x8d, 0xe6, 0xc5, 0x04, 0xd5, 0x18,
	0xd6, 0xde, 0xc7, 0x9f, 0xbf, 0x4e, 0x73, 0xcf, 0xd0, 0x13, 0x1b, 0x87, 0x21, 0x77, 0xa9, 0xa7,
	0x9e, 0xe0, 0x61, 0xd4, 0x27, 0x2c, 0x20, 0x82, 0x70, 0x3b, 0xd9, 0x6e, 0x27, 0xfa, 0xb8, 0x7d,
	0x9c, 0x8c, 0x4e, 0x6c, 0x9d, 0x7d, 0x6e, 0x1f, 0x47, 0xbe, 0x77, 0x62, 0xf3, 0x54, 0xe2, 0x37,
	0x03, 0x6a, 0x93, 0xf1, 0x46, 0x37, 0xb3, 0x5a, 0xa6, 0x46, 0xbf, 0xb1, 0xa8, 0xbb, 0xf2, 0x39,
	0xf5, 0xbd, 0x54, 0xe2, 0xbe, 0x94, 0xf8, 0xd6, 0x7a, 0x75, 0x15, 0x12, 0xb1, 0x2b, 0xbf, 0x2b,
	0xb6, 0x4e, 0xda, 0x7d, 0xf5, 0x0c, 0xae, 0x1b, 0xab, 0xe8, 0xbb, 0x01, 0xf5, 0xb3, 0x41, 0x44,
	0x2b, 0xe7, 0x55, 0x9f, 0x8b, 0xe9, 0x05, 0xba, 0x89, 0xd4, 0xed, 0x34, 0x5e, 0x5f, 0xa5, 0xee,
	0x28, 0x38, 0xa3, 0x1c, 0x7d, 0x31, 0x60, 0x2e, 0xc9, 0x3b, 0xb2, 0xa6, 0xbe, 0x38, 0x13, 0xcd,
	0x70, 0x81, 0xd8, 0x37, 0x52, 0xec, 0x0b, 0xab, 0x77, 0x95, 0x62, 0x99, 0xfa, 0xe7, 0x75, 0x63,
	0x75, 0xb3, 0xf4, 0x72, 0x2e, 0x29, 0xd0, 0x9f, 0x95, 0xdf, 0xee, 0x07, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x87, 0xdb, 0x66, 0x2a, 0x0f, 0x08, 0x00, 0x00,
}
