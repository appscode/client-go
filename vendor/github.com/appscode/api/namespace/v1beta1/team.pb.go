// Code generated by protoc-gen-go.
// source: team.proto
// DO NOT EDIT!

/*
Package v1beta1 is a generated protocol buffer package.

It is generated from these files:
	team.proto

It has these top-level messages:
	CreateRequest
	GetRequest
	GetResponse
	IsAvailableRequest
*/
package v1beta1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/appscodeapis/appscode/api"
import appscode_dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateRequest struct {
	Name               string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DisplayName        string            `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	Email              string            `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	UserName           string            `protobuf:"bytes,4,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Password           string            `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	InviteEmails       []string          `protobuf:"bytes,6,rep,name=invite_emails,json=inviteEmails" json:"invite_emails,omitempty"`
	SubscriptionType   string            `protobuf:"bytes,7,opt,name=subscription_type,json=subscriptionType" json:"subscription_type,omitempty"`
	ClientIp           string            `protobuf:"bytes,8,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	PaymentMethodNonce string            `protobuf:"bytes,9,opt,name=payment_method_nonce,json=paymentMethodNonce" json:"payment_method_nonce,omitempty"`
	Options            map[string]string `protobuf:"bytes,10,rep,name=options" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateRequest) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *CreateRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *CreateRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateRequest) GetInviteEmails() []string {
	if m != nil {
		return m.InviteEmails
	}
	return nil
}

func (m *CreateRequest) GetSubscriptionType() string {
	if m != nil {
		return m.SubscriptionType
	}
	return ""
}

func (m *CreateRequest) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *CreateRequest) GetPaymentMethodNonce() string {
	if m != nil {
		return m.PaymentMethodNonce
	}
	return ""
}

func (m *CreateRequest) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

type GetRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetResponse struct {
	Phid string `protobuf:"bytes,1,opt,name=phid" json:"phid,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetResponse) GetPhid() string {
	if m != nil {
		return m.Phid
	}
	return ""
}

type IsAvailableRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *IsAvailableRequest) Reset()                    { *m = IsAvailableRequest{} }
func (m *IsAvailableRequest) String() string            { return proto.CompactTextString(m) }
func (*IsAvailableRequest) ProtoMessage()               {}
func (*IsAvailableRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IsAvailableRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "appscode.namespace.v1beta1.CreateRequest")
	proto.RegisterType((*GetRequest)(nil), "appscode.namespace.v1beta1.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "appscode.namespace.v1beta1.GetResponse")
	proto.RegisterType((*IsAvailableRequest)(nil), "appscode.namespace.v1beta1.IsAvailableRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Teams service

type TeamsClient interface {
	// Creates a new namespace, if name is valid and no namespace with same name exists.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	// Gets a namespace, if exists. This can be used to check existence of a namespace.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Check if a namespace name is available meaning name is valid and no namespace with same name exists.
	IsAvailable(ctx context.Context, in *IsAvailableRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
}

type teamsClient struct {
	cc *grpc.ClientConn
}

func NewTeamsClient(cc *grpc.ClientConn) TeamsClient {
	return &teamsClient{cc}
}

func (c *teamsClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.namespace.v1beta1.Teams/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/appscode.namespace.v1beta1.Teams/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) IsAvailable(ctx context.Context, in *IsAvailableRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.namespace.v1beta1.Teams/IsAvailable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Teams service

type TeamsServer interface {
	// Creates a new namespace, if name is valid and no namespace with same name exists.
	Create(context.Context, *CreateRequest) (*appscode_dtypes.VoidResponse, error)
	// Gets a namespace, if exists. This can be used to check existence of a namespace.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Check if a namespace name is available meaning name is valid and no namespace with same name exists.
	IsAvailable(context.Context, *IsAvailableRequest) (*appscode_dtypes.VoidResponse, error)
}

func RegisterTeamsServer(s *grpc.Server, srv TeamsServer) {
	s.RegisterService(&_Teams_serviceDesc, srv)
}

func _Teams_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.namespace.v1beta1.Teams/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.namespace.v1beta1.Teams/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_IsAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).IsAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.namespace.v1beta1.Teams/IsAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).IsAvailable(ctx, req.(*IsAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Teams_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appscode.namespace.v1beta1.Teams",
	HandlerType: (*TeamsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Teams_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Teams_Get_Handler,
		},
		{
			MethodName: "IsAvailable",
			Handler:    _Teams_IsAvailable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "team.proto",
}

func init() { proto.RegisterFile("team.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x95, 0xe3, 0x36, 0x3f, 0x37, 0xa9, 0xd4, 0x6f, 0xd4, 0x85, 0xe5, 0x8f, 0x9f, 0xd4, 0x48,
	0x10, 0xa8, 0xb0, 0xdb, 0x80, 0x10, 0x8a, 0x90, 0xa0, 0x45, 0x55, 0xd5, 0x45, 0x4b, 0x14, 0x55,
	0x2c, 0xd8, 0x58, 0x13, 0x7b, 0xd4, 0x0e, 0xd8, 0x9e, 0xc1, 0x33, 0x09, 0xb2, 0x10, 0x9b, 0x3e,
	0x01, 0x12, 0x1b, 0xde, 0x81, 0x35, 0x6f, 0xc0, 0x1b, 0xf0, 0x08, 0xf0, 0x20, 0x68, 0x66, 0x6c,
	0x92, 0xa8, 0x6a, 0x5a, 0x36, 0xd1, 0xcc, 0x3d, 0xe7, 0xde, 0x7b, 0xe6, 0xdc, 0x1b, 0x03, 0x48,
	0x82, 0x53, 0x9f, 0xe7, 0x4c, 0x32, 0xe4, 0x62, 0xce, 0x45, 0xc4, 0x62, 0xe2, 0x67, 0x38, 0x25,
	0x82, 0xe3, 0x88, 0xf8, 0xd3, 0x9d, 0x31, 0x91, 0x78, 0xc7, 0xbd, 0x71, 0xca, 0xd8, 0x69, 0x42,
	0x02, 0xcc, 0x69, 0x80, 0xb3, 0x8c, 0x49, 0x2c, 0x29, 0xcb, 0x84, 0xc9, 0x74, 0x6f, 0x55, 0x99,
	0x97, 0xe0, 0xb7, 0x17, 0xf0, 0x58, 0x16, 0x9c, 0x88, 0x40, 0xff, 0x1a, 0x82, 0xf7, 0xc3, 0x86,
	0xb5, 0x97, 0x39, 0xc1, 0x92, 0x8c, 0xc8, 0xfb, 0x09, 0x11, 0x12, 0x21, 0x58, 0x51, 0x2a, 0x1c,
	0xab, 0x6b, 0xf5, 0x5a, 0x23, 0x7d, 0x46, 0x9b, 0xd0, 0x89, 0xa9, 0xe0, 0x09, 0x2e, 0x42, 0x8d,
	0xd5, 0x34, 0xd6, 0x2e, 0x63, 0xc7, 0x8a, 0xb2, 0x01, 0xab, 0x24, 0xc5, 0x34, 0x71, 0x6c, 0x8d,
	0x99, 0x0b, 0xfa, 0x1f, 0x5a, 0x13, 0x41, 0x72, 0x93, 0xb5, 0xa2, 0x91, 0xa6, 0x0a, 0xe8, 0x14,
	0x17, 0x9a, 0x1c, 0x0b, 0xf1, 0x81, 0xe5, 0xb1, 0xb3, 0x6a, 0xb0, 0xea, 0x8e, 0xee, 0xc0, 0x1a,
	0xcd, 0xa6, 0x54, 0x92, 0x50, 0x17, 0x12, 0x4e, 0xbd, 0x6b, 0xf7, 0x5a, 0xa3, 0x8e, 0x09, 0xee,
	0xeb, 0x18, 0xda, 0x82, 0xff, 0xc4, 0x64, 0x2c, 0xa2, 0x9c, 0x72, 0xf5, 0xe8, 0x50, 0x3d, 0xcc,
	0x69, 0xe8, 0x4a, 0xeb, 0xf3, 0xc0, 0x49, 0xc1, 0x89, 0x92, 0x12, 0x25, 0x94, 0x64, 0x32, 0xa4,
	0xdc, 0x69, 0x9a, 0x76, 0x26, 0x70, 0xc8, 0xd1, 0x36, 0x6c, 0x70, 0x5c, 0xa4, 0x0a, 0x4d, 0x89,
	0x3c, 0x63, 0x71, 0x98, 0xb1, 0x2c, 0x22, 0x4e, 0x4b, 0xf3, 0x50, 0x89, 0x1d, 0x69, 0xe8, 0x58,
	0x21, 0x68, 0x08, 0x0d, 0xa6, 0x8b, 0x0b, 0x07, 0xba, 0x76, 0xaf, 0xdd, 0x7f, 0xe2, 0x5f, 0x3e,
	0x45, 0x7f, 0xc1, 0x62, 0xff, 0x95, 0x49, 0xdc, 0xcf, 0x64, 0x5e, 0x8c, 0xaa, 0x32, 0xee, 0x00,
	0x3a, 0xf3, 0x00, 0x5a, 0x07, 0xfb, 0x1d, 0x29, 0xca, 0x39, 0xa8, 0xa3, 0xf2, 0x78, 0x8a, 0x93,
	0x49, 0xe5, 0xbf, 0xb9, 0x0c, 0x6a, 0x4f, 0x2d, 0xaf, 0x0b, 0x70, 0x40, 0xe4, 0x92, 0x11, 0x7a,
	0x9b, 0xd0, 0xd6, 0x0c, 0xc1, 0x59, 0x26, 0x88, 0xa2, 0xf0, 0x33, 0x1a, 0x57, 0x14, 0x75, 0xf6,
	0x7a, 0x80, 0x0e, 0xc5, 0xee, 0x14, 0xd3, 0x04, 0x8f, 0x93, 0x65, 0xfb, 0xd0, 0xff, 0x65, 0xc3,
	0xea, 0x09, 0xc1, 0xa9, 0x40, 0x9f, 0x2d, 0xa8, 0x9b, 0xc7, 0xa1, 0xfb, 0xd7, 0x36, 0xc0, 0xbd,
	0x39, 0xa3, 0x9a, 0x9d, 0xf4, 0x5f, 0x33, 0x1a, 0x57, 0xe2, 0xbc, 0x67, 0xe7, 0xdf, 0x9d, 0x5a,
	0xd3, 0x3a, 0xff, 0xf9, 0xfb, 0x4b, 0x6d, 0xdb, 0xdb, 0x0a, 0xc2, 0x85, 0x2d, 0xfe, 0x5b, 0x3c,
	0x28, 0x8b, 0x07, 0xea, 0xaf, 0x24, 0x82, 0xb7, 0x82, 0x65, 0x03, 0xeb, 0x01, 0xfa, 0x6a, 0x81,
	0x7d, 0x40, 0x24, 0xba, 0xbb, 0x4c, 0xcf, 0xcc, 0x2d, 0xf7, 0xde, 0x95, 0xbc, 0x52, 0xd6, 0x8b,
	0x39, 0x59, 0x8f, 0x51, 0xff, 0x9a, 0xb2, 0x3e, 0x2a, 0xe0, 0x93, 0x56, 0x87, 0xbe, 0x59, 0xd0,
	0x9e, 0xb3, 0x18, 0xf9, 0xcb, 0x5a, 0x5f, 0x9c, 0xc5, 0x55, 0xbe, 0x1d, 0xcd, 0x09, 0xdc, 0x45,
	0xcf, 0xff, 0x4d, 0x20, 0x15, 0x0f, 0x71, 0xd5, 0x4f, 0xab, 0xdd, 0x1b, 0x80, 0x17, 0xb1, 0x74,
	0xd6, 0x12, 0x73, 0x7a, 0x51, 0xe6, 0x5e, 0x4b, 0x2d, 0xc2, 0x50, 0x7d, 0x4c, 0x86, 0xd6, 0x9b,
	0x46, 0x19, 0x1d, 0xd7, 0xf5, 0xe7, 0xe5, 0xd1, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x91, 0x1b,
	0x8d, 0xfc, 0xe7, 0x04, 0x00, 0x00,
}
