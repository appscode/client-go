// Code generated by protoc-gen-go.
// source: team.proto
// DO NOT EDIT!

package v1beta1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/appscodeapis/appscode/api"
import appscode_dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateRequest struct {
	Name             string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DisplayName      string   `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	Email            string   `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	UserName         string   `protobuf:"bytes,4,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Password         string   `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	InviteEmails     []string `protobuf:"bytes,6,rep,name=invite_emails,json=inviteEmails" json:"invite_emails,omitempty"`
	SubscriptionType string   `protobuf:"bytes,7,opt,name=subscription_type,json=subscriptionType" json:"subscription_type,omitempty"`
	ClientIp         string   `protobuf:"bytes,8,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateRequest) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *CreateRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *CreateRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateRequest) GetInviteEmails() []string {
	if m != nil {
		return m.InviteEmails
	}
	return nil
}

func (m *CreateRequest) GetSubscriptionType() string {
	if m != nil {
		return m.SubscriptionType
	}
	return ""
}

func (m *CreateRequest) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

type CreateResponse struct {
	Status *appscode_dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CreateResponse) GetStatus() *appscode_dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type GetRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetResponse struct {
	Status *appscode_dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Phid   string                  `protobuf:"bytes,2,opt,name=phid" json:"phid,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetResponse) GetStatus() *appscode_dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetResponse) GetPhid() string {
	if m != nil {
		return m.Phid
	}
	return ""
}

type IsAvailableRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *IsAvailableRequest) Reset()                    { *m = IsAvailableRequest{} }
func (m *IsAvailableRequest) String() string            { return proto.CompactTextString(m) }
func (*IsAvailableRequest) ProtoMessage()               {}
func (*IsAvailableRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *IsAvailableRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "appscode.namespace.v1beta1.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "appscode.namespace.v1beta1.CreateResponse")
	proto.RegisterType((*GetRequest)(nil), "appscode.namespace.v1beta1.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "appscode.namespace.v1beta1.GetResponse")
	proto.RegisterType((*IsAvailableRequest)(nil), "appscode.namespace.v1beta1.IsAvailableRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Teams service

type TeamsClient interface {
	// Creates a new namespace, if name is valid and no namespace with same name exists.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Gets a namespace, if exists. This can be used to check existence of a namespace.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Check if a namespace name is available meaning name is valid and no namespace with same name exists.
	IsAvailable(ctx context.Context, in *IsAvailableRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
}

type teamsClient struct {
	cc *grpc.ClientConn
}

func NewTeamsClient(cc *grpc.ClientConn) TeamsClient {
	return &teamsClient{cc}
}

func (c *teamsClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/appscode.namespace.v1beta1.Teams/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/appscode.namespace.v1beta1.Teams/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) IsAvailable(ctx context.Context, in *IsAvailableRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.namespace.v1beta1.Teams/IsAvailable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Teams service

type TeamsServer interface {
	// Creates a new namespace, if name is valid and no namespace with same name exists.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Gets a namespace, if exists. This can be used to check existence of a namespace.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Check if a namespace name is available meaning name is valid and no namespace with same name exists.
	IsAvailable(context.Context, *IsAvailableRequest) (*appscode_dtypes.VoidResponse, error)
}

func RegisterTeamsServer(s *grpc.Server, srv TeamsServer) {
	s.RegisterService(&_Teams_serviceDesc, srv)
}

func _Teams_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.namespace.v1beta1.Teams/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.namespace.v1beta1.Teams/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_IsAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).IsAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.namespace.v1beta1.Teams/IsAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).IsAvailable(ctx, req.(*IsAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Teams_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appscode.namespace.v1beta1.Teams",
	HandlerType: (*TeamsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Teams_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Teams_Get_Handler,
		},
		{
			MethodName: "IsAvailable",
			Handler:    _Teams_IsAvailable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "team.proto",
}

func init() { proto.RegisterFile("team.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0xdf, 0x6a, 0x13, 0x4f,
	0x14, 0x66, 0x93, 0x26, 0x4d, 0x4e, 0xda, 0x1f, 0x3f, 0x07, 0xc1, 0x65, 0xfd, 0x17, 0x57, 0xa8,
	0xb1, 0xa5, 0x3b, 0xb4, 0x5e, 0x08, 0xd1, 0x9b, 0x56, 0xa4, 0xf6, 0x46, 0x4a, 0x2c, 0x5e, 0x78,
	0x13, 0x26, 0xd9, 0x43, 0x1d, 0xd8, 0xec, 0x8c, 0x39, 0x93, 0x48, 0x10, 0x6f, 0x8a, 0x6f, 0xd0,
	0x1b, 0x9f, 0xc0, 0x37, 0xf0, 0x49, 0x7c, 0x02, 0xc1, 0x07, 0x91, 0x99, 0xd9, 0xa4, 0x09, 0xa1,
	0xb1, 0x7a, 0xb3, 0xcc, 0x9c, 0xef, 0xfc, 0xf9, 0xce, 0x77, 0xce, 0x2c, 0x80, 0x41, 0x31, 0x48,
	0xf4, 0x50, 0x19, 0xc5, 0x22, 0xa1, 0x35, 0xf5, 0x55, 0x8a, 0x49, 0x2e, 0x06, 0x48, 0x5a, 0xf4,
	0x31, 0x19, 0xef, 0xf5, 0xd0, 0x88, 0xbd, 0xe8, 0xce, 0x99, 0x52, 0x67, 0x19, 0x72, 0xa1, 0x25,
	0x17, 0x79, 0xae, 0x8c, 0x30, 0x52, 0xe5, 0xe4, 0x23, 0xa3, 0x7b, 0xd3, 0xc8, 0x2b, 0xf0, 0xfb,
	0x0b, 0x78, 0x6a, 0x26, 0x1a, 0x89, 0xbb, 0xaf, 0x77, 0x88, 0xbf, 0x94, 0x60, 0xf3, 0xc5, 0x10,
	0x85, 0xc1, 0x0e, 0x7e, 0x18, 0x21, 0x19, 0xc6, 0x60, 0xcd, 0xb2, 0x08, 0x83, 0x66, 0xd0, 0xaa,
	0x77, 0xdc, 0x99, 0x3d, 0x80, 0x8d, 0x54, 0x92, 0xce, 0xc4, 0xa4, 0xeb, 0xb0, 0x92, 0xc3, 0x1a,
	0x85, 0xed, 0xb5, 0x75, 0xb9, 0x09, 0x15, 0x1c, 0x08, 0x99, 0x85, 0x65, 0x87, 0xf9, 0x0b, 0xbb,
	0x0d, 0xf5, 0x11, 0xe1, 0xd0, 0x47, 0xad, 0x39, 0xa4, 0x66, 0x0d, 0x2e, 0x24, 0x82, 0x9a, 0x16,
	0x44, 0x1f, 0xd5, 0x30, 0x0d, 0x2b, 0x1e, 0x9b, 0xde, 0xd9, 0x43, 0xd8, 0x94, 0xf9, 0x58, 0x1a,
	0xec, 0xba, 0x44, 0x14, 0x56, 0x9b, 0xe5, 0x56, 0xbd, 0xb3, 0xe1, 0x8d, 0x2f, 0x9d, 0x8d, 0xed,
	0xc0, 0x0d, 0x1a, 0xf5, 0xa8, 0x3f, 0x94, 0xda, 0x36, 0xdd, 0xb5, 0x8d, 0x85, 0xeb, 0x2e, 0xd3,
	0xff, 0xf3, 0xc0, 0xe9, 0x44, 0xa3, 0xa5, 0xd2, 0xcf, 0x24, 0xe6, 0xa6, 0x2b, 0x75, 0x58, 0xf3,
	0xe5, 0xbc, 0xe1, 0x58, 0xc7, 0x07, 0xf0, 0xdf, 0x54, 0x05, 0xd2, 0x2a, 0x27, 0x64, 0x1c, 0xaa,
	0x64, 0x84, 0x19, 0x91, 0x13, 0xa2, 0xb1, 0x7f, 0x2b, 0x99, 0x0d, 0xc9, 0xcb, 0x98, 0xbc, 0x71,
	0x70, 0xa7, 0x70, 0x8b, 0x9b, 0x00, 0x47, 0x68, 0x56, 0xa8, 0x18, 0x77, 0xa0, 0xe1, 0x3c, 0xfe,
	0xb1, 0x82, 0xcd, 0xa9, 0xdf, 0xcb, 0xb4, 0x50, 0xdf, 0x9d, 0xe3, 0x16, 0xb0, 0x63, 0x3a, 0x18,
	0x0b, 0x99, 0x89, 0x5e, 0xb6, 0x6a, 0x86, 0xfb, 0x3f, 0xcb, 0x50, 0x39, 0x45, 0x31, 0x20, 0xf6,
	0x35, 0x80, 0xaa, 0xef, 0x96, 0x3d, 0x4e, 0xae, 0x5e, 0xbd, 0x64, 0x61, 0x2f, 0xa2, 0xed, 0xeb,
	0xb8, 0xfa, 0xd6, 0xe2, 0xa7, 0xe7, 0xdf, 0xc3, 0x52, 0x2d, 0x38, 0xff, 0xf1, 0xeb, 0xa2, 0xb4,
	0x13, 0x6f, 0xf1, 0xee, 0xc2, 0x1a, 0xce, 0xc2, 0x79, 0x11, 0xce, 0xed, 0x5b, 0xa0, 0x76, 0xb0,
	0xcd, 0x2e, 0x02, 0x28, 0x1f, 0xa1, 0x61, 0x5b, 0xab, 0x8a, 0x5d, 0xca, 0x1c, 0x3d, 0xfa, 0xa3,
	0x5f, 0xc1, 0xe8, 0xd9, 0x1c, 0x23, 0xce, 0x76, 0xaf, 0xc7, 0x88, 0x7f, 0xb2, 0xc0, 0x67, 0xf6,
	0x2d, 0x80, 0xc6, 0x9c, 0xca, 0x2c, 0x59, 0x55, 0x75, 0x79, 0x1c, 0xd1, 0xdd, 0xa5, 0xc9, 0xbe,
	0x55, 0x32, 0x9d, 0x71, 0x7b, 0x35, 0xc7, 0xed, 0x39, 0x6b, 0xff, 0x15, 0x37, 0x2e, 0x69, 0x57,
	0x4c, 0xeb, 0x1d, 0xb6, 0x21, 0xee, 0xab, 0xc1, 0x65, 0x35, 0xa1, 0xe5, 0x32, 0xc3, 0xc3, 0xba,
	0x5d, 0x83, 0x13, 0xfb, 0xfc, 0x4f, 0x82, 0x77, 0xeb, 0x85, 0xb5, 0x57, 0x75, 0x3f, 0x84, 0x27,
	0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x9a, 0x9a, 0x29, 0x99, 0x04, 0x00, 0x00,
}
