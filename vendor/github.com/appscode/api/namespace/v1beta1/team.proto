syntax = "proto3";

package namespace.v1beta1;

option go_package = "v1beta1";

import "google/api/annotations.proto";
import "api/dtypes/types.proto";

// no authentication required, but rate limited apis.
service Teams {
  // Creates a new namespace, if name is valid and no namespace with same name exists.
  rpc Create(CreateRequest) returns (CreateResponse) {
	  option (google.api.http) = {
	    put: "/appscode/api/namespace/v1beta1/teams/{name}"
	    body: "*"
    };
  }

  // Gets a namespace, if exists. This can be used to check existence of a namespace.
  rpc Get(GetRequest) returns (GetResponse) {
	  option (google.api.http) = {
	    get: "/appscode/api/namespace/v1beta1/teams/{name}"
	  };
  }

  // Check if a namespace name is available meaning name is valid and no namespace with same name exists.
  rpc IsAvailable(IsAvailableRequest) returns (dtypes.VoidResponse) {
	  option (google.api.http) = {
	    get : "/appscode/api/namespace/v1beta1/teams/{name}/is-available"
    };
  }

  // Checks current subscription of a namespace
  rpc Subscription(dtypes.VoidRequest) returns (SubscriptionResponse) {
    option (google.api.http) = {
      get : "/appscode/api/namespace/v1beta1/billing/subscription"
    };
  }
}

message CreateRequest {
  string name = 1;
  string display_name = 2;
  string email = 3;
  string user_name = 4;
  string password = 5;
  repeated string invite_email = 6;
  string subscription_type = 7;
  string client_ip = 8;
}

message CreateResponse {
  dtypes.Status status = 1;
}

message GetRequest {
  string name = 1;
}

message GetResponse {
  dtypes.Status status = 1;
  string phid = 2;
}

message IsAvailableRequest {
  string name = 1;
}

message SubscriptionResponse {
  dtypes.Status status = 1;
  message Product {
    string sku = 1;
    string type = 2;
    string display_name = 3;
    string pricing_model = 4;
  }
  Product product = 2;
  bool auto_extend = 3;
  string quota = 4;
  string date_start = 5;
  string date_end = 6;
}