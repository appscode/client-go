// Code generated by protoc-gen-go.
// source: purchase.proto
// DO NOT EDIT!

package v1beta1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PurchaseBeginRequest struct {
	ProductSku string `protobuf:"bytes,1,opt,name=product_sku,json=productSku" json:"product_sku,omitempty"`
	Count      int32  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *PurchaseBeginRequest) Reset()                    { *m = PurchaseBeginRequest{} }
func (m *PurchaseBeginRequest) String() string            { return proto.CompactTextString(m) }
func (*PurchaseBeginRequest) ProtoMessage()               {}
func (*PurchaseBeginRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type PurchaseBeginResponse struct {
	Status   *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	PhidList []string       `protobuf:"bytes,2,rep,name=phid_list,json=phidList" json:"phid_list,omitempty"`
}

func (m *PurchaseBeginResponse) Reset()                    { *m = PurchaseBeginResponse{} }
func (m *PurchaseBeginResponse) String() string            { return proto.CompactTextString(m) }
func (*PurchaseBeginResponse) ProtoMessage()               {}
func (*PurchaseBeginResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *PurchaseBeginResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type PurchaseCompleteRequest struct {
	Phid       string            `protobuf:"bytes,1,opt,name=phid" json:"phid,omitempty"`
	ObjectPhid string            `protobuf:"bytes,2,opt,name=object_phid,json=objectPhid" json:"object_phid,omitempty"`
	Failed     bool              `protobuf:"varint,3,opt,name=failed" json:"failed,omitempty"`
	Metadata   map[string]string `protobuf:"bytes,4,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PurchaseCompleteRequest) Reset()                    { *m = PurchaseCompleteRequest{} }
func (m *PurchaseCompleteRequest) String() string            { return proto.CompactTextString(m) }
func (*PurchaseCompleteRequest) ProtoMessage()               {}
func (*PurchaseCompleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *PurchaseCompleteRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type PurchaseCloseRequest struct {
	ObjectPhid string `protobuf:"bytes,1,opt,name=object_phid,json=objectPhid" json:"object_phid,omitempty"`
}

func (m *PurchaseCloseRequest) Reset()                    { *m = PurchaseCloseRequest{} }
func (m *PurchaseCloseRequest) String() string            { return proto.CompactTextString(m) }
func (*PurchaseCloseRequest) ProtoMessage()               {}
func (*PurchaseCloseRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func init() {
	proto.RegisterType((*PurchaseBeginRequest)(nil), "billing.v1beta1.PurchaseBeginRequest")
	proto.RegisterType((*PurchaseBeginResponse)(nil), "billing.v1beta1.PurchaseBeginResponse")
	proto.RegisterType((*PurchaseCompleteRequest)(nil), "billing.v1beta1.PurchaseCompleteRequest")
	proto.RegisterType((*PurchaseCloseRequest)(nil), "billing.v1beta1.PurchaseCloseRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Purchases service

type PurchasesClient interface {
	Begin(ctx context.Context, in *PurchaseBeginRequest, opts ...grpc.CallOption) (*PurchaseBeginResponse, error)
	Complete(ctx context.Context, in *PurchaseCompleteRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Close(ctx context.Context, in *PurchaseCloseRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
}

type purchasesClient struct {
	cc *grpc.ClientConn
}

func NewPurchasesClient(cc *grpc.ClientConn) PurchasesClient {
	return &purchasesClient{cc}
}

func (c *purchasesClient) Begin(ctx context.Context, in *PurchaseBeginRequest, opts ...grpc.CallOption) (*PurchaseBeginResponse, error) {
	out := new(PurchaseBeginResponse)
	err := grpc.Invoke(ctx, "/billing.v1beta1.Purchases/Begin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesClient) Complete(ctx context.Context, in *PurchaseCompleteRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/billing.v1beta1.Purchases/Complete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesClient) Close(ctx context.Context, in *PurchaseCloseRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/billing.v1beta1.Purchases/Close", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Purchases service

type PurchasesServer interface {
	Begin(context.Context, *PurchaseBeginRequest) (*PurchaseBeginResponse, error)
	Complete(context.Context, *PurchaseCompleteRequest) (*dtypes.VoidResponse, error)
	Close(context.Context, *PurchaseCloseRequest) (*dtypes.VoidResponse, error)
}

func RegisterPurchasesServer(s *grpc.Server, srv PurchasesServer) {
	s.RegisterService(&_Purchases_serviceDesc, srv)
}

func _Purchases_Begin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseBeginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasesServer).Begin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1beta1.Purchases/Begin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasesServer).Begin(ctx, req.(*PurchaseBeginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purchases_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasesServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1beta1.Purchases/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasesServer).Complete(ctx, req.(*PurchaseCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purchases_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchasesServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1beta1.Purchases/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchasesServer).Close(ctx, req.(*PurchaseCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Purchases_serviceDesc = grpc.ServiceDesc{
	ServiceName: "billing.v1beta1.Purchases",
	HandlerType: (*PurchasesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Begin",
			Handler:    _Purchases_Begin_Handler,
		},
		{
			MethodName: "Complete",
			Handler:    _Purchases_Complete_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Purchases_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor2,
}

func init() { proto.RegisterFile("purchase.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x93, 0xdf, 0x6a, 0x13, 0x41,
	0x14, 0xc6, 0x99, 0x6c, 0x13, 0xb3, 0x27, 0x58, 0x65, 0x88, 0x35, 0xac, 0x82, 0x61, 0xc1, 0xba,
	0x14, 0xd9, 0xa5, 0x29, 0x5a, 0xad, 0x78, 0xd3, 0xe2, 0x9d, 0x85, 0xb2, 0x05, 0x2f, 0x44, 0x08,
	0x93, 0xdd, 0x31, 0x1d, 0xb3, 0xdd, 0x19, 0x33, 0xb3, 0x85, 0x20, 0xbd, 0x51, 0xbc, 0xf1, 0xd6,
	0x77, 0xf0, 0x85, 0x7c, 0x05, 0xdf, 0xc1, 0x5b, 0x99, 0x3f, 0x5b, 0xd7, 0x40, 0x6c, 0x6e, 0x96,
	0x99, 0x33, 0xe7, 0x7c, 0xfc, 0xce, 0x77, 0xce, 0xc2, 0xa6, 0xa8, 0xe6, 0xd9, 0x19, 0x91, 0x34,
	0x16, 0x73, 0xae, 0x38, 0xbe, 0x35, 0x61, 0x45, 0xc1, 0xca, 0x69, 0x7c, 0xb1, 0x3b, 0xa1, 0x8a,
	0xec, 0x06, 0xf7, 0xa7, 0x9c, 0x4f, 0x0b, 0x9a, 0x10, 0xc1, 0x12, 0x52, 0x96, 0x5c, 0x11, 0xc5,
	0x78, 0x29, 0x6d, 0x7a, 0xb0, 0xa5, 0xc3, 0xb9, 0x5a, 0x08, 0x2a, 0x13, 0xf3, 0xb5, 0xf1, 0xf0,
	0x18, 0xfa, 0x27, 0x4e, 0xf8, 0x90, 0x4e, 0x59, 0x99, 0xd2, 0x8f, 0x15, 0x95, 0x0a, 0x3f, 0x80,
	0x9e, 0x98, 0xf3, 0xbc, 0xca, 0xd4, 0x58, 0xce, 0xaa, 0x01, 0x1a, 0xa2, 0xc8, 0x4f, 0xc1, 0x85,
	0x4e, 0x67, 0x15, 0xee, 0x43, 0x3b, 0xe3, 0x55, 0xa9, 0x06, 0xad, 0x21, 0x8a, 0xda, 0xa9, 0xbd,
	0x84, 0xef, 0xe0, 0xce, 0x92, 0x9c, 0x14, 0xbc, 0x94, 0x14, 0x6f, 0x43, 0x47, 0x2a, 0xa2, 0x2a,
	0x69, 0xa4, 0x7a, 0xa3, 0xcd, 0xd8, 0xc2, 0xc4, 0xa7, 0x26, 0x9a, 0xba, 0x57, 0x7c, 0x0f, 0x7c,
	0x71, 0xc6, 0xf2, 0x71, 0xc1, 0xa4, 0x96, 0xf6, 0x22, 0x3f, 0xed, 0xea, 0xc0, 0x6b, 0x26, 0x55,
	0xf8, 0x1b, 0xc1, 0xdd, 0x5a, 0xfe, 0x88, 0x9f, 0x8b, 0x82, 0x2a, 0x5a, 0x03, 0x63, 0xd8, 0xd0,
	0x79, 0x8e, 0xd4, 0x9c, 0x75, 0x13, 0x7c, 0xf2, 0x81, 0x66, 0x6a, 0x6c, 0x9e, 0x5a, 0xb6, 0x09,
	0x1b, 0x3a, 0xd1, 0x09, 0x5b, 0xd0, 0x79, 0x4f, 0x58, 0x41, 0xf3, 0x81, 0x37, 0x44, 0x51, 0x37,
	0x75, 0x37, 0x9c, 0x42, 0xf7, 0x9c, 0x2a, 0x92, 0x13, 0x45, 0x06, 0x1b, 0x43, 0x2f, 0xea, 0x8d,
	0x9e, 0xc6, 0x4b, 0x7e, 0xc7, 0x2b, 0x40, 0xe2, 0x63, 0x57, 0xf8, 0xaa, 0x54, 0xf3, 0x45, 0x7a,
	0xa5, 0x13, 0xbc, 0x80, 0x9b, 0xff, 0x3c, 0xe1, 0xdb, 0xe0, 0xcd, 0xe8, 0xc2, 0x01, 0xeb, 0xa3,
	0xf6, 0xf4, 0x82, 0x14, 0x15, 0x75, 0xa4, 0xf6, 0x72, 0xd0, 0x7a, 0x86, 0xc2, 0xfd, 0xbf, 0x63,
	0x3a, 0x2a, 0xb8, 0xa4, 0x8d, 0x31, 0x35, 0x3b, 0x44, 0xcb, 0x1d, 0x8e, 0x7e, 0x78, 0xe0, 0xd7,
	0x95, 0x12, 0x7f, 0x43, 0xd0, 0x36, 0x73, 0xc1, 0x0f, 0x57, 0xf6, 0xd3, 0x5c, 0x83, 0x60, 0xfb,
	0xba, 0x34, 0x3b, 0xde, 0x70, 0xf4, 0xf9, 0xe7, 0xaf, 0xef, 0xad, 0xc7, 0xe1, 0xa3, 0x84, 0x08,
	0x21, 0x33, 0x9e, 0xdb, 0x3d, 0x74, 0xc5, 0x89, 0x2b, 0x4e, 0xea, 0x1d, 0x96, 0x07, 0x68, 0x07,
	0x7f, 0x45, 0xd0, 0xad, 0xcd, 0xc3, 0xd1, 0xba, 0xfe, 0x06, 0xfd, 0x7a, 0x73, 0xde, 0x70, 0x96,
	0x5f, 0x01, 0x3c, 0x37, 0x00, 0x7b, 0x41, 0xbc, 0x26, 0x40, 0xf2, 0x49, 0x1b, 0x76, 0xa9, 0x39,
	0xbe, 0x20, 0x68, 0x1b, 0x53, 0xff, 0x63, 0x4a, 0xd3, 0xf4, 0x15, 0x04, 0x2f, 0x0d, 0xc1, 0xfe,
	0xce, 0x93, 0xb5, 0x09, 0x1a, 0x93, 0xbb, 0x3c, 0xf4, 0xdf, 0xde, 0x70, 0x29, 0x93, 0x8e, 0xf9,
	0x35, 0xf7, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xe0, 0xa6, 0x88, 0xc4, 0xf3, 0x03, 0x00, 0x00,
}
