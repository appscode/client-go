// Code generated by protoc-gen-go.
// source: persistentvolumeclaim.proto
// DO NOT EDIT!

package v1beta1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PVCRegisterRequest struct {
	Cluster   string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	SizeGb    int64  `protobuf:"varint,3,opt,name=size_gb,json=sizeGb" json:"size_gb,omitempty"`
	Namespace string `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *PVCRegisterRequest) Reset()                    { *m = PVCRegisterRequest{} }
func (m *PVCRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*PVCRegisterRequest) ProtoMessage()               {}
func (*PVCRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type PVCUnregisterRequest struct {
	Cluster   string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *PVCUnregisterRequest) Reset()                    { *m = PVCUnregisterRequest{} }
func (m *PVCUnregisterRequest) String() string            { return proto.CompactTextString(m) }
func (*PVCUnregisterRequest) ProtoMessage()               {}
func (*PVCUnregisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type PVCDescribeRequest struct {
	Cluster   string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *PVCDescribeRequest) Reset()                    { *m = PVCDescribeRequest{} }
func (m *PVCDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*PVCDescribeRequest) ProtoMessage()               {}
func (*PVCDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type PVCInfo struct {
	Name        string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SizeGb      int64    `protobuf:"varint,2,opt,name=size_gb,json=sizeGb" json:"size_gb,omitempty"`
	Namespace   string   `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	Status      string   `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	Volume      string   `protobuf:"bytes,5,opt,name=volume" json:"volume,omitempty"`
	AccessModes []string `protobuf:"bytes,6,rep,name=accessModes" json:"accessModes,omitempty"`
}

func (m *PVCInfo) Reset()                    { *m = PVCInfo{} }
func (m *PVCInfo) String() string            { return proto.CompactTextString(m) }
func (*PVCInfo) ProtoMessage()               {}
func (*PVCInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type PVCDescribeResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Pvc    *PVCInfo       `protobuf:"bytes,2,opt,name=pvc" json:"pvc,omitempty"`
}

func (m *PVCDescribeResponse) Reset()                    { *m = PVCDescribeResponse{} }
func (m *PVCDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*PVCDescribeResponse) ProtoMessage()               {}
func (*PVCDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *PVCDescribeResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PVCDescribeResponse) GetPvc() *PVCInfo {
	if m != nil {
		return m.Pvc
	}
	return nil
}

func init() {
	proto.RegisterType((*PVCRegisterRequest)(nil), "pv.v1beta1.PVCRegisterRequest")
	proto.RegisterType((*PVCUnregisterRequest)(nil), "pv.v1beta1.PVCUnregisterRequest")
	proto.RegisterType((*PVCDescribeRequest)(nil), "pv.v1beta1.PVCDescribeRequest")
	proto.RegisterType((*PVCInfo)(nil), "pv.v1beta1.PVCInfo")
	proto.RegisterType((*PVCDescribeResponse)(nil), "pv.v1beta1.PVCDescribeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for PersistentVolumeClaims service

type PersistentVolumeClaimsClient interface {
	Describe(ctx context.Context, in *PVCDescribeRequest, opts ...grpc.CallOption) (*PVCDescribeResponse, error)
	Register(ctx context.Context, in *PVCRegisterRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Unregister(ctx context.Context, in *PVCUnregisterRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
}

type persistentVolumeClaimsClient struct {
	cc *grpc.ClientConn
}

func NewPersistentVolumeClaimsClient(cc *grpc.ClientConn) PersistentVolumeClaimsClient {
	return &persistentVolumeClaimsClient{cc}
}

func (c *persistentVolumeClaimsClient) Describe(ctx context.Context, in *PVCDescribeRequest, opts ...grpc.CallOption) (*PVCDescribeResponse, error) {
	out := new(PVCDescribeResponse)
	err := grpc.Invoke(ctx, "/pv.v1beta1.PersistentVolumeClaims/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumeClaimsClient) Register(ctx context.Context, in *PVCRegisterRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/pv.v1beta1.PersistentVolumeClaims/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumeClaimsClient) Unregister(ctx context.Context, in *PVCUnregisterRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/pv.v1beta1.PersistentVolumeClaims/Unregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PersistentVolumeClaims service

type PersistentVolumeClaimsServer interface {
	Describe(context.Context, *PVCDescribeRequest) (*PVCDescribeResponse, error)
	Register(context.Context, *PVCRegisterRequest) (*dtypes.VoidResponse, error)
	Unregister(context.Context, *PVCUnregisterRequest) (*dtypes.VoidResponse, error)
}

func RegisterPersistentVolumeClaimsServer(s *grpc.Server, srv PersistentVolumeClaimsServer) {
	s.RegisterService(&_PersistentVolumeClaims_serviceDesc, srv)
}

func _PersistentVolumeClaims_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PVCDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentVolumeClaimsServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pv.v1beta1.PersistentVolumeClaims/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentVolumeClaimsServer).Describe(ctx, req.(*PVCDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistentVolumeClaims_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PVCRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentVolumeClaimsServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pv.v1beta1.PersistentVolumeClaims/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentVolumeClaimsServer).Register(ctx, req.(*PVCRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistentVolumeClaims_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PVCUnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentVolumeClaimsServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pv.v1beta1.PersistentVolumeClaims/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentVolumeClaimsServer).Unregister(ctx, req.(*PVCUnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PersistentVolumeClaims_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pv.v1beta1.PersistentVolumeClaims",
	HandlerType: (*PersistentVolumeClaimsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Describe",
			Handler:    _PersistentVolumeClaims_Describe_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _PersistentVolumeClaims_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _PersistentVolumeClaims_Unregister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("persistentvolumeclaim.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x54, 0x4d, 0x6e, 0xd3, 0x40,
	0x14, 0x96, 0xe3, 0x90, 0x34, 0x2f, 0x12, 0x8b, 0x69, 0x15, 0x2c, 0x53, 0x81, 0x15, 0x09, 0x14,
	0x75, 0xe1, 0x51, 0xc3, 0x8e, 0x25, 0x41, 0x42, 0x2c, 0x90, 0x22, 0x23, 0xbc, 0x60, 0x03, 0x63,
	0xfb, 0x11, 0x0c, 0x89, 0x67, 0xf0, 0x1b, 0x47, 0x2a, 0x55, 0x36, 0x5c, 0x81, 0x3b, 0x70, 0x03,
	0xd8, 0x71, 0x00, 0xd6, 0x5c, 0x81, 0x83, 0x20, 0x8f, 0x1d, 0x87, 0xba, 0xcd, 0x0a, 0xb5, 0x1b,
	0x6b, 0xde, 0x37, 0x3f, 0xdf, 0x37, 0xdf, 0x7c, 0xcf, 0x70, 0x57, 0x61, 0x4e, 0x29, 0x69, 0xcc,
	0xf4, 0x5a, 0x2e, 0x8b, 0x15, 0xc6, 0x4b, 0x91, 0xae, 0x7c, 0x95, 0x4b, 0x2d, 0x19, 0xa8, 0xb5,
	0xbf, 0x3e, 0x8d, 0x50, 0x8b, 0x53, 0xf7, 0x78, 0x21, 0xe5, 0x62, 0x89, 0x5c, 0xa8, 0x94, 0x8b,
	0x2c, 0x93, 0x5a, 0xe8, 0x54, 0x66, 0x54, 0xad, 0x74, 0x47, 0x25, 0x9c, 0xe8, 0x33, 0x85, 0xc4,
	0xcd, 0xb7, 0xc2, 0xc7, 0x67, 0xc0, 0xe6, 0xe1, 0x2c, 0xc0, 0x45, 0x49, 0x91, 0x07, 0xf8, 0xa9,
	0x40, 0xd2, 0xcc, 0x81, 0x7e, 0xbc, 0x2c, 0x4a, 0xc4, 0xb1, 0x3c, 0x6b, 0x32, 0x08, 0xb6, 0x25,
	0x63, 0xd0, 0xcd, 0xc4, 0x0a, 0x9d, 0x8e, 0x81, 0xcd, 0x98, 0xdd, 0x81, 0x3e, 0xa5, 0x9f, 0xf1,
	0xcd, 0x22, 0x72, 0x6c, 0xcf, 0x9a, 0xd8, 0x41, 0xaf, 0x2c, 0x9f, 0x45, 0xec, 0x18, 0x06, 0xe5,
	0x02, 0x52, 0x22, 0x46, 0xa7, 0x6b, 0x76, 0xec, 0x80, 0x71, 0x04, 0x47, 0xf3, 0x70, 0xf6, 0x2a,
	0xcb, 0xff, 0x8b, 0xfc, 0x02, 0x87, 0xdd, 0xe6, 0x78, 0x6b, 0xae, 0xf7, 0x14, 0x29, 0xce, 0xd3,
	0x08, 0xaf, 0x83, 0xe1, 0x9b, 0x05, 0xfd, 0x79, 0x38, 0x7b, 0x9e, 0xbd, 0x93, 0xcd, 0x6e, 0xeb,
	0x6a, 0x73, 0x3a, 0xfb, 0xcd, 0x69, 0x1f, 0xcb, 0x46, 0xd0, 0x23, 0x2d, 0x74, 0x41, 0xb5, 0x6f,
	0x75, 0x55, 0xe2, 0x55, 0x0c, 0x9c, 0x5b, 0x15, 0x5e, 0x55, 0xcc, 0x83, 0xa1, 0x88, 0x63, 0x24,
	0x7a, 0x21, 0x13, 0x24, 0xa7, 0xe7, 0xd9, 0x93, 0x41, 0xf0, 0x2f, 0x34, 0x4e, 0xe0, 0xf0, 0x82,
	0x15, 0xa4, 0x64, 0x46, 0xc8, 0x1e, 0x36, 0x44, 0xa5, 0xea, 0xe1, 0xf4, 0xb6, 0x5f, 0xa5, 0xc4,
	0x7f, 0x69, 0xd0, 0x86, 0xf8, 0x01, 0xd8, 0x6a, 0x1d, 0x9b, 0x3b, 0x0c, 0xa7, 0x87, 0xfe, 0x2e,
	0x78, 0x7e, 0x7d, 0xfb, 0xa0, 0x9c, 0x9f, 0xfe, 0xea, 0xc2, 0x68, 0xde, 0x24, 0x36, 0x34, 0xe2,
	0x66, 0x65, 0x62, 0x89, 0xfd, 0xb4, 0xe0, 0x60, 0x4b, 0xcf, 0xee, 0xb5, 0x4e, 0x68, 0x3d, 0x91,
	0x7b, 0x7f, 0xef, 0x7c, 0xa5, 0x7b, 0xac, 0xbe, 0xfc, 0xfe, 0xf3, 0xb5, 0xf3, 0x81, 0xbd, 0xe7,
	0x42, 0x29, 0x8a, 0x65, 0x52, 0x25, 0xff, 0x63, 0x11, 0x61, 0x9e, 0xa1, 0x46, 0xe2, 0xf5, 0x6e,
	0x5e, 0xbf, 0x2d, 0xf1, 0xf3, 0x7a, 0xb4, 0xe1, 0x8d, 0xcf, 0xc4, 0xcf, 0x9b, 0xf1, 0x86, 0x5f,
	0xd9, 0x6a, 0xf5, 0x92, 0x0d, 0xfb, 0x6e, 0xc1, 0xc1, 0xb6, 0x51, 0x2e, 0xe9, 0x6f, 0x75, 0x90,
	0x7b, 0xb4, 0xb5, 0x31, 0x94, 0x69, 0xd2, 0x88, 0x26, 0x23, 0x7a, 0xe5, 0xde, 0x98, 0xe8, 0xc7,
	0xd6, 0x09, 0xfb, 0x61, 0x01, 0xec, 0xba, 0x8c, 0x79, 0x2d, 0xe5, 0x97, 0x1a, 0x70, 0x8f, 0xf6,
	0xda, 0xf0, 0x93, 0x1b, 0xd3, 0xfe, 0x64, 0xf0, 0xba, 0x5f, 0x1f, 0x19, 0xf5, 0xcc, 0xdf, 0xea,
	0xd1, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x58, 0x80, 0x3d, 0x0e, 0x05, 0x00, 0x00,
}
